cscope 15 /media/jahn/External2/firewatch/drone/MultiWii_2_4/MultiWii               0000445234
	@Alarms.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"LCD.h
"

7 
	~"Sís‹s.h
"

8 
	~"Aœrms.h
"

10 
Æ¨mP©ã∫Compo£r
();

11 
∑âînDecode
(
uöt8_t
 
ªsour˚
,
uöt16_t
 
fú°
,uöt16_à
£c⁄d
,uöt16_à
thúd
,uöt16_à
cy˛ïau£
, uöt16_à
íd∑u£
);

12 
£tTimög
(
uöt8_t
 
ªsour˚
, 
uöt16_t
 
pul£
, uöt16_à
∑u£
);

13 
tu∫Off
(
uöt8_t
 
ªsour˚
);

14 
toggÀResour˚
(
uöt8_t
 
ªsour˚
, uöt8_à
a˘iv©e
);

15 
v¨io_ouçut
(
uöt16_t
 
d
, 
uöt8_t
 
up
);

16 
ölöe
 
swôch_Àd_Êashî
(
uöt8_t
 
⁄
);

17 
ölöe
 
swôch_œndög_lights
(
uöt8_t
 
⁄
);

18 
PûŸLampSequí˚
(
uöt16_t
 
•ìd
, uöt16_à
∑âîn
, 
uöt8_t
 
num_∑âîns
);

20 
uöt8_t
 
	gcy˛eD⁄e
[5]={0,0,0,0,0},

21 
	gªsour˚IsOn
[5] = {0,0,0,0,0};

22 
uöt32_t
 
	gLa°ToggÀTime
[5] ={0,0,0,0,0};

23 
öt16_t
 
	gi2c_îr‹s_cou¡_ﬁd
 = 0;

25 
uöt8_t
 
	gSequí˚A˘ive
[5]={0,0,0,0,0};

27 #i‡
deföed
(
BUZZER
)

28 
uöt8_t
 
	$isBuzzîON
(Ë{  
ªsour˚IsOn
[1]; 
	}
}

30 
uöt8_t
 
	$isBuzzîON
(Ë{  0; 
	}
}

56 
	$Æ¨mH™dÀr
(){

58 #i‡
	`deföed
(
RCOPTIONSBEEP
)

59 
uöt8_t
 
i
 = 0,
fú°run
 = 1, 
œ°_rcO±i⁄s
[
CHECKBOXITEMS
];

61 i‡(
œ°_rcO±i⁄s
[
i
] !
rcO±i⁄s
[i]Ë
Æ¨mAºay
[
ALRM_FAC_TOGGLE
] = 
ALRM_LVL_TOGGLE_1
;

62 
œ°_rcO±i⁄s
[
i
] = 
rcO±i⁄s
[i];

63 
i
++;

64 if(
i
 >
CHECKBOXITEMS
)i=0;

66 if(
fú°run
 =1 && 
Æ¨mAºay
[
ALRM_FAC_CONFIRM
] =
ALRM_LVL_OFF
) {

67 
Æ¨mAºay
[
ALRM_FAC_TOGGLE
] = 
ALRM_LVL_OFF
;

68 
Æ¨mAºay
[
ALRM_FAC_BEEPERON
] = 
ALRM_LVL_OFF
;

70 
fú°run
 = 0;

73 #i‡
	`deföed
(
FAILSAFE
)

74 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& 
f
.
ARMED
) {

75 
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_FAILSAFE_PANIC
;

76 i‡(
Áûß„C¡
 > 5*(
FAILSAFE_DELAY
+
FAILSAFE_OFF_DELAY
)Ë
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_FAILSAFE_FINDME
;

78 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& !
f
.
ARMED
Ë
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_FAILSAFE_FINDME
;

79 i‡–
Áûß„C¡
 =0Ë
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_OFF
;

82 #i‡
GPS


83 i‡((
f
.
GPS_mode
 !
GPS_MODE_NONE
Ë&& !f.
GPS_FIX
Ë
Æ¨mAºay
[
ALRM_FAC_GPS
] = 
ALRM_LVL_GPS_NOFIX
;

84 i‡(!
f
.
GPS_FIX
Ë
Æ¨mAºay
[
ALRM_FAC_GPS
] = 
ALRM_LVL_ON
;

85 
Æ¨mAºay
[
ALRM_FAC_GPS
] = 
ALRM_LVL_OFF
;

88 #i‡
	`deföed
(
BUZZER
)

89 i‡–
rcO±i⁄s
[
BOXBEEPERON
] ) 
Æ¨mAºay
[
ALRM_FAC_BEEPERON
] = 
ALRM_LVL_ON
;

90 
Æ¨mAºay
[
ALRM_FAC_BEEPERON
] = 
ALRM_LVL_OFF
;

93 #i‡
	`deföed
(
POWERMETER
)

94 i‡–(
pMëî
[
PMOTOR_SUM
] < 
pAœrm
Ë|| (pAœrm =0Ë|| !
f
.
ARMED
Ë
Æ¨mAºay
[
ALRM_FAC_PMETER
] = 
ALRM_LVL_OFF
;

95 i‡(
pMëî
[
PMOTOR_SUM
] > 
pAœrm
Ë
Æ¨mAºay
[
ALRM_FAC_PMETER
] = 
ALRM_LVL_ON
;

98 #i‡
	`deföed
(
ARMEDTIMEWARNING
)

99 i‡(
ArmedTimeW¨nögMi¸oSec⁄ds
 > 0 && 
¨medTime
 >ArmedTimeW¨nögMi¸oSec⁄d†&& 
f
.
ARMED
Ë
Æ¨mAºay
[
ALRM_FAC_RUNTIME
] = 
ALRM_LVL_ON
;

100 
Æ¨mAºay
[
ALRM_FAC_RUNTIME
] = 
ALRM_LVL_OFF
;

103 #i‡
	`deföed
(
VBAT
)

104 i‡(
vb©Mö
 < 
c⁄f
.
vb©Àvñ_¸ô
Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_VBAT_CRIT
;

105 i‡–(
™Æog
.
vb©
 > 
c⁄f
.
vb©Àvñ_w¨n1
Ë|| (
NO_VBAT
 >á«log.vb©)Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_OFF
;

106 i‡(
™Æog
.
vb©
 > 
c⁄f
.
vb©Àvñ_w¨n2
Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_VBAT_INFO
;

107 i‡(
™Æog
.
vb©
 > 
c⁄f
.
vb©Àvñ_¸ô
Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_VBAT_WARN
;

111 i‡(
i2c_îr‹s_cou¡
 > 
i2c_îr‹s_cou¡_ﬁd
+100 || i2c_îr‹s_cou¡ < -1Ë
Æ¨mAºay
[
ALRM_FAC_I2CERROR
] = 
ALRM_LVL_ON
;

112 
Æ¨mAºay
[
ALRM_FAC_I2CERROR
] = 
ALRM_LVL_OFF
;

113 #i‡
	`deföed
(
LCD_TELEMETRY
Ë&& !deföed(
SUPPRESS_TELEMETRY_PAGE_8
)

114 i‡(
ãÀmëry
 =8Ë
	`lcd_ãÀmëry
();

116 
	`Æ¨mP©ã∫Compo£r
();

117 
	}
}

119 
	$Æ¨mP©ã∫Compo£r
(){

120 
ªsour˚
 = 0;

122 #i‡
	`deföed
(
BUZZER
)

123 
ªsour˚
 = 1;

124 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_FINDME
ËË
	`∑âînDecode
(
ªsour˚
,200,0,0,50,2000);

125 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_PANIC
) ||

126 
	`IS_ALARM_SET
(
ALRM_FAC_ACC
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,200,200,50,50);

127 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_TOGGLE
 , 
ALRM_LVL_TOGGLE_1
ËË
	`∑âînDecode
(
ªsour˚
,50,0,0,50,0);

128 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_TOGGLE
 , 
ALRM_LVL_TOGGLE_2
ËË
	`∑âînDecode
(
ªsour˚
,50,50,0,50,0);

129 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_TOGGLE
 , 
ALRM_LVL_TOGGLE_ELSE
ËË
	`∑âînDecode
(
ªsour˚
,50,50,50,50,0);

130 #i‡
GPS


131 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_GPS
 , 
ALRM_LVL_GPS_NOFIX
ËË
	`∑âînDecode
(
ªsour˚
,50,50,0,50,50);

133 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_BEEPERON
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,50,50,50,50);

134 #ifde‡
POWERMETER


135 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_PMETER
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,50,0,50,120);

137 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_RUNTIME
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,50,50,50,0);

138 #ifde‡
VBAT


139 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_VBAT
 , 
ALRM_LVL_VBAT_CRIT
ËË
	`∑âînDecode
(
ªsour˚
,50,50,200,50,2000);

140 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_VBAT
 , 
ALRM_LVL_VBAT_WARN
ËË
	`∑âînDecode
(
ªsour˚
,50,200,0,50,2000);

141 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_VBAT
 , 
ALRM_LVL_VBAT_INFO
ËË
	`∑âînDecode
(
ªsour˚
,200,0,0,50,2000);

143 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_CONFIRM
 , 
ALRM_LVL_CONFIRM_1
ËË
	`∑âînDecode
(
ªsour˚
,200,0,0,50,200);

144 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_CONFIRM
 , 
ALRM_LVL_CONFIRM_2
ËË
	`∑âînDecode
(
ªsour˚
,200,200,0,50,200);

145 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_CONFIRM
 , 
ALRM_LVL_CONFIRM_ELSE
ËË
	`∑âînDecode
(
ªsour˚
,200,200,200,50,200);

146 i‡(
Sequí˚A˘ive
[(
uöt8_t
)
ªsour˚
] =1Ë
	`∑âînDecode
(resource,0,0,0,0,0);

147 
	`tu∫Off
(
ªsour˚
);

148 
Æ¨mAºay
[
ALRM_FAC_ACC
] = 
ALRM_LVL_OFF
;

151 #i‡
	`deföed
(
PILOTLAMP
)

152 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_I2CERROR
 , 
ALRM_LVL_ON
ËË
	`PûŸLampSequí˚
(100,
B000111
,2);

153 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_BEEPERON
 , 
ALRM_LVL_ON
ËË
	`PûŸLampSequí˚
(100,
B0101
<<8|
B00010001
,4);

155 
ªsour˚
 = 2;

156 i‡(
f
.
ARMED
 && f.
ANGLE_MODE
Ë
	`∑âînDecode
(
ªsour˚
,100,100,100,100,1000);

157 i‡(
f
.
ARMED
 && f.
HORIZON_MODE
Ë
	`∑âînDecode
(
ªsour˚
,200,200,200,100,1000);

158 i‡(
f
.
ARMED
Ë
	`∑âînDecode
(
ªsour˚
,100,100,0,100,1000);

159 
	`tu∫Off
(
ªsour˚
);

160 
ªsour˚
 = 3;

161 #i‡
GPS


162 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_GPS
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,100,100,100,100,100);

163 i‡(
f
.
GPS_mode
 !
GPS_MODE_NONE
Ë
	`∑âînDecode
(
ªsour˚
,100,100,100,100,1000);

164 
	`£tTimög
(
ªsour˚
,100,1000);

166 
	`tu∫Off
(
ªsour˚
);

168 
ªsour˚
 = 4;

169 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_PANIC
ËË
	`£tTimög
(
ªsour˚
,100,100);

170 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_FINDME
ËË
	`∑âînDecode
(
ªsour˚
,1000,0,0,0,2000);

171 
	`tu∫Off
(
ªsour˚
);

174 
	}
}

176 
	$∑âînDecode
(
uöt8_t
 
ªsour˚
,
uöt16_t
 
fú°
,uöt16_à
£c⁄d
,uöt16_à
thúd
,uöt16_à
cy˛ïau£
, uöt16_à
íd∑u£
){

177 
uöt16_t
 
∑âîn
[5][5];

178 
uöt8_t
 
i˙t
[5] = {0,0,0,0,0};

180 if(
Sequí˚A˘ive
[
ªsour˚
] == 0){

181 
Sequí˚A˘ive
[
ªsour˚
] = 1;

182 
∑âîn
[
ªsour˚
][0] = 
fú°
;

183 
∑âîn
[
ªsour˚
][1] = 
£c⁄d
;

184 
∑âîn
[
ªsour˚
][2] = 
thúd
;

185 
∑âîn
[
ªsour˚
][3] = 
íd∑u£
;

186 
∑âîn
[
ªsour˚
][4] = 
cy˛ïau£
;

188 if(
i˙t
[
ªsour˚
] <3 ){

189 i‡(
∑âîn
[
ªsour˚
][
i˙t
[resource]] != 0){

190 
	`£tTimög
(
ªsour˚
,
∑âîn
[ªsour˚][
i˙t
[resource]],pattern[resource][4]);

193 i‡(
La°ToggÀTime
[
ªsour˚
] < (
	`mûlis
()-
∑âîn
[resource][3])) {

194 
i˙t
[
ªsour˚
]=0;

195 
Sequí˚A˘ive
[
ªsour˚
] = 0;

196 
Æ¨mAºay
[
ALRM_FAC_TOGGLE
] = 
ALRM_LVL_OFF
;

197 
Æ¨mAºay
[
ALRM_FAC_CONFIRM
] = 
ALRM_LVL_OFF
;

198 
	`tu∫Off
(
ªsour˚
);

201 i‡(
cy˛eD⁄e
[
ªsour˚
] =1 || 
∑âîn
[ªsour˚][
i˙t
[resource]] == 0) {

202 i‡(
i˙t
[
ªsour˚
] < 3) {

203 
i˙t
[
ªsour˚
]++;

205 
cy˛eD⁄e
[
ªsour˚
] = 0;

206 
	`tu∫Off
(
ªsour˚
);

208 
	}
}

210 
	$tu∫Off
(
uöt8_t
 
ªsour˚
){

211 i‡(
ªsour˚
 == 1) {

212 i‡(
ªsour˚IsOn
[1]) {

213 
BUZZERPIN_OFF
;

214 
ªsour˚IsOn
[1] = 0;

216 }i‡(
ªsour˚
 == 0) {

217 i‡(
ªsour˚IsOn
[0]) {

218 
ªsour˚IsOn
[0] = 0;

219 
LEDPIN_OFF
;

221 }i‡(
ªsour˚
 == 2) {

222 i‡(
ªsour˚IsOn
[2]) {

223 
ªsour˚IsOn
[2] = 0;

224 #i‡
	`deföed
 (
PILOTLAMP
)

225 
	`PûŸLamp
(
PL_GRN_OFF
);

228 }i‡(
ªsour˚
 == 3) {

229 i‡(
ªsour˚IsOn
[3]) {

230 
ªsour˚IsOn
[3] = 0;

231 #i‡
	`deföed
 (
PILOTLAMP
)

232 
	`PûŸLamp
(
PL_BLU_OFF
);

235 }i‡(
ªsour˚
 == 4) {

236 i‡(
ªsour˚IsOn
[4]) {

237 
ªsour˚IsOn
[4] = 0;

238 #i‡
	`deföed
 (
PILOTLAMP
)

239 
	`PûŸLamp
(
PL_RED_OFF
);

243 
	}
}

245 #i‡
deföed
 (
PILOTLAMP
)

249 
	#PL_BUF_SIZE
 8

	)

250 vﬁ©ûê
uöt8_t
 
	gqueue
[
PL_BUF_SIZE
];

251 vﬁ©ûê
uöt8_t
 
	ghód
 = 0;

252 vﬁ©ûê
uöt8_t
 
	gèû
 = 0;

270 
	$PûŸLampSequí˚
(
uöt16_t
 
•ìd
, uöt16_à
∑âîn
, 
uöt8_t
 
num_∑âîns
){

271 
uöt32_t
 
œ°swôch
 = 0;

272 
uöt8_t
 
£qno
 = 0;

273 
uöt16_t
 
œ°∑âîn
 = 0;

275 if(
	`mûlis
(Ë< (
œ°swôch
 + 
•ìd
))

277 
œ°swôch
 = 
	`mûlis
();

279 
uöt8_t
 
i
=0;i<3;i++) {

280 
uöt8_t
 
°©e
 = (
∑âîn
 >>(
£qno
*3+
i
)) & 1;

283 
uöt8_t
 
tick
 = 50*(
i
+1);

284 i‡(
°©e
)

285 
tick
 -=25;

286 
	`PûŸLamp
(
tick
);

287 
ªsour˚IsOn
[
i
+2]=
°©e
;

289 
£qno
++;

290 
£qno
%=
num_∑âîns
;

291 
	}
}

293 
	$PûŸLamp
(
uöt8_t
 
cou¡
){

294 i‡(((
èû
+1)%
PL_BUF_SIZE
)!=
hód
) {

295 
queue
[
èû
]=
cou¡
;

296 
èû
++;

297 
èû
=—aû%
PL_BUF_SIZE
);

299 
	}
}

301 
	$ISR
(
PL_ISR
) {

302 
uöt8_t
 
°©e
 = 0;

303 
uöt8_t
 
h
 = 
hód
;

304 
uöt8_t
 
t
 = 
èû
;

305 i‡(
°©e
==0) {

306 i‡(
h
!=
t
) {

307 
uöt8_t
 
c
 = 
queue
[
h
];

308 
PL_PIN_ON
;

309 
PL_CHANNEL
+=
c
;

310 
h
 = ((h+1Ë% 
PL_BUF_SIZE
);

311 
hód
 = 
h
;

312 
°©e
=1;

314 } i‡(
°©e
==1) {

315 
PL_PIN_OFF
;

316 
PL_CHANNEL
+=
PL_IDLE
;

317 
°©e
=0;

319 
	}
}

327 
	$blökLED
(
uöt8_t
 
num
, uöt8_à
⁄time
,uöt8_à
ª≥©
) {

328 
uöt8_t
 
i
,
r
;

329 
r
=0;r<
ª≥©
;r++) {

330 
i
=0;i<
num
;i++) {

331 #i‡
	`deföed
(
LED_FLASHER
)

332 
	`swôch_Àd_Êashî
(1);

334 #i‡
	`deföed
(
LANDING_LIGHTS_DDR
)

335 
	`swôch_œndög_lights
(1);

337 
LEDPIN_TOGGLE
;

338 
	`dñay
(
⁄time
);

339 #i‡
	`deföed
(
LED_FLASHER
)

340 
	`swôch_Àd_Êashî
(0);

342 #i‡
	`deföed
(
LANDING_LIGHTS_DDR
)

343 
	`swôch_œndög_lights
(0);

346 
	`dñay
(60);

348 
	}
}

354 
	$£tTimög
(
uöt8_t
 
ªsour˚
, 
uöt16_t
 
pul£
, uöt16_à
∑u£
){

355 i‡(!
ªsour˚IsOn
[
ªsour˚
] && (
	`mûlis
(Ë>(
La°ToggÀTime
[ªsour˚] + 
∑u£
))&& 
pul£
 != 0) {

356 
ªsour˚IsOn
[
ªsour˚
] = 1;

357 
	`toggÀResour˚
(
ªsour˚
,1);

358 
La°ToggÀTime
[
ªsour˚
]=
	`mûlis
();

359 } i‡–(
ªsour˚IsOn
[
ªsour˚
] && (
	`mûlis
(Ë>
La°ToggÀTime
[ªsour˚] + 
pul£
) ) || (pulse==0 &&ÑesourceIsOn[resource]) ) {

360 
ªsour˚IsOn
[
ªsour˚
] = 0;

361 
	`toggÀResour˚
(
ªsour˚
,0);

362 
La°ToggÀTime
[
ªsour˚
]=
	`mûlis
();

363 
cy˛eD⁄e
[
ªsour˚
] = 1;

365 
	}
}

367 
	$toggÀResour˚
(
uöt8_t
 
ªsour˚
, uöt8_à
a˘iv©e
){

368 
ªsour˚
) {

369 #i‡
	`deföed
 (
BUZZER
)

371 i‡(
a˘iv©e
 =1Ë{
BUZZERPIN_ON
;}

372 
BUZZERPIN_OFF
;

375 #i‡
	`deföed
 (
PILOTLAMP
)

377 i‡(
a˘iv©e
 =1Ë
	`PûŸLamp
(
PL_GRN_ON
);

378 
	`PûŸLamp
(
PL_GRN_OFF
);

381 i‡(
a˘iv©e
 =1Ë
	`PûŸLamp
(
PL_BLU_ON
);

382 
	`PûŸLamp
(
PL_BLU_OFF
);

385 i‡(
a˘iv©e
 =1Ë
	`PûŸLamp
(
PL_RED_ON
);

386 
	`PûŸLamp
(
PL_RED_OFF
);

391 i‡(
a˘iv©e
 =1Ë{
LEDPIN_ON
;}

392 
LEDPIN_OFF
;

396 
	}
}

403 #i‡
deföed
(
LED_RING
)

405 
	#LED_RING_ADDRESS
 0xDA

406 

	)

407 
	$i2CLedRögSèã
() {

408 
uöt8_t
 
b
[10];

410 
b
[0]='M';

411 i‡(
f
.
ARMED
) {

412 if(!(
f
.
ANGLE_MODE
||f.
HORIZON_MODE
)){

413 
b
[0]= 'x';

414 } if(
f
.
GPS_mode
 =
GPS_MODE_RTH
){

415 
b
[0]= 'w';

416 } if(
f
.
GPS_mode
 =
GPS_MODE_HOLD
){

417 
b
[0]= 'v';

418 } if(
f
.
HORIZON_MODE
){

419 
b
[0]= 'y';

421 
b
[0]= 'u';

423 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

424 
	`i2c_wrôe
(
b
[0]);

425 
	`i2c_°›
();

426 } i‡(!
f
.
ACC_CALIBRATED
) {

427 
b
[0]= 't';

428 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

429 
	`i2c_wrôe
(
b
[0]);

430 
	`i2c_°›
();

432 
b
[0]= 's';

433 i‡(
f
.
ANGLE_MODE
Ë
b
[1]=1;

434 i‡(
f
.
HORIZON_MODE
Ë
b
[1]=2;

435 
b
[1]= 0;

436 i‡(
f
.
BARO_MODE
Ë
b
[2]=1;

437 
b
[2]= 0;

438 i‡(
f
.
MAG_MODE
Ë
b
[3]=1;

439 
b
[3]= 0;

440 #i‡
GPS


441 i‡(
rcO±i⁄s
[
BOXGPSHOME
]Ë
b
[4]=2;

442 i‡(
rcO±i⁄s
[
BOXGPSHOLD
]Ë
b
[4]=1;

443 
b
[4]=0;

445 
b
[4]=0;

447 
b
[5]=(180-
©t
.
hódög
)/2;

448 
b
[6]=
GPS_numS©
;

449 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

450 
uöt8_t
 
i
=0;i<7;i++){

451 
	`i2c_wrôe
(
b
[
i
]);

453 
	`i2c_°›
();

455 #i‡
	`deföed
 (
VBAT
)

456 i‡(
™Æog
.
vb©
 < 
c⁄f
.
vb©Àvñ_w¨n1
){

457 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

458 
	`i2c_wrôe
('r');

459 
	`i2c_°›
();

462 
	}
}

464 
	$blökLedRög
() {

465 
uöt8_t
 
b
[3];

466 
b
[0]='g';

467 
b
[1]= 10;

468 
b
[2]= 10;

469 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
<<1);

470 
uöt8_t
 
i
=0;i<3;i++)

471 
	`i2c_wrôe
(
b
[
i
]);

472 
	`i2c_°›
();

473 
	}
}

480 #i‡
deföed
(
LED_FLASHER
)

481 
uöt8_t
 
	gÀd_Êashî_£quí˚
 = 0;

484 
	mLED_FLASHER_AUTO
,

485 
	mLED_FLASHER_CUSTOM


486 } 
	gÀd_Êashî_c⁄åﬁ
 = 
LED_FLASHER_AUTO
;

488 
	$öô_Àd_Êashî
() {

489 #i‡
	`deföed
(
LED_FLASHER_DDR
)

490 
LED_FLASHER_DDR
 |(1<<
LED_FLASHER_BIT
);

491 
	`swôch_Àd_Êashî
(0);

493 
	}
}

495 
	$Àd_Êashî_£t_£quí˚
(
uöt8_t
 
s
) {

496 
Àd_Êashî_£quí˚
 = 
s
;

497 
	}
}

499 
ölöe
 
	$swôch_Àd_Êashî
(
uöt8_t
 
⁄
) {

500 #i‡
	`deföed
(
LED_FLASHER_DDR
)

501 #i‚de‡
LED_FLASHER_INVERT


502 i‡(
⁄
) {

504 i‡(!
⁄
) {

506 
LED_FLASHER_PORT
 |(1<<
LED_FLASHER_BIT
);

508 
LED_FLASHER_PORT
 &~(1<<
LED_FLASHER_BIT
);

511 
	}
}

513 
uöt8_t
 
ölöe
 
	$Àd_Êashî_⁄
() {

514 
uöt8_t
 
£g
 = (
cuºítTime
/1000/125)%8;

515  (
Àd_Êashî_£quí˚
 & 1<<
£g
);

516 
	}
}

518 
	$auto_swôch_Àd_Êashî
() {

519 i‡(
	`Àd_Êashî_⁄
()) {

520 
	`swôch_Àd_Êashî
(1);

522 
	`swôch_Àd_Êashî
(0);

524 
	}
}

529 
	$Àd_Êashî_auto£À˘_£quí˚
() {

530 i‡(
Àd_Êashî_c⁄åﬁ
 !
LED_FLASHER_AUTO
) ;

532 #i‡
	`deföed
(
LED_FLASHER_SEQUENCE_MAX
)

534 i‡(
rcO±i⁄s
[
BOXLEDMAX
]) {

535 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE_MAX
);

540 #i‡
	`deföed
(
LED_FLASHER_SEQUENCE_LOW
)

541 i‡(
rcO±i⁄s
[
BOXLEDLOW
]) {

542 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE_LOW
);

547 #i‡
	`deföed
(
LED_FLASHER_SEQUENCE_ARMED
)

549 i‡(
f
.
ARMED
) {

550 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE_ARMED
);

556 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE
);

557 
	}
}

561 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

562 
	$öô_œndög_lights
() {

563 
LANDING_LIGHTS_DDR
 |1<<
LANDING_LIGHTS_BIT
;

564 
	`swôch_œndög_lights
(0);

565 
	}
}

567 
ölöe
 
	$swôch_œndög_lights
(
uöt8_t
 
⁄
) {

568 #i‚de‡
LANDING_LIGHTS_INVERT


569 i‡(
⁄
) {

571 i‡(!
⁄
) {

573 
LANDING_LIGHTS_PORT
 |1<<
LANDING_LIGHTS_BIT
;

575 
LANDING_LIGHTS_PORT
 &~(1<<
LANDING_LIGHTS_BIT
);

577 
	}
}

579 
	$auto_swôch_œndög_lights
() {

580 i‡(
rcO±i⁄s
[
BOXLLIGHTS
]

581 #i‡
	`deföed
(
LANDING_LIGHTS_AUTO_ALTITUDE
Ë& 
SONAR


582 || (
s⁄¨A…
 >0 && s⁄¨A… <
LANDING_LIGHTS_AUTO_ALTITUDE
 && 
f
.
ARMED
)

584 #i‡
	`deföed
(
LED_FLASHER_DDR
Ë& deföed(
LANDING_LIGHTS_ADOPT_LED_FLASHER_PATTERN
)

585 || (
	`Àd_Êashî_⁄
())

588 
	`swôch_œndög_lights
(1);

590 
	`swôch_œndög_lights
(0);

592 
	}
}

598 #ifde‡
VARIOMETER


599 
	#TRESHOLD_UP
 50

600 
	#TRESHOLD_DOWN
 40

601 
	#TRESHOLD_UP_MINUS_DOWN
 10

602 
	#ALTITUDE_INTERVAL
 400

603 
	#DELTA_ALT_TRESHOLD
 200

604 
	#DELTA_T
 5

605 
	#SIGNAL_SCALE
 4

606 
	#SILENCE_M
 200

607 
	#SILENCE_SCALE
 33

608 
	#SILENCE_A
 6600

609 
	#DURATION_SUP
 5

610 
	#DURATION_SCALE
 100

611 

	)

617 
	$v¨io_sig«lög
() {

618 
öt16_t
 
œ°_v
 = 0;

619 
uöt16_t
 
sûí˚
 = 0;

620 
öt16_t
 
max_v
 = 0;

621 
uöt8_t
 
max_up
 = 0;

623 
uöt16_t
 
s
 = 0;

624 
öt16_t
 
v
 = 0;

627 #i‡(
VARIOMETER
 == 1) || (VARIOMETER == 12)

629 
uöt8_t
 
up
 = (
Æt
.
v¨io
 > 0 ? 1 : 0 );

631 
v
 = 
	`abs
(
Æt
.
v¨io
Ë- 
up
 * (
TRESHOLD_UP_MINUS_DOWN
Ë- 
TRESHOLD_DOWN
;

632 i‡(
sûí˚
>0) silence--; silence = 0;

633 i‡(
v
 > 0) {

635 i‡(
v
 > 
œ°_v
) {

638 
s
 = (
SILENCE_A
Ë/ (
SILENCE_SCALE
 + 
v
);

639 i‡(
sûí˚
 > 
s
) silence = s;

642 i‡(
v
 > 
max_v
) {

643 
max_v
 = 
v
;

644 
max_up
 = 
up
;

650 #i‡(
VARIOMETER
 == 2) || (VARIOMETER == 12)

652 
uöt16_t
 
t
 = 0;

653 i‡(!(
t
++ % 
ALTITUDE_INTERVAL
)) {

654 
öt32_t
 
œ°_B¨oA…
 = 0;

655 
öt32_t
 
dñè_B¨oA…
 = 
Æt
.
E°A…
 - 
œ°_B¨oA…
;

656 i‡(
	`abs
(
dñè_B¨oA…
Ë> 
DELTA_ALT_TRESHOLD
) {

658 
max_v
 = 
	`abs
(
dñè_B¨oA…
 / 
DELTA_T
);

659 
max_up
 = (
dñè_B¨oA…
 > 0 ? 1 : 0);

660 
sûí˚
 = 0;

662 
œ°_B¨oA…
 = 
Æt
.
E°A…
;

667 i‡–(
sûí˚
 =0Ë&& (
max_v
 > 0) ) {

669 
uöt16_t
 
d
 = (
DURATION_SUP
 * 
max_v
)/(
DURATION_SCALE
 + max_v);

670 
s
 = (
SILENCE_A
Ë/ (
SILENCE_SCALE
 + 
max_v
);

671 
s
+
d
 * 
SIGNAL_SCALE
;

672 
	`v¨io_ouçut
(
d
, 
max_up
);

673 
œ°_v
 = 
v
;

674 
max_v
 = 0;

675 
max_up
 = 0;

676 
sûí˚
 = 
s
;

678 
	}
}

680 
	$v¨io_ouçut
(
uöt16_t
 
d
, 
uöt8_t
 
up
) {

681 i‡(
d
 == 0) ;

682 #i‡
	`deföed
(
SUPPRESS_VARIOMETER_UP
)

683 i‡(
up
) ;

684 #ñi‡
	`deföed
(
SUPPRESS_VARIOMETER_DOWN
)

685 i‡(!
up
) ;

687 #ifde‡
VARIOMETER_SINGLE_TONE


688 
uöt8_t
 
s1
 = 0x07;

689 
uöt8_t
 
d1
 = 
d
;

691 
uöt8_t
 
s1
 = (
up
 ? 0x05 : 0x07);

692 
uöt8_t
 
d1
 = 
d
/2;

694 i‡(
d1
<1) d1 = 1;

695 
uöt8_t
 
i
=0; i<
d1
; i++Ë
	`LCD¥öt
(
s1
);

696 #i‚de‡
VARIOMETER_SINGLE_TONE


697 
uöt8_t
 
s2
 = (
up
 ? 0x07 : 0x05);

698 
uöt8_t
 
d2
 = 
d
-
d1
;

699 i‡(
d2
<1) d2 = 1;

700 
uöt8_t
 
i
=0; i<
d2
; i++Ë
	`LCD¥öt
(
s2
);

702 
	}
}

	@Alarms.h

1 #i‚de‡
ALARMS_H_


2 
	#ALARMS_H_


	)

4 
blökLED
(
uöt8_t
 
num
, uöt8_à
⁄time
,uöt8_à
ª≥©
);

5 
uöt8_t
 
isBuzzîON
();

6 
Æ¨mH™dÀr
();

7 
v¨io_sig«lög
();

8 
i2CLedRögSèã
();

9 
blökLedRög
();

10 
auto_swôch_Àd_Êashî
();

11 
öô_Àd_Êashî
();

12 
Àd_Êashî_£t_£quí˚
(
uöt8_t
 
s
);

13 
Àd_Êashî_auto£À˘_£quí˚
();

14 
öô_œndög_lights
();

15 
auto_swôch_œndög_lights
();

16 
PûŸLamp
(
uöt8_t
 
cou¡
);

31 
	eÆrm_Ác
 {

32 
	mALRM_FAC_TOGGLE
 = 0,

33 
	mALRM_FAC_FAILSAFE
,

34 
	mALRM_FAC_GPS
,

35 
	mALRM_FAC_BEEPERON
,

36 
	mALRM_FAC_PMETER
,

37 
	mALRM_FAC_RUNTIME
,

38 
	mALRM_FAC_VBAT
,

39 
	mALRM_FAC_CONFIRM
,

40 
	mALRM_FAC_ACC
,

41 
	mALRM_FAC_I2CERROR
,

42 
	mALRM_FAC_SIZE
,

54 
	eÆrm_ªs
 {

55 
	mALRM_RES_LED
 = 0,

56 
	mALRM_RES_BUZZER
,

57 
	mALRM_RES_PL_GREEN
,

58 
	mALRM_RES_PL_BLUE
,

59 
	mALRM_RES_PL_RED
,

60 
	mALRM_RES_PL
 ,

61 
	mALRM_RES_ANY
 ,

64 
	eÆrm_lvl_⁄off
 {

65 
	mALRM_LVL_OFF
 = 0,

66 
	mALRM_LVL_ON
 = 1,

68 
	eÆrm_lvl_Áûß„
 {

69 
	mALRM_LVL_FAILSAFE_FINDME
 = 1,

70 
	mALRM_LVL_FAILSAFE_PANIC
,

72 
	eÆrm_lvl_toggÀ
 {

73 
	mALRM_LVL_TOGGLE_1
 = 1,

74 
	mALRM_LVL_TOGGLE_2
 ,

75 
	mALRM_LVL_TOGGLE_ELSE
 ,

77 #i‡
GPS


78 
	eÆrm_lvl_gps
 {

79 
	mALRM_LVL_GPS_NOFIX
 = 2,

82 #ifde‡
VBAT


83 
	eÆrm_lvl_vb©
 {

84 
	mALRM_LVL_VBAT_INFO
 = 1,

85 
	mALRM_LVL_VBAT_WARN
 ,

86 
	mALRM_LVL_VBAT_CRIT
 ,

89 
	eÆrm_lvl_c⁄fúm
 {

90 
	mALRM_LVL_CONFIRM_1
 = 1,

91 
	mALRM_LVL_CONFIRM_2
 ,

92 
	mALRM_LVL_CONFIRM_ELSE
 ,

95 
	#SET_ALARM
(
Ác
, 
Àvñ
Ë
Æ¨mAºay
[Ác] = 
	)
level

96 #ifde‡
BUZZER


97 
	#SET_ALARM_BUZZER
(
Ác
, 
Àvñ
Ë
	`SET_ALARM
–Ác,Üevñ)

	)

99 
	#SET_ALARM_BUZZER
(
Ác
, 
Àvñ
)

	)

102 
	#IS_ALARM_SET
(
Ác
, 
Àvñ
Ë–
Æ¨mAºay
[Ác] =Àvñ )

	)

	@EEPROM.cpp

1 
	~<avr/ì¥om.h
>

2 
	~"Arduöo.h
"

3 
	~"c⁄fig.h
"

4 
	~"def.h
"

5 
	~"ty≥s.h
"

6 
	~"EEPROM.h
"

7 
	~"Mu…iWii.h
"

8 
	~"Aœrms.h
"

9 
	~"GPS.h
"

11 
LﬂdDeÁu…s
();

13 
uöt8_t
 
	$ˇlcuœã_sum
(
uöt8_t
 *
cb
 , uöt8_à
siz
) {

14 
uöt8_t
 
sum
=0x55;

15 --
siz
Ë
sum
 +*
cb
++;

16  
sum
;

17 
	}
}

19 
	$ªadGlobÆSë
() {

20 
	`ì¥om_ªad_block
((*)&
globÆ_c⁄f
, (*)0, (global_conf));

21 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
globÆ_c⁄f
, (globÆ_c⁄f)Ë!globÆ_c⁄f.
checksum
) {

22 
globÆ_c⁄f
.
cuºítSë
 = 0;

23 
globÆ_c⁄f
.
accZîo
[
ROLL
] = 5000;

25 
	}
}

27 
boﬁ
 
	$ªadEEPROM
() {

28 
uöt8_t
 
i
;

29 
öt8_t
 
tmp
;

30 
uöt8_t
 
y
;

32 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


33 if(
globÆ_c⁄f
.
cuºítSë
>2) global_conf.currentSet=0;

35 
globÆ_c⁄f
.
cuºítSë
=0;

37 
	`ì¥om_ªad_block
((*)&
c⁄f
, (*)(
globÆ_c⁄f
.
cuºítSë
 * (conf) + (global_conf)), (conf));

38 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
c⁄f
, (c⁄f)Ë!c⁄f.
checksum
) {

39 
	`blökLED
(6,100,3);

40 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

41 
	`LﬂdDeÁu…s
();

42  
Ál£
;

45 
i
=0;i<5;i++) {

46 
lookupPôchRﬁlRC
[
i
] = (1526+
c⁄f
.
rcExpo8
*(i*i-15))*i*(
öt32_t
)c⁄f.
rcR©e8
/1192;

48 
i
=0;i<11;i++) {

49 
tmp
 = 10*
i
-
c⁄f
.
thrMid8
;

50 
y
 = 
c⁄f
.
thrMid8
;

51 i‡(
tmp
>0Ë
y
 = 100-y;

52 
lookupThrŸéeRC
[
i
] = 100*
c⁄f
.
thrMid8
 + 
tmp
*–(
öt32_t
)c⁄f.
thrExpo8
*—mp*tmp)/((
uöt16_t
)
y
*y)+100-conf.thrExpo8 );

53 
lookupThrŸéeRC
[
i
] = 
c⁄f
.
möthrŸée
 + (
uöt32_t
)((
uöt16_t
)(
MAXTHROTTLE
-conf.minthrottle))*ÜookupThrottleRC[i]/10000;

55 #i‡
	`deföed
(
POWERMETER
)

56 
pAœrm
 = (
uöt32_t
Ë
c⁄f
.
powîTriggî1
 * (uöt32_tË
PLEVELSCALE
 * (uöt32_tË
PLEVELDIV
;

58 #i‡
GPS


59 
	`GPS_£t_pids
();

60 
	`ªˇŒGPSc⁄f
();

62 #i‡
	`deföed
(
ARMEDTIMEWARNING
)

63 
ArmedTimeW¨nögMi¸oSec⁄ds
 = (
c⁄f
.
¨medtimew¨nög
 *1000000);

65  
åue
;

66 
	}
}

68 
	$wrôeGlobÆSë
(
uöt8_t
 
b
) {

69 
globÆ_c⁄f
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&global_conf, (global_conf));

70 
	`ì¥om_wrôe_block
((c⁄° *)&
globÆ_c⁄f
, (*)0, (global_conf));

71 i‡(
b
 =1Ë
	`blökLED
(15,20,1);

72 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

74 
	}
}

76 
	$wrôeP¨ams
(
uöt8_t
 
b
) {

77 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


78 if(
globÆ_c⁄f
.
cuºítSë
>2) global_conf.currentSet=0;

80 
globÆ_c⁄f
.
cuºítSë
=0;

82 
c⁄f
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&conf, (conf));

83 
	`ì¥om_wrôe_block
((c⁄° *)&
c⁄f
, (*)(
globÆ_c⁄f
.
cuºítSë
 * (conf) + (global_conf)), (conf));

85 #i‡
GPS


86 
	`wrôeGPSc⁄f
();

87 
	`ªˇŒGPSc⁄f
();

90 
	`ªadEEPROM
();

91 i‡(
b
 =1Ë
	`blökLED
(15,20,1);

92 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

93 
	}
}

95 
	$upd©e_c⁄°™ts
() {

96 #i‡
	`deföed
(
GYRO_SMOOTHING
)

98 
uöt8_t
 
s
[3] = 
GYRO_SMOOTHING
;

99 
uöt8_t
 
i
=0;i<3;i++Ë
c⁄f
.
SmoŸhög
[i] = 
s
[i];

102 #i‡
	`deföed
 (
FAILSAFE
)

103 
c⁄f
.
Áûß„_thrŸée
 = 
FAILSAFE_THROTTLE
;

105 #ifde‡
VBAT


106 
c⁄f
.
vb©sˇÀ
 = 
VBATSCALE
;

107 
c⁄f
.
vb©Àvñ_w¨n1
 = 
VBATLEVEL_WARN1
;

108 
c⁄f
.
vb©Àvñ_w¨n2
 = 
VBATLEVEL_WARN2
;

109 
c⁄f
.
vb©Àvñ_¸ô
 = 
VBATLEVEL_CRIT
;

111 #ifde‡
POWERMETER


112 
c⁄f
.
pöt2ma
 = 
PINT2mA
;

114 #ifde‡
POWERMETER_HARD


115 
c⁄f
.
p£ns‹nuŒ
 = 
PSENSORNULL
;

117 #ifde‡
MMGYRO


118 
c⁄f
.
mmgyro
 = 
MMGYRO
;

120 #i‡
	`deföed
(
ARMEDTIMEWARNING
)

121 
c⁄f
.
¨medtimew¨nög
 = 
ARMEDTIMEWARNING
;

123 
c⁄f
.
möthrŸée
 = 
MINTHROTTLE
;

124 #i‡
MAG


125 
c⁄f
.
mag_de˛ö©i⁄
 = (
öt16_t
)(
MAG_DECLINATION
 * 10);

127 #ifde‡
GOVERNOR_P


128 
c⁄f
.
govîn‹P
 = 
GOVERNOR_P
;

129 
c⁄f
.
govîn‹D
 = 
GOVERNOR_D
;

131 #ifde‡
YAW_COLL_PRECOMP


132 
c⁄f
.
yawCﬁlPªcomp
 = 
YAW_COLL_PRECOMP
;

133 
c⁄f
.
yawCﬁlPªcompDódb™d
 = 
YAW_COLL_PRECOMP_DEADBAND
;

135 #i‡
	`deföed
(
MY_PRIVATE_DEFAULTS
)

136 #ö˛udê
MY_PRIVATE_DEFAULTS


139 #i‡
GPS


140 
	`lﬂdGPSdeÁu…s
();

143 
	`wrôeP¨ams
(0);

144 
	}
}

146 
	$LﬂdDeÁu…s
() {

147 
uöt8_t
 
i
;

148 #ifde‡
SUPPRESS_DEFAULTS_FROM_GUI


150 #ñi‡
	`deföed
(
MY_PRIVATE_DEFAULTS
)

154 #i‡
PID_CONTROLLER
 == 1

155 
c⁄f
.
pid
[
ROLL
].
P8
 = 33; c⁄f.pid[ROLL].
I8
 = 30; c⁄f.pid[ROLL].
D8
 = 23;

156 
c⁄f
.
pid
[
PITCH
].
P8
 = 33; c⁄f.pid[PITCH].
I8
 = 30; c⁄f.pid[PITCH].
D8
 = 23;

157 
c⁄f
.
pid
[
PIDLEVEL
].
P8
 = 90; c⁄f.pid[PIDLEVEL].
I8
 = 10; c⁄f.pid[PIDLEVEL].
D8
 = 100;

158 #ñi‡
PID_CONTROLLER
 == 2

159 
c⁄f
.
pid
[
ROLL
].
P8
 = 28; c⁄f.pid[ROLL].
I8
 = 10; c⁄f.pid[ROLL].
D8
 = 7;

160 
c⁄f
.
pid
[
PITCH
].
P8
 = 28; c⁄f.pid[PITCH].
I8
 = 10; c⁄f.pid[PITCH].
D8
 = 7;

161 
c⁄f
.
pid
[
PIDLEVEL
].
P8
 = 30; c⁄f.pid[PIDLEVEL].
I8
 = 32; c⁄f.pid[PIDLEVEL].
D8
 = 0;

163 
c⁄f
.
pid
[
YAW
].
P8
 = 68; c⁄f.pid[YAW].
I8
 = 45; c⁄f.pid[YAW].
D8
 = 0;

164 
c⁄f
.
pid
[
PIDALT
].
P8
 = 64; c⁄f.pid[PIDALT].
I8
 = 25; c⁄f.pid[PIDALT].
D8
 = 24;

166 
c⁄f
.
pid
[
PIDPOS
].
P8
 = 
POSHOLD_P
 * 100; c⁄f.pid[PIDPOS].
I8
 = 
POSHOLD_I
 * 100; c⁄f.pid[PIDPOS].
D8
 = 0;

167 
c⁄f
.
pid
[
PIDPOSR
].
P8
 = 
POSHOLD_RATE_P
 * 10; c⁄f.pid[PIDPOSR].
I8
 = 
POSHOLD_RATE_I
 * 100; c⁄f.pid[PIDPOSR].
D8
 = 
POSHOLD_RATE_D
 * 1000;

168 
c⁄f
.
pid
[
PIDNAVR
].
P8
 = 
NAV_P
 * 10; c⁄f.pid[PIDNAVR].
I8
 = 
NAV_I
 * 100; c⁄f.pid[PIDNAVR].
D8
 = 
NAV_D
 * 1000;

170 
c⁄f
.
pid
[
PIDMAG
].
P8
 = 40;

172 
c⁄f
.
pid
[
PIDVEL
].
P8
 = 0; c⁄f.pid[PIDVEL].
I8
 = 0; c⁄f.pid[PIDVEL].
D8
 = 0;

174 
c⁄f
.
rcR©e8
 = 90; c⁄f.
rcExpo8
 = 65;

175 
c⁄f
.
rﬁlPôchR©e
 = 0;

176 
c⁄f
.
yawR©e
 = 0;

177 
c⁄f
.
dynThrPID
 = 0;

178 
c⁄f
.
thrMid8
 = 50; c⁄f.
thrExpo8
 = 0;

179 
i
=0;i<
CHECKBOXITEMS
;i++Ë{
c⁄f
.
a˘iv©e
[i] = 0;}

180 
c⁄f
.
™gÀTrim
[0] = 0; conf.angleTrim[1] = 0;

181 
c⁄f
.
powîTriggî1
 = 0;

183 #i‡
	`deföed
(
SERVO
)

184 
öt8_t
 
§
[8] = 
SERVO_RATES
;

185 #ifde‡
SERVO_MIN


186 
öt16_t
 
smö
[8] = 
SERVO_MIN
;

187 
öt16_t
 
smax
[8] = 
SERVO_MAX
;

188 
öt16_t
 
smid
[8] = 
SERVO_MID
;

190 
i
=0;i<8;i++) {

191 #ifde‡
SERVO_MIN


192 
c⁄f
.
£rvoC⁄f
[
i
].
mö
 = 
smö
[i];

193 
c⁄f
.
£rvoC⁄f
[
i
].
max
 = 
smax
[i];

194 
c⁄f
.
£rvoC⁄f
[
i
].
middÀ
 = 
smid
[i];

196 
c⁄f
.
£rvoC⁄f
[
i
].
mö
 = 1020;

197 
c⁄f
.
£rvoC⁄f
[
i
].
max
 = 2000;

198 
c⁄f
.
£rvoC⁄f
[
i
].
middÀ
 = 1500;

200 
c⁄f
.
£rvoC⁄f
[
i
].
øã
 = 
§
[i];

210 #ifde‡
FIXEDWING


211 
c⁄f
.
dynThrPID
 = 50;

212 
c⁄f
.
rcExpo8
 = 0;

214 
	`upd©e_c⁄°™ts
();

215 
	}
}

217 #ifde‡
LOG_PERMANENT


218 
	$ªadPLog
() {

219 
	`ì¥om_ªad_block
((*)&
∂og
, (*)(
E2END
 - 4 - (plog)), (plog));

220 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
∂og
, ’log)Ë!∂og.
checksum
) {

221 
	`blökLED
(9,100,3);

222 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

224 
∂og
.
¨m
 =Ölog.
dißrm
 =Ölog.
°¨t
 =Ölog.
Áûß„
 =Ölog.
i2c
 = 0;

225 
∂og
.
ru¬ög
 = 1;

226 
∂og
.
li„time
 =Ölog.
¨med_time
 = 0;

227 
	`wrôePLog
();

229 
	}
}

230 
	$wrôePLog
() {

231 
∂og
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&plog, (plog));

232 
	`ì¥om_wrôe_block
((c⁄° *)&
∂og
, (*)(
E2END
 - 4 - (plog)), (plog));

233 
	}
}

236 #i‡
GPS


239 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


240 
	#PROFILES
 3

	)

242 
	#PROFILES
 1

	)

244 #ifde‡
LOG_PERMANENT


245 
	#PLOG_SIZE
 (
∂og
)

	)

247 
	#PLOG_SIZE
 0

	)

252 
	$wrôeGPSc⁄f
() {

253 
GPS_c⁄f
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&GPS_conf, (GPS_conf));

254 
	`ì¥om_wrôe_block
–(*)&
GPS_c⁄f
, (*Ë(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
)), (GPS_conf) );

255 
	}
}

258 
boﬁ
 
	$ªˇŒGPSc⁄f
() {

259 
	`ì¥om_ªad_block
((*)&
GPS_c⁄f
, (*)(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
)), (GPS_conf));

260 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
GPS_c⁄f
, (GPS_c⁄f)Ë!GPS_c⁄f.
checksum
) {

261 
	`lﬂdGPSdeÁu…s
();

262  
Ál£
;

264  
åue
;

265 
	}
}

268 
	$lﬂdGPSdeÁu…s
() {

270 
uöt8_t
 *
±r
 = (uöt8_à*Ë&
GPS_c⁄f
;

271 
i
=0;i<(
GPS_c⁄f
);i++Ë*
±r
++ = 0;

273 #i‡
	`deföed
(
GPS_FILTERING
)

274 
GPS_c⁄f
.
fûãrög
 = 1;

276 #i‡
	`deföed
 (
GPS_LEAD_FILTER
)

277 
GPS_c⁄f
.
Àad_fûãr
 = 1;

279 #i‡
	`deföed
 (
DONT_RESET_HOME_AT_ARM
)

280 
GPS_c⁄f
.
d⁄t_ª£t_home_©_¨m
 = 1;

282 
GPS_c⁄f
.
«v_c⁄åﬁs_hódög
 = 
NAV_CONTROLS_HEADING
;

283 
GPS_c⁄f
.
«v_èû_fú°
 = 
NAV_TAIL_FIRST
;

284 
GPS_c⁄f
.
«v_πh_èkeoff_hódög
 = 
NAV_SET_TAKEOFF_HEADING
;

285 
GPS_c⁄f
.
¶ow_«v
 = 
NAV_SLOW_NAV
;

286 
GPS_c⁄f
.
waô_f‹_πh_Æt
 = 
WAIT_FOR_RTH_ALT
;

288 
GPS_c⁄f
.
ign‹e_thrŸée
 = 
IGNORE_THROTTLE
;

289 
GPS_c⁄f
.
èkeovî_b¨o
 = 
NAV_TAKEOVER_BARO
;

291 
GPS_c⁄f
.
wp_ødius
 = 
GPS_WP_RADIUS
;

292 
GPS_c⁄f
.
ß„_wp_di°™˚
 = 
SAFE_WP_DISTANCE
;

293 
GPS_c⁄f
.
«v_max_Ætôude
 = 
MAX_NAV_ALTITUDE
;

294 
GPS_c⁄f
.
«v_•ìd_max
 = 
NAV_SPEED_MAX
;

295 
GPS_c⁄f
.
«v_•ìd_mö
 = 
NAV_SPEED_MIN
;

296 
GPS_c⁄f
.
¸os°øck_gaö
 = 
CROSSTRACK_GAIN
 * 100;

297 
GPS_c⁄f
.
«v_b™k_max
 = 
NAV_BANK_MAX
;

298 
GPS_c⁄f
.
πh_Ætôude
 = 
RTH_ALTITUDE
;

299 
GPS_c⁄f
.
„n˚
 = 
FENCE_DISTANCE
;

300 
GPS_c⁄f
.
œnd_•ìd
 = 
LAND_SPEED
;

301 
GPS_c⁄f
.
max_wp_numbî
 = 
	`gëMaxWPNumbî
();

302 
	`wrôeGPSc⁄f
();

303 
	}
}

307 
	$°‹eWP
() {

308 i‡(
missi⁄_°ï
.
numbî
 >254) ;

309 
missi⁄_°ï
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&mission_step, (mission_step));

310 
	`ì¥om_wrôe_block
((*)&
missi⁄_°ï
, (*)(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
Ë+ (
GPS_c⁄f
Ë+((missi⁄_°ï)*missi⁄_°ï.
numbî
)),(mission_step));

311 
	}
}

315 
boﬁ
 
	$ªˇŒWP
(
uöt8_t
 
wp_numbî
) {

316 i‡(
wp_numbî
 > 254Ë 
Ál£
;

317 
	`ì¥om_ªad_block
((*)&
missi⁄_°ï
, (*)(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
)+(
GPS_c⁄f
)+((missi⁄_°ï)*
wp_numbî
)), (mission_step));

318 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
missi⁄_°ï
, (missi⁄_°ï)Ë!missi⁄_°ï.
checksum
Ë 
Ál£
;

319  
åue
;

320 
	}
}

323 
uöt8_t
 
	$gëMaxWPNumbî
() {

324 
uöt16_t
 
fú°_avaû
 = 
PROFILES
*(
c⁄f
Ë+ (
globÆ_c⁄f
)+(
GPS_c⁄f
)+ 1;

325 
uöt16_t
 
œ°_avaû
 = 
E2END
 - 
PLOG_SIZE
 - 4;

326 
uöt16_t
 
wp_num
 = (
œ°_avaû
-
fú°_avaû
)/(
missi⁄_°ï
);

327 i‡(
wp_num
>254) wp_num = 254;

328  
wp_num
;

329 
	}
}

	@EEPROM.h

1 #i‚de‡
EEPROM_H_


2 
	#EEPROM_H_


	)

4 
ªadGlobÆSë
();

5 
boﬁ
 
ªadEEPROM
();

6 
upd©e_c⁄°™ts
();

7 
wrôeGlobÆSë
(
uöt8_t
 
b
);

8 
wrôeP¨ams
(
uöt8_t
 
b
);

9 
LﬂdDeÁu…s
();

10 
ªadPLog
();

11 
wrôePLog
();

13 #i‡
deföed
(
GPS
)

16 
°‹eWP
();

17 
boﬁ
 
ªˇŒWP
(
uöt8_t
);

19 
uöt8_t
 
gëMaxWPNumbî
();

21 
lﬂdGPSdeÁu…s
();

22 
wrôeGPSc⁄f
() ;

23 
boﬁ
 
ªˇŒGPSc⁄f
();

	@GPS.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"GPS.h
"

6 
	~"Sîül.h
"

7 
	~"Sís‹s.h
"

8 
	~"Mu…iWii.h
"

9 
	~"EEPROM.h
"

10 
	~<m©h.h
>

12 #i‡
GPS


16 
GPS_bórög
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
, i¡32_t* 
bórög
);

17 
GPS_di°™˚_cm
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
,
uöt32_t
* 
di°
);

18 
GPS_ˇlc_vñocôy
();

19 
GPS_ˇlc_loˇti⁄_îr‹
–
öt32_t
* 
èrgë_œt
, i¡32_t* 
èrgë_ g
, i¡32_t* 
gps_œt
, i¡32_t* 
gps_ g
 );

20 
GPS_ˇlc_poshﬁd
();

21 
uöt16_t
 
GPS_ˇlc_desúed_•ìd
(uöt16_à
max_•ìd
, 
boﬁ
 
_¶ow
);

22 
GPS_ˇlc_«v_øã
(
uöt16_t
 
max_•ìd
);

23 
öt32_t
 
wøp_18000
(öt32_à
™g
);

24 
boﬁ
 
check_mis£d_wp
();

25 
GPS_ˇlc_l⁄gôude_sˇlög
(
öt32_t
 
œt
);

26 
GPS_upd©e_¸os°øck
();

27 
öt32_t
 
wøp_36000
(öt32_à
™g
);

33 #i‡
deföed
(
UBLOX
Ë|| deföed (
MTK_BINARY19
)

34 
	#GPS_LAG
 0.5f

35 #ñ£

	)

36 
	#GPS_LAG
 1.0f

38 

	)

39 
öt32_t
 
	gGPS_co‹d_Àad
[2];

41 ˛as†
	cLódFûãr
 {

42 
	mpublic
:

43 
	$LódFûãr
() :

44 
	$_œ°_vñocôy
(0) {

48 
öt32_t
 
	`gë_posôi⁄
(öt32_à
pos
, 
öt16_t
 
vñ
, 
œg_ö_£c⁄ds
 = 1.0);

49 
	$˛ór
(Ë{ 
_œ°_vñocôy
 = 0; 
	}
}

51 
	g¥iv©e
:

52 
öt16_t
 
_œ°_vñocôy
;

56 
öt32_t
 
	gLódFûãr
::
	$gë_posôi⁄
(
öt32_t
 
pos
, 
öt16_t
 
vñ
, 
œg_ö_£c⁄ds
)

58 
öt16_t
 
ac˚l_c⁄åibuti⁄
 = (
vñ
 - 
_œ°_vñocôy
Ë* 
œg_ö_£c⁄ds
 *Üag_in_seconds;

59 
öt16_t
 
vñ_c⁄åibuti⁄
 = 
vñ
 * 
œg_ö_£c⁄ds
;

62 
_œ°_vñocôy
 = 
vñ
;

64  
pos
 + 
vñ_c⁄åibuti⁄
 + 
ac˚l_c⁄åibuti⁄
;

65 
	}
}

68 
LódFûãr
 
	gxLódFûãr
;

69 
LódFûãr
 
	gyLódFûãr
;

71 
	sPID_PARAM_
 {

72 
	mkP
;

73 
	mkI
;

74 
	mkD
;

75 
	mImax
;

76 } 
	tPID_PARAM
;

78 
PID_PARAM
 
	gposhﬁdPID_PARAM
;

79 
PID_PARAM
 
	gposhﬁd_øãPID_PARAM
;

80 
PID_PARAM
 
	g«vPID_PARAM
;

82 
	sPID_
 {

83 
	möãgøt‹
;

84 
öt32_t
 
	mœ°_öput
;

85 
	mœ°dîiv©ive
;

86 
	mouçut
;

87 
	mdîiv©ive
;

88 } 
	tPID
;

89 
PID
 
	gposhﬁdPID
[2];

90 
PID
 
	gposhﬁd_øãPID
[2];

91 
PID
 
	g«vPID
[2];

93 
öt32_t
 
	$gë_P
(
öt32_t
 
îr‹
, 
PID_PARAM_
* 
pid
) {

94  ()
îr‹
 * 
pid
->
kP
;

95 
	}
}

97 
öt32_t
 
	$gë_I
(
öt32_t
 
îr‹
, * 
dt
, 
PID_
* 
pid
, 
PID_PARAM_
* 
pid_∑øm
) {

98 
pid
->
öãgøt‹
 +(()
îr‹
 * 
pid_∑øm
->
kI
Ë* *
dt
;

99 
pid
->
öãgøt‹
 = 
	`c⁄°øö
’id->öãgøt‹,-
pid_∑øm
->
Imax
,pid_param->Imax);

100  
pid
->
öãgøt‹
;

101 
	}
}

103 
öt32_t
 
	$gë_D
(
öt32_t
 
öput
, * 
dt
, 
PID_
* 
pid
, 
PID_PARAM_
* 
pid_∑øm
) {

104 
pid
->
dîiv©ive
 = (
öput
 -Öid->
œ°_öput
Ë/ *
dt
;

107 
fûãr
 = 7.9577e-3;

117 
pid
->
dîiv©ive
 =Öid->
œ°dîiv©ive
 + (*
dt
 / ( 
fûãr
 + *dt)) * (pid->derivative -Öid->lastderivative);

119 
pid
->
œ°_öput
 = 
öput
;

120 
pid
->
œ°dîiv©ive
 =Öid->
dîiv©ive
;

122  
pid_∑øm
->
kD
 * 
pid
->
dîiv©ive
;

123 
	}
}

125 
	$ª£t_PID
(
PID_
* 
pid
) {

126 
pid
->
öãgøt‹
 = 0;

127 
pid
->
œ°_öput
 = 0;

128 
pid
->
œ°dîiv©ive
 = 0;

129 
	}
}

131 
	#_X
 1

	)

132 
	#_Y
 0

	)

134 
	#RADX100
 0.000174532925

	)

136 
uöt8_t
 
	gœnd_dëe˘
;

137 
uöt32_t
 
	gœnd_£âÀ_timî
;

138 
uöt8_t
 
	gGPS_Føme
;

140 
	gdT«v
;

141 
öt16_t
 
	ga˘uÆ_•ìd
[2] = {0,0};

142 
	gGPS_sˇÀL⁄Down
;

146 
öt16_t
 
	gøã_îr‹
[2];

147 
öt32_t
 
	gîr‹
[2];

149 
öt32_t
 
	gGPS_WP
[2];

150 
öt32_t
 
	gGPS_FROM
[2];

151 
öt32_t
 
	gèrgë_bórög
;

152 
öt32_t
 
	g‹igöÆ_èrgë_bórög
;

153 
öt16_t
 
	g¸os°øck_îr‹
;

154 
uöt32_t
 
	gwp_di°™˚
;

155 
uöt16_t
 
	gwaypoöt_•ìd_gov
;

162 
	#GPS_FILTER_VECTOR_LENGTH
 5

	)

164 
uöt8_t
 
	gGPS_fûãr_ödex
 = 0;

165 
öt32_t
 
	gGPS_fûãr
[2][
GPS_FILTER_VECTOR_LENGTH
];

166 
öt32_t
 
	gGPS_fûãr_sum
[2];

167 
öt32_t
 
	gGPS_ªad
[2];

168 
öt32_t
 
	gGPS_fûãªd
[2];

169 
öt32_t
 
	gGPS_degªe
[2];

170 
uöt16_t
 
	g‰a˘i⁄3
[2];

172 
öt16_t
 
	g«v_èkeoff_bórög
;

178 
uöt8_t
 
	$GPS_Compuã
() {

179 
axis
;

180 
uöt32_t
 
di°
;

181 
öt32_t
 
dú
;

182 
uöt32_t
 
«v_lo›Timî
;

185 i‡(
GPS_Føme
 == 0)  0; GPS_Frame = 0;

188 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5) {

189 #i‡!
	`deföed
(
DONT_RESET_HOME_AT_ARM
)

190 i‡(!
f
.
ARMED
Ë{f.
GPS_FIX_HOME
 = 0;}

192 i‡(!
f
.
GPS_FIX_HOME
 && f.
ARMED
) {

193 
	`GPS_ª£t_home_posôi⁄
();

196 i‡(
GPS_c⁄f
.
fûãrög
) {

197 
GPS_fûãr_ödex
 = (GPS_fûãr_ödex+1Ë% 
GPS_FILTER_VECTOR_LENGTH
;

198 
axis
 = 0;áxis< 2;áxis++) {

199 
GPS_ªad
[
axis
] = 
GPS_co‹d
[axis];

200 
GPS_degªe
[
axis
] = 
GPS_ªad
[axis] / 10000000;

204 
‰a˘i⁄3
[
axis
] = (
GPS_ªad
[axis]- 
GPS_degªe
[axis]*10000000) / 10000;

206 
GPS_fûãr_sum
[
axis
] -
GPS_fûãr
[axis][
GPS_fûãr_ödex
];

207 
GPS_fûãr
[
axis
][
GPS_fûãr_ödex
] = 
GPS_ªad
[axis] - (
GPS_degªe
[axis]*10000000);

208 
GPS_fûãr_sum
[
axis
] +
GPS_fûãr
[axis][
GPS_fûãr_ödex
];

209 
GPS_fûãªd
[
axis
] = 
GPS_fûãr_sum
[axis] / 
GPS_FILTER_VECTOR_LENGTH
 + (
GPS_degªe
[axis]*10000000);

210 i‡–
NAV_°©e
 =
NAV_STATE_HOLD_INFINIT
 || NAV_°©ê=
NAV_STATE_HOLD_TIMED
) {

211 i‡–
‰a˘i⁄3
[
axis
]>1 && fø˘i⁄3[axis]<999 ) 
GPS_co‹d
[axis] = 
GPS_fûãªd
[axis];

218 
dT«v
 = ()(
	`mûlis
(Ë- 
«v_lo›Timî
)/ 1000.0;

219 
«v_lo›Timî
 = 
	`mûlis
();

222 
dT«v
 = 
	`mö
(dTnav, 1.0);

225 
	`GPS_bórög
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_home
[LAT],&GPS_home[LON],&
dú
);

226 
	`GPS_di°™˚_cm
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_home
[LAT],&GPS_home[LON],&
di°
);

227 
GPS_di°™˚ToHome
 = 
di°
/100;

228 
GPS_dúe˘i⁄ToHome
 = 
dú
/100;

230 i‡(!
f
.
GPS_FIX_HOME
) {

231 
GPS_di°™˚ToHome
 = 0;

232 
GPS_dúe˘i⁄ToHome
 = 0;

237 i‡((
GPS_c⁄f
.
„n˚
 > 0Ë&& (GPS_c⁄f.„n˚ < 
GPS_di°™˚ToHome
Ë&& (
f
.
GPS_mode
 !
GPS_MODE_RTH
) ) {

238 
	`öô_RTH
();

242 
	`GPS_ˇlc_vñocôy
();

245 i‡(
f
.
GPS_mode
 !
GPS_MODE_NONE
) {

247 
	`GPS_bórög
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
èrgë_bórög
);

248 i‡(
GPS_c⁄f
.
Àad_fûãr
) {

249 
	`GPS_di°™˚_cm
(&
GPS_co‹d_Àad
[
LAT
],&GPS_co‹d_Àad[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
wp_di°™˚
);

250 
	`GPS_ˇlc_loˇti⁄_îr‹
(&
GPS_WP
[
LAT
],&GPS_WP[
LON
],&
GPS_co‹d_Àad
[LAT],&GPS_coord_lead[LON]);

252 
	`GPS_di°™˚_cm
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
wp_di°™˚
);

253 
	`GPS_ˇlc_loˇti⁄_îr‹
(&
GPS_WP
[
LAT
],&GPS_WP[
LON
],&
GPS_co‹d
[LAT],&GPS_coord[LON]);

258 i‡–!((
NAV_°©e
 =
NAV_STATE_HOLD_INFINIT
Ë&& (
Æt_ch™ge_Êag
 =
REACHED_ALT
))) {

259 i‡(!
f
.
LAND_IN_PROGRESS
) {

260 
Æt_to_hﬁd
 = 
	`gë_√w_Ætôude
();

261 
A…Hﬁd
 = 
Æt_to_hﬁd
;

265 
öt16_t
 
•ìd
 = 0;

267 
NAV_°©e
)

269 
NAV_STATE_NONE
:

272 
NAV_STATE_LAND_START
:

273 
	`GPS_ˇlc_poshﬁd
();

274 
œnd_£âÀ_timî
 = 
	`mûlis
();

275 
NAV_°©e
 = 
NAV_STATE_LAND_SETTLE
;

278 
NAV_STATE_LAND_SETTLE
:

279 
	`GPS_ˇlc_poshﬁd
();

280 i‡(
	`mûlis
()-
œnd_£âÀ_timî
 > 5000)

281 
NAV_°©e
 = 
NAV_STATE_LAND_START_DESCENT
;

284 
NAV_STATE_LAND_START_DESCENT
:

285 
	`GPS_ˇlc_poshﬁd
();

286 
f
.
THROTTLE_IGNORED
 = 1;

287 
f
.
GPS_BARO_MODE
 = 1;

288 
œnd_dëe˘
 = 0;

289 
f
.
LAND_COMPLETED
 = 0;

290 
f
.
LAND_IN_PROGRESS
 = 1;

291 
NAV_°©e
 = 
NAV_STATE_LAND_IN_PROGRESS
;

294 
NAV_STATE_LAND_IN_PROGRESS
:

295 
	`GPS_ˇlc_poshﬁd
();

296 
	`check_œnd
();

297 i‡(
f
.
LAND_COMPLETED
) {

298 
«v_timî_°›
 = 
	`mûlis
() + 5000;

299 
NAV_°©e
 = 
NAV_STATE_LANDED
;

303 
NAV_STATE_LANDED
:

305 i‡(
rcD©a
[
THROTTLE
]<
MINCHECK
 || 
«v_timî_°›
 <
	`mûlis
()) {

306 
	`go_dißrm
();

307 
f
.
OK_TO_ARM
 = 0;

308 
NAV_°©e
 = 
NAV_STATE_NONE
;

309 
f
.
GPS_BARO_MODE
 = 0;

310 
f
.
LAND_COMPLETED
 = 0;

311 
f
.
LAND_IN_PROGRESS
 = 0;

312 
œnd_dëe˘
 = 0;

313 
f
.
THROTTLE_IGNORED
 = 0;

314 
	`GPS_ª£t_«v
();

318 
NAV_STATE_HOLD_INFINIT
:

319 
	`GPS_ˇlc_poshﬁd
();

322 
NAV_STATE_HOLD_TIMED
:

323 i‡(
«v_timî_°›
 == 0) {

324 
«v_timî_°›
 = 
	`mûlis
(Ë+ 1000*
«v_hﬁd_time
;

325 } i‡(
«v_timî_°›
 <
	`mûlis
()) {

326 i‡(
missi⁄_°ï
.
Êag
 !
MISSION_FLAG_END
) {

327 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

329 
NAV_îr‹
 = 
NAV_ERROR_TIMEWAIT
;

331 
	`GPS_ˇlc_poshﬁd
();

334 
NAV_STATE_RTH_START
:

335 i‡((
Æt_ch™ge_Êag
 =
REACHED_ALT
Ë|| (!
GPS_c⁄f
.
waô_f‹_πh_Æt
)) {

336 
	`GPS_£t_√xt_wp
(&
GPS_home
[
LAT
],&GPS_home[
LON
], &
GPS_co‹d
[LAT], &GPS_coord[LON]);

337 
NAV_°©e
 = 
NAV_STATE_RTH_ENROUTE
;

338 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

340 
	`GPS_ˇlc_poshﬁd
();

341 
NAV_îr‹
 = 
NAV_ERROR_WAIT_FOR_RTH_ALT
;

345 
NAV_STATE_RTH_ENROUTE
:

346 
•ìd
 = 
	`GPS_ˇlc_desúed_•ìd
(
GPS_c⁄f
.
«v_•ìd_max
, GPS_c⁄f.
¶ow_«v
);

347 
	`GPS_ˇlc_«v_øã
(
•ìd
);

348 
	`GPS_adju°_hódög
();

349 i‡((
wp_di°™˚
 <
GPS_c⁄f
.
wp_ødius
Ë|| 
	`check_mis£d_wp
()) {

350 i‡(
missi⁄_°ï
.
∑ømëî1
 =0Ë
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

351 
NAV_°©e
 = 
NAV_STATE_LAND_START
;

352 i‡(
GPS_c⁄f
.
«v_πh_èkeoff_hódög
Ë{ 
magHﬁd
 = 
«v_èkeoff_bórög
; }

356 
NAV_STATE_WP_ENROUTE
:

357 
•ìd
 = 
	`GPS_ˇlc_desúed_•ìd
(
GPS_c⁄f
.
«v_•ìd_max
, GPS_c⁄f.
¶ow_«v
);

358 
	`GPS_ˇlc_«v_øã
(
•ìd
);

359 
	`GPS_adju°_hódög
();

361 i‡((
wp_di°™˚
 <
GPS_c⁄f
.
wp_ødius
Ë|| 
	`check_mis£d_wp
()) {

362 i‡(
missi⁄_°ï
.
a˘i⁄
 =
MISSION_LAND
) {

363 
NAV_°©e
 = 
NAV_STATE_LAND_START
;

364 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

365 } i‡(
missi⁄_°ï
.
Êag
 =
MISSION_FLAG_END
) {

366 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

367 
NAV_îr‹
 = 
NAV_ERROR_FINISH
;

368 } i‡(
missi⁄_°ï
.
a˘i⁄
 =
MISSION_HOLD_UNLIM
) {

369 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

370 
NAV_îr‹
 = 
NAV_ERROR_FINISH
;

371 } i‡(
missi⁄_°ï
.
a˘i⁄
 =
MISSION_HOLD_TIME
) {

372 
«v_hﬁd_time
 = 
missi⁄_°ï
.
∑ømëî1
;

373 
«v_timî_°›
 = 0;

374 
NAV_°©e
 = 
NAV_STATE_HOLD_TIMED
;

376 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

381 
NAV_STATE_DO_JUMP
:

382 i‡(
jump_times
 < 0) {

383 
√xt_°ï
 = 
missi⁄_°ï
.
∑ømëî1
;

384 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

386 i‡(
jump_times
 == 0) {

387 
jump_times
 = -10;

388 i‡(
missi⁄_°ï
.
Êag
 =
MISSION_FLAG_END
) {

389 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

390 
NAV_îr‹
 = 
NAV_ERROR_FINISH
;

392 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

395 i‡(
jump_times
 > 0) {

396 
√xt_°ï
 = 
missi⁄_°ï
.
∑ømëî1
;

397 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

398 
jump_times
--;

402 
NAV_STATE_PROCESS_NEXT
:

403 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

404 i‡(!
	`ªˇŒWP
(
√xt_°ï
)) {

405 
	`ab‹t_missi⁄
(
NAV_ERROR_WP_CRC
);

407 
missi⁄_°ï
.
a˘i⁄
)

410 
MISSION_WAYPOINT
:

411 
MISSION_HOLD_TIME
:

412 
MISSION_HOLD_UNLIM
:

413 
MISSION_LAND
:

414 
	`£t_√w_Ætôude
(
missi⁄_°ï
.
Ætôude
);

415 
	`GPS_£t_√xt_wp
(&
missi⁄_°ï
.
pos
[
LAT
], &missi⁄_°ï.pos[
LON
], &
GPS_¥ev
[LAT], &GPS_prev[LON]);

416 i‡((
wp_di°™˚
/100Ë>
GPS_c⁄f
.
ß„_wp_di°™˚
Ë
	`ab‹t_missi⁄
(
NAV_ERROR_TOOFAR
);

417 
NAV_°©e
 = 
NAV_STATE_WP_ENROUTE
;

418 
GPS_¥ev
[
LAT
] = 
missi⁄_°ï
.
pos
[LAT];

419 
GPS_¥ev
[
LON
] = 
missi⁄_°ï
.
pos
[LON];

421 
MISSION_RTH
:

422 
f
.
GPS_hód_£t
 = 0;

423 i‡(
GPS_c⁄f
.
πh_Ætôude
 =0 && 
missi⁄_°ï
.
Ætôude
 == 0)

424 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

426 
uöt32_t
 
πh_Æt
;

427 i‡(
missi⁄_°ï
.
Ætôude
 =0Ë
πh_Æt
 = 
GPS_c⁄f
.
πh_Ætôude
 * 100;

428 
πh_Æt
 = 
missi⁄_°ï
.
Ætôude
;

430 i‡(
Æt
.
E°A…
 < 
πh_Æt
Ë
	`£t_√w_Ætôude
(rth_alt);

431 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

433 
NAV_°©e
 = 
NAV_STATE_RTH_START
;

435 
MISSION_JUMP
:

436 i‡(
jump_times
 =-10Ëjump_time†
missi⁄_°ï
.
∑ømëî2
;

437 i‡(
missi⁄_°ï
.
∑ømëî1
 > 0 && missi⁄_°ï.∑ømëî1 < missi⁄_°ï.
numbî
)

438 
NAV_°©e
 = 
NAV_STATE_DO_JUMP
;

440 
	`ab‹t_missi⁄
(
NAV_ERROR_INVALID_JUMP
);

442 
MISSION_SET_HEADING
:

443 
GPS_poi
[
LAT
] = 0; GPS_poi[
LON
] = 0;

444 i‡(
missi⁄_°ï
.
∑ømëî1
 < 0Ë
f
.
GPS_hód_£t
 = 0;

446 
f
.
GPS_hód_£t
 = 1;

447 
GPS_dúe˘i⁄ToPoi
 = 
missi⁄_°ï
.
∑ømëî1
;

450 
MISSION_SET_POI
:

451 
GPS_poi
[
LAT
] = 
missi⁄_°ï
.
pos
[LAT];

452 
GPS_poi
[
LON
] = 
missi⁄_°ï
.
pos
[LON];

453 
f
.
GPS_hód_£t
 = 1;

456 
	`ab‹t_missi⁄
(
NAV_ERROR_INVALID_DATA
);

459 
√xt_°ï
++;

466 
	}
}

469 
	$ab‹t_missi⁄
(
îr‹_code
) {

470 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], &GPS_coord[LON]);

471 
NAV_îr‹
 = 
îr‹_code
;

472 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

473 
	}
}

476 
	$GPS_adju°_hódög
() {

479 i‡(
f
.
GPS_hód_£t
) {

480 i‡(
GPS_poi
[
LAT
] == 0)

481 
magHﬁd
 = 
	`wøp_18000
((
GPS_dúe˘i⁄ToPoi
*100))/100;

483 
	`GPS_bórög
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_poi
[LAT],&GPS_poi[LON],&
GPS_dúe˘i⁄ToPoi
);

484 
	`GPS_di°™˚_cm
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_poi
[LAT],&GPS_poi[LON],&
wp_di°™˚
);

485 
magHﬁd
 = 
GPS_dúe˘i⁄ToPoi
 /100;

488 i‡(
GPS_c⁄f
.
«v_c⁄åﬁs_hódög
) {

489 i‡(
GPS_c⁄f
.
«v_èû_fú°
) {

490 
magHﬁd
 = 
	`wøp_18000
(
èrgë_bórög
-18000)/100;

492 
magHﬁd
 = 
	`wøp_18000
(
èrgë_bórög
)/100;

496 
	}
}

498 
	#LAND_DETECT_THRESHOLD
 40

499 
	#BAROPIDMIN
 -180

500 

	)

502 
	$check_œnd
() {

504 i‡–(
	`abs
(
Æt
.
v¨io
Ë< 20Ë&& (
B¨oPID
 < 
BAROPIDMIN
)) {

505 i‡(!
f
.
LAND_COMPLETED
) {

506 if–
œnd_dëe˘
 < 
LAND_DETECT_THRESHOLD
) {

507 
œnd_dëe˘
++;

509 
f
.
LAND_COMPLETED
 = 1;

510 
œnd_dëe˘
 = 0;

515 
œnd_dëe˘
 = 0;

516 if(
f
.
LAND_COMPLETED
) {

517 
f
.
LAND_COMPLETED
 = 0;

520 
	}
}

522 
öt32_t
 
	$gë_Ætôude_îr‹
() {

523  
Æt_to_hﬁd
 - 
Æt
.
E°A…
;

524 
	}
}

526 
	$˛ór_√w_Ætôude
() {

527 
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

528 
	}
}

530 
	$f‹˚_√w_Ætôude
(
öt32_t
 
_√w_Æt
) {

531 
Æt_to_hﬁd
 = 
_√w_Æt
;

532 
èrgë_Ætôude
 = 
_√w_Æt
;

533 
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

534 
	}
}

536 
	$£t_√w_Ætôude
(
öt32_t
 
_√w_Æt
) {

538 if(
_√w_Æt
 > 
GPS_c⁄f
.
«v_max_Ætôude
*100) _new_alt = GPS_conf.nav_max_altitude * 100;

539 if(
_√w_Æt
 =
Æt
.
E°A…
){

540 
	`f‹˚_√w_Ætôude
(
_√w_Æt
);

544 
Æt_to_hﬁd
 = 
Æt
.
E°A…
;

546 
Æt_ch™ge_timî
 = 
	`mûlis
();

548 
èrgë_Ætôude
 = 
_√w_Æt
;

550 
Æt_ch™ge
 = 0;

552 
‹igöÆ_Ætôude
 = 
Æt
.
E°A…
;

554 if(
èrgë_Ætôude
 > 
‹igöÆ_Ætôude
){

556 
Æt_ch™ge_Êag
 = 
ASCENDING
;

557 } if(
èrgë_Ætôude
 < 
‹igöÆ_Ætôude
){

559 
Æt_ch™ge_Êag
 = 
DESCENDING
;

562 
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

564 
	}
}

566 
öt32_t
 
	$gë_√w_Ætôude
() {

568 if(
Æt_ch™ge_Êag
 =
ASCENDING
) {

570 if(
Æt
.
E°A…
 >
èrgë_Ætôude
Ë
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

572 if(
Æt_to_hﬁd
 >
èrgë_Ætôude
) Åarget_altitude;

573 } i‡(
Æt_ch™ge_Êag
 =
DESCENDING
) {

575 if(
Æt
.
E°A…
 <
èrgë_Ætôude
Ë
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

577 if(
Æt_to_hﬁd
 <
èrgë_Ætôude
) Åarget_altitude;

580 if(
Æt_ch™ge_Êag
 =
REACHED_ALT
Ë 
èrgë_Ætôude
;

582 
öt32_t
 
diff
 = 
	`abs
(
Æt_to_hﬁd
 - 
èrgë_Ætôude
);

585 
öt8_t
 
_sˇÀ
 = 4;

587 i‡(
Æt_to_hﬁd
 < 
èrgë_Ætôude
) {

589 if(
diff
 < 200Ë
_sˇÀ
 = 4;

590 
_sˇÀ
 = 3;

593 if(
diff
 < 400Ë
_sˇÀ
 = 5;

594 if(
diff
 < 100Ë
_sˇÀ
 = 6;

600 
öt32_t
 
ch™ge
 = (
	`mûlis
(Ë- 
Æt_ch™ge_timî
Ë>> 
_sˇÀ
;

602 if(
Æt_ch™ge_Êag
 =
ASCENDING
){

603 
Æt_ch™ge
 +
ch™ge
;

605 
Æt_ch™ge
 -
ch™ge
;

608 
Æt_ch™ge_timî
 = 
	`mûlis
();

610  
‹igöÆ_Ætôude
 + 
Æt_ch™ge
;

611 
	}
}

620 
öt16_t
 
	$c⁄°øö_öt16
(
öt16_t
 
amt
, i¡16_à
low
, i¡16_à
high
) {

621  ((
amt
)<(
low
)?÷ow):(◊mt)>(
high
)?(high):(amt)));

622 
	}
}

627 
	$GPS_ˇlc_l⁄gôude_sˇlög
(
öt32_t
 
œt
) {

628 
GPS_sˇÀL⁄Down
 = 
	`cos
(
œt
 * 1.0e-7f * 0.01745329251f);

629 
	}
}

634 
	$GPS_£t_√xt_wp
(
öt32_t
* 
œt_to
, i¡32_t* 
l⁄_to
, i¡32_t* 
œt_‰om
, i¡32_t* 
l⁄_‰om
) {

635 
GPS_WP
[
LAT
] = *
œt_to
;

636 
GPS_WP
[
LON
] = *
l⁄_to
;

638 
GPS_FROM
[
LAT
] = *
œt_‰om
;

639 
GPS_FROM
[
LON
] = *
l⁄_‰om
;

641 
	`GPS_ˇlc_l⁄gôude_sˇlög
(*
œt_to
);

643 
	`GPS_bórög
(&
GPS_FROM
[
LAT
],&GPS_FROM[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
èrgë_bórög
);

644 
	`GPS_di°™˚_cm
(&
GPS_FROM
[
LAT
],&GPS_FROM[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
wp_di°™˚
);

645 
	`GPS_ˇlc_loˇti⁄_îr‹
(&
GPS_WP
[
LAT
],&GPS_WP[
LON
],&
GPS_FROM
[LAT],&GPS_FROM[LON]);

646 
waypoöt_•ìd_gov
 = 
GPS_c⁄f
.
«v_•ìd_mö
;

647 
‹igöÆ_èrgë_bórög
 = 
èrgë_bórög
;

649 
	}
}

654 
boﬁ
 
	$check_mis£d_wp
() {

655 
öt32_t
 
ãmp
;

656 
ãmp
 = 
èrgë_bórög
 - 
‹igöÆ_èrgë_bórög
;

657 
ãmp
 = 
	`wøp_18000
(temp);

658  (
	`abs
(
ãmp
) > 10000);

659 
	}
}

665 
	$GPS_bórög
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
, i¡32_t* 
bórög
) {

666 
öt32_t
 
off_x
 = *
l⁄2
 - *
l⁄1
;

667 
öt32_t
 
off_y
 = (*
œt2
 - *
œt1
Ë/ 
GPS_sˇÀL⁄Down
;

669 *
bórög
 = 9000 + 
	`©™2
(-
off_y
, 
off_x
) * 5729.57795f;

670 i‡(*
bórög
 < 0) *bearing += 36000;

671 
	}
}

673 
	$GPS_di°™˚_cm
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
,
uöt32_t
* 
di°
) {

674 
dL©
 = ()(*
œt2
 - *
œt1
);

675 
dL⁄
 = ()(*
l⁄2
 - *
l⁄1
Ë* 
GPS_sˇÀL⁄Down
;

676 *
di°
 = 
	`sqπ
(
	`sq
(
dL©
Ë+ sq(
dL⁄
)) * 1.11318845f;

677 
	}
}

689 
	$GPS_ˇlc_vñocôy
(){

690 
öt16_t
 
•ìd_ﬁd
[2] = {0,0};

691 
öt32_t
 
œ°
[2] = {0,0};

692 
uöt8_t
 
öô
 = 0;

694 i‡(
öô
) {

695 
tmp
 = 1.0/
dT«v
;

696 
a˘uÆ_•ìd
[
_X
] = ()(
GPS_co‹d
[
LON
] - 
œ°
[LON]Ë* 
GPS_sˇÀL⁄Down
 * 
tmp
;

697 
a˘uÆ_•ìd
[
_Y
] = ()(
GPS_co‹d
[
LAT
] - 
œ°
[LAT]Ë* 
tmp
;

700 i‡(!
GPS_c⁄f
.
Àad_fûãr
) {

701 
a˘uÆ_•ìd
[
_X
] = (a˘uÆ_•ìd[_X] + 
•ìd_ﬁd
[_X]) / 2;

702 
a˘uÆ_•ìd
[
_Y
] = (a˘uÆ_•ìd[_Y] + 
•ìd_ﬁd
[_Y]) / 2;

704 
•ìd_ﬁd
[
_X
] = 
a˘uÆ_•ìd
[_X];

705 
•ìd_ﬁd
[
_Y
] = 
a˘uÆ_•ìd
[_Y];

708 
öô
=1;

710 
œ°
[
LON
] = 
GPS_co‹d
[LON];

711 
œ°
[
LAT
] = 
GPS_co‹d
[LAT];

713 i‡(
GPS_c⁄f
.
Àad_fûãr
) {

714 
GPS_co‹d_Àad
[
LON
] = 
xLódFûãr
.
	`gë_posôi⁄
(
GPS_co‹d
[LON], 
a˘uÆ_•ìd
[
_X
], 
GPS_LAG
);

715 
GPS_co‹d_Àad
[
LAT
] = 
yLódFûãr
.
	`gë_posôi⁄
(
GPS_co‹d
[LAT], 
a˘uÆ_•ìd
[
_Y
], 
GPS_LAG
);

717 
	}
}

728 
	$GPS_ˇlc_loˇti⁄_îr‹
–
öt32_t
* 
èrgë_œt
, i¡32_t* 
èrgë_ g
, i¡32_t* 
gps_œt
, i¡32_t* 
gps_ g
 ) {

729 
îr‹
[
LON
] = ()(*
èrgë_ g
 - *
gps_ g
Ë* 
GPS_sˇÀL⁄Down
;

730 
îr‹
[
LAT
] = *
èrgë_œt
 - *
gps_œt
;

731 
	}
}

737 
	$GPS_ˇlc_poshﬁd
() {

738 
öt32_t
 
d
;

739 
öt32_t
 
èrgë_•ìd
;

740 
uöt8_t
 
axis
;

742 
axis
=0;axis<2;axis++) {

743 
èrgë_•ìd
 = 
	`gë_P
(
îr‹
[
axis
], &
poshﬁdPID_PARAM
);

744 
èrgë_•ìd
 = 
	`c⁄°øö
(target_speed,-100,100);

745 
øã_îr‹
[
axis
] = 
èrgë_•ìd
 - 
a˘uÆ_•ìd
[axis];

747 
«v
[
axis
] =

748 
	`gë_P
(
øã_îr‹
[
axis
], &
poshﬁd_øãPID_PARAM
)

749 +
	`gë_I
(
øã_îr‹
[
axis
] + 
îr‹
[axis], &
dT«v
, &
poshﬁd_øãPID
[axis], &
poshﬁd_øãPID_PARAM
);

751 
d
 = 
	`gë_D
(
îr‹
[
axis
], &
dT«v
, &
poshﬁd_øãPID
[axis], &
poshﬁd_øãPID_PARAM
);

753 
d
 = 
	`c⁄°øö
(d, -2000, 2000);

756 if(
	`abs
(
a˘uÆ_•ìd
[
axis
]Ë< 50Ë
d
 = 0;

758 
«v
[
axis
] +=
d
;

760 
«v
[
axis
] = 
	`c⁄°øö_öt16
“av[axis], -
GPS_c⁄f
.
«v_b™k_max
, GPS_conf.nav_bank_max);

761 
«vPID
[
axis
].
öãgøt‹
 = 
poshﬁd_øãPID
[axis].integrator;

763 
	}
}

768 
	$GPS_ˇlc_«v_øã
–
uöt16_t
 
max_•ìd
) {

769 
åig
[2];

770 
öt32_t
 
èrgë_•ìd
[2];

771 
öt32_t
 
tût
;

772 
uöt8_t
 
axis
;

774 
	`GPS_upd©e_¸os°øck
();

775 
öt16_t
 
¸oss_•ìd
 = 
¸os°øck_îr‹
 * (
GPS_c⁄f
.
¸os°øck_gaö
 / 100.0);

776 
¸oss_•ìd
 = 
	`c⁄°øö
(cross_speed,-200,200);

777 
¸oss_•ìd
 = -cross_speed;

779 
ãmp
 = (9000»- 
èrgë_bórög
Ë* 
RADX100
;

780 
åig
[
_X
] = 
	`cos
(
ãmp
);

781 
åig
[
_Y
] = 
	`sö
(
ãmp
);

783 
èrgë_•ìd
[
_X
] = 
max_•ìd
 * 
åig
[_X] - 
¸oss_•ìd
 *Årig[
_Y
];

784 
èrgë_•ìd
[
_Y
] = 
¸oss_•ìd
 * 
åig
[
_X
] + 
max_•ìd
 *Årig[_Y];

786 
axis
=0;axis<2;axis++) {

787 
øã_îr‹
[
axis
] = 
èrgë_•ìd
[axis] - 
a˘uÆ_•ìd
[axis];

788 
øã_îr‹
[
axis
] = 
	`c⁄°øö
(rate_error[axis],-1000,1000);

789 
«v
[
axis
] =

790 
	`gë_P
(
øã_îr‹
[
axis
], &
«vPID_PARAM
)

791 +
	`gë_I
(
øã_îr‹
[
axis
], &
dT«v
, &
«vPID
[axis], &
«vPID_PARAM
)

792 +
	`gë_D
(
øã_îr‹
[
axis
], &
dT«v
, &
«vPID
[axis], &
«vPID_PARAM
);

795 
«v
[
axis
] = 
	`c⁄°øö_öt16
“av[axis], -
GPS_c⁄f
.
«v_b™k_max
, GPS_conf.nav_bank_max);

796 
poshﬁd_øãPID
[
axis
].
öãgøt‹
 = 
«vPID
[axis].integrator;

798 
	}
}

800 
	$GPS_upd©e_¸os°øck
() {

804 
ãmp
 = (
èrgë_bórög
 - 
‹igöÆ_èrgë_bórög
Ë* 
RADX100
;

805 
¸os°øck_îr‹
 = 
	`sö
(
ãmp
Ë* 
wp_di°™˚
;

806 
	}
}

819 
uöt16_t
 
	$GPS_ˇlc_desúed_•ìd
(
uöt16_t
 
max_•ìd
, 
boﬁ
 
_¶ow
) {

820 if(
_¶ow
){

821 
max_•ìd
 = 
	`mö
(max_•ìd, 
wp_di°™˚
 / 2);

823 
max_•ìd
 = 
	`mö
(max_•ìd, 
wp_di°™˚
);

824 
max_•ìd
 = 
	`max
(max_•ìd, 
GPS_c⁄f
.
«v_•ìd_mö
);

828 if(
max_•ìd
 > 
waypoöt_•ìd_gov
){

829 
waypoöt_•ìd_gov
 +()(100.0 * 
dT«v
);

830 
max_•ìd
 = 
waypoöt_•ìd_gov
;

832  
max_•ìd
;

833 
	}
}

839 
öt32_t
 
	$wøp_36000
(
öt32_t
 
™g
) {

840 i‡(
™g
 > 36000)áng -= 36000;

841 i‡(
™g
 < 0)áng += 36000;

842  
™g
;

843 
	}
}

852 
	#DIGIT_TO_VAL
(
_x
Ë(_x - '0')

	)

853 
uöt32_t
 
	$GPS_co‹d_to_degªes
(* 
s
) {

854 *
p
, *
q
;

855 
uöt8_t
 
deg
 = 0, 
mö
 = 0;

856 
‰ac_mö
 = 0;

857 
uöt8_t
 
i
;

860 
p
 = 
s
; 
	`isdigô
(*p);Ö++) ;

861 
q
 = 
s
;

864 (
p
 - 
q
) > 2) {

865 i‡(
deg
)

866 
deg
 *= 10;

867 
deg
 +
	`DIGIT_TO_VAL
(*
q
++);

870 
p
 > 
q
) {

871 i‡(
mö
)

872 
mö
 *= 10;

873 
mö
 +
	`DIGIT_TO_VAL
(*
q
++);

878 i‡(*
p
 == '.') {

879 
q
 = 
p
 + 1;

880 
i
 = 0; i < 4; i++) {

881 
‰ac_mö
 *= 10;

882 i‡(
	`isdigô
(*
q
))

883 
‰ac_mö
 +*
q
++ - '0';

886  
deg
 * 10000000UL + (
mö
 * 1000000UL + 
‰ac_mö
*100UL) / 6;

887 
	}
}

890 
uöt16_t
 
	$gøb_fõlds
(* 
§c
, 
uöt8_t
 
mu…
) {

891 
uöt8_t
 
i
;

892 
uöt16_t
 
tmp
 = 0;

894 
i
=0; 
§c
[i]!=0; i++) {

895 if(
§c
[
i
] == '.') {

896 
i
++;

897 if(
mu…
==0) ;

898 
§c
[
i
+
mu…
] = 0;

900 
tmp
 *= 10;

901 if(
§c
[
i
] >='0' && src[i] <='9'Ë
tmp
 += src[i]-'0';

903  
tmp
;

904 
	}
}

906 
uöt8_t
 
	$hex_c
(
uöt8_t
 
n
) {

907 
n
 -= '0';

908 if(
n
>9)Ç -= 7;

909 
n
 &= 0x0F;

910  
n
;

911 
	}
}

916 
	$öô_RTH
() {

917 
f
.
GPS_mode
 = 
GPS_MODE_RTH
;

918 
f
.
GPS_BARO_MODE
 = 
åue
;

919 
GPS_hﬁd
[
LAT
] = 
GPS_co‹d
[LAT];

920 
GPS_hﬁd
[
LON
] = 
GPS_co‹d
[LON];

921 
	`GPS_£t_√xt_wp
(&
GPS_hﬁd
[
LAT
],&GPS_hﬁd[
LON
], &GPS_hold[LAT], &GPS_hold[LON]);

922 
NAV_∑u£d_©
 = 0;

923 i‡(
GPS_c⁄f
.
πh_Ætôude
 =0Ë
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

925 i‡(
Æt
.
E°A…
 < 
GPS_c⁄f
.
πh_Ætôude
 * 100)

926 
	`£t_√w_Ætôude
(
GPS_c⁄f
.
πh_Ætôude
 * 100);

927 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

929 
f
.
GPS_hód_£t
 = 0;

930 
NAV_°©e
 = 
NAV_STATE_RTH_START
;

931 
	}
}

933 
	$GPS_ª£t_home_posôi⁄
() {

934 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5) {

935 
GPS_home
[
LAT
] = 
GPS_co‹d
[LAT];

936 
GPS_home
[
LON
] = 
GPS_co‹d
[LON];

937 
	`GPS_ˇlc_l⁄gôude_sˇlög
(
GPS_co‹d
[
LAT
]);

938 
«v_èkeoff_bórög
 = 
©t
.
hódög
;

940 
f
.
GPS_FIX_HOME
 = 1;

942 
	}
}

945 
	$GPS_ª£t_«v
() {

946 
uöt8_t
 
i
;

948 
i
=0;i<2;i++) {

949 
«v
[
i
] = 0;

950 
	`ª£t_PID
(&
poshﬁdPID
[
i
]);

951 
	`ª£t_PID
(&
poshﬁd_øãPID
[
i
]);

952 
	`ª£t_PID
(&
«vPID
[
i
]);

953 
NAV_°©e
 = 
NAV_STATE_NONE
;

955 
jump_times
 = -10;

957 
√xt_°ï
 = 1;

959 
GPS_poi
[
LAT
] = 0; GPS_poi[
LON
] = 0;

960 
f
.
GPS_hód_£t
 = 0;

962 
	}
}

965 
	$GPS_£t_pids
() {

966 
poshﬁdPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDPOS
].
P8
/100.0;

967 
poshﬁdPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDPOS
].
I8
/100.0;

968 
poshﬁdPID_PARAM
.
Imax
 = 
POSHOLD_RATE_IMAX
 * 100;

970 
poshﬁd_øãPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDPOSR
].
P8
/10.0;

971 
poshﬁd_øãPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDPOSR
].
I8
/100.0;

972 
poshﬁd_øãPID_PARAM
.
kD
 = ()
c⁄f
.
pid
[
PIDPOSR
].
D8
/1000.0;

973 
poshﬁd_øãPID_PARAM
.
Imax
 = 
POSHOLD_RATE_IMAX
 * 100;

975 
«vPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDNAVR
].
P8
/10.0;

976 
«vPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDNAVR
].
I8
/100.0;

977 
«vPID_PARAM
.
kD
 = ()
c⁄f
.
pid
[
PIDNAVR
].
D8
/1000.0;

978 
«vPID_PARAM
.
Imax
 = 
POSHOLD_RATE_IMAX
 * 100;

979 
	}
}

981 
öt32_t
 
	$wøp_18000
(
öt32_t
 
™g
) {

982 i‡(
™g
 > 18000)áng -= 36000;

983 i‡(
™g
 < -18000)áng += 36000;

984  
™g
;

985 
	}
}

1005 #i‡
deföed
(
GPS_SERIAL
)

1010 #i‡
deföed
(
NMEA
)

1022 
	#FRAME_GGA
 1

	)

1023 
	#FRAME_RMC
 2

	)

1025 
	$GPS_SîülInô
() {

1026 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1027 
	`dñay
(1000);

1028 
	}
}

1030 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
c
) {

1031 
uöt8_t
 
‰ameOK
 = 0;

1032 
uöt8_t
 
∑øm
 = 0, 
off£t
 = 0, 
∑rôy
 = 0;

1033 
°rög
[15];

1034 
uöt8_t
 
checksum_∑øm
, 
‰ame
 = 0;

1036 i‡(
c
 == '$') {

1037 
∑øm
 = 0; 
off£t
 = 0; 
∑rôy
 = 0;

1038 } i‡(
c
 == ',' || c == '*') {

1039 
°rög
[
off£t
] = 0;

1040 i‡(
∑øm
 == 0) {

1041 
‰ame
 = 0;

1042 i‡(
°rög
[0] ='G' && såög[1] ='P' && såög[2] ='G' && såög[3] ='G' && såög[4] ='A'Ë
‰ame
 = 
FRAME_GGA
;

1043 i‡(
°rög
[0] ='G' && såög[1] ='P' && såög[2] ='R' && såög[3] ='M' && såög[4] ='C'Ë
‰ame
 = 
FRAME_RMC
;

1044 } i‡(
‰ame
 =
FRAME_GGA
) {

1045 i‡(
∑øm
 =2Ë{
GPS_co‹d
[
LAT
] = 
	`GPS_co‹d_to_degªes
(
°rög
);}

1046 i‡(
∑øm
 =3 && 
°rög
[0] ='S'Ë
GPS_co‹d
[
LAT
] = -GPS_coord[LAT];

1047 i‡(
∑øm
 =4Ë{
GPS_co‹d
[
LON
] = 
	`GPS_co‹d_to_degªes
(
°rög
);}

1048 i‡(
∑øm
 =5 && 
°rög
[0] ='W'Ë
GPS_co‹d
[
LON
] = -GPS_coord[LON];

1049 i‡(
∑øm
 =6Ë{
f
.
GPS_FIX
 = (
°rög
[0] > '0');}

1050 i‡(
∑øm
 =7Ë{
GPS_numS©
 = 
	`gøb_fõlds
(
°rög
,0);}

1051 i‡(
∑øm
 =9Ë{
GPS_Ætôude
 = 
	`gøb_fõlds
(
°rög
,0);}

1052 } i‡(
‰ame
 =
FRAME_RMC
) {

1053 i‡(
∑øm
 =7Ë{
GPS_•ìd
 = ((
uöt32_t
)
	`gøb_fõlds
(
°rög
,1)*5144L)/1000L;}

1054 i‡(
∑øm
 =8Ë{
GPS_ground_cour£
 = 
	`gøb_fõlds
(
°rög
,1); }

1056 
∑øm
++; 
off£t
 = 0;

1057 i‡(
c
 ='*'Ë
checksum_∑øm
=1;

1058 
∑rôy
 ^
c
;

1059 } i‡(
c
 == '\r' || c == '\n') {

1060 i‡(
checksum_∑øm
) {

1061 
uöt8_t
 
checksum
 = 
	`hex_c
(
°rög
[0]);

1062 
checksum
 <<= 4;

1063 
checksum
 +
	`hex_c
(
°rög
[1]);

1064 i‡(
checksum
 =
∑rôy
Ë
‰ameOK
 = 1;

1066 
checksum_∑øm
=0;

1068 i‡(
off£t
 < 15Ë
°rög
[off£t++] = 
c
;

1069 i‡(!
checksum_∑øm
Ë
∑rôy
 ^
c
;

1071  
‰ameOK
 && (
‰ame
==
FRAME_GGA
);

1072 
	}
}

1080 #i‡
deföed
(
UBLOX
)

1081 c⁄° 
	gUBLOX_INIT
[] 
	gPROGMEM
 = {

1096 
	subx_hódî
 {

1097 
uöt8_t
 
	m¥ómbÀ1
;

1098 
uöt8_t
 
	m¥ómbÀ2
;

1099 
uöt8_t
 
	mmsg_˛ass
;

1100 
uöt8_t
 
	mmsg_id
;

1101 
uöt16_t
 
	mÀngth
;

1103 
	subx_«v_po¶lh
 {

1104 
uöt32_t
 
	mtime
;

1105 
öt32_t
 
	ml⁄gôude
;

1106 
öt32_t
 
	mœtôude
;

1107 
öt32_t
 
	mÆtôude_ñlùsoid
;

1108 
öt32_t
 
	mÆtôude_m¶
;

1109 
uöt32_t
 
	mh‹iz⁄èl_accuøcy
;

1110 
uöt32_t
 
	mvîtiˇl_accuøcy
;

1112 
	subx_«v_sﬁuti⁄
 {

1113 
uöt32_t
 
	mtime
;

1114 
öt32_t
 
	mtime_n£c
;

1115 
öt16_t
 
	mwìk
;

1116 
uöt8_t
 
	mfix_ty≥
;

1117 
uöt8_t
 
	mfix_°©us
;

1118 
öt32_t
 
	me˚f_x
;

1119 
öt32_t
 
	me˚f_y
;

1120 
öt32_t
 
	me˚f_z
;

1121 
uöt32_t
 
	mposôi⁄_accuøcy_3d
;

1122 
öt32_t
 
	me˚f_x_vñocôy
;

1123 
öt32_t
 
	me˚f_y_vñocôy
;

1124 
öt32_t
 
	me˚f_z_vñocôy
;

1125 
uöt32_t
 
	m•ìd_accuøcy
;

1126 
uöt16_t
 
	mposôi⁄_DOP
;

1127 
uöt8_t
 
	mªs
;

1128 
uöt8_t
 
	mßãŒôes
;

1129 
uöt32_t
 
	mªs2
;

1131 
	subx_«v_vñ√d
 {

1132 
uöt32_t
 
	mtime
;

1133 
öt32_t
 
	m√d_n‹th
;

1134 
öt32_t
 
	m√d_ó°
;

1135 
öt32_t
 
	m√d_down
;

1136 
uöt32_t
 
	m•ìd_3d
;

1137 
uöt32_t
 
	m•ìd_2d
;

1138 
öt32_t
 
	mhódög_2d
;

1139 
uöt32_t
 
	m•ìd_accuøcy
;

1140 
uöt32_t
 
	mhódög_accuøcy
;

1143 
	eubs_¥Ÿocﬁ_byãs
 {

1144 
	mPREAMBLE1
 = 0xb5,

1145 
	mPREAMBLE2
 = 0x62,

1146 
	mCLASS_NAV
 = 0x01,

1147 
	mCLASS_ACK
 = 0x05,

1148 
	mCLASS_CFG
 = 0x06,

1149 
	mMSG_ACK_NACK
 = 0x00,

1150 
	mMSG_ACK_ACK
 = 0x01,

1151 
	mMSG_POSLLH
 = 0x2,

1152 
	mMSG_STATUS
 = 0x3,

1153 
	mMSG_SOL
 = 0x6,

1154 
	mMSG_VELNED
 = 0x12,

1155 
	mMSG_CFG_PRT
 = 0x00,

1156 
	mMSG_CFG_RATE
 = 0x08,

1157 
	mMSG_CFG_SET_RATE
 = 0x01,

1158 
	mMSG_CFG_NAV_SETTINGS
 = 0x24

1160 
	eubs_«v_fix_ty≥
 {

1161 
	mFIX_NONE
 = 0,

1162 
	mFIX_DEAD_RECKONING
 = 1,

1163 
	mFIX_2D
 = 2,

1164 
	mFIX_3D
 = 3,

1165 
	mFIX_GPS_DEAD_RECKONING
 = 4,

1166 
	mFIX_TIME
 = 5

1168 
	eubx_«v_°©us_bôs
 {

1169 
	mNAV_STATUS_FIX_VALID
 = 1

1174 
ubx_«v_po¶lh
 
	mpo¶lh
;

1175 
ubx_«v_sﬁuti⁄
 
	msﬁuti⁄
;

1176 
ubx_«v_vñ√d
 
	mvñ√d
;

1177 
uöt8_t
 
	mbyãs
[];

1178 } 
	g_buf„r
;

1180 
uöt32_t
 
	göô_•ìd
[5] = {9600,19200,38400,57600,115200};

1182 
	$SîülGpsPröt
(c⁄° 
PROGMEM
 * 
°r
) {

1183 
b
;

1184 
°r
 && (
b
 = 
	`pgm_ªad_byã
(str++))) {

1185 
	`SîülWrôe
(
GPS_SERIAL
, 
b
);

1186 
	`dñay
(5);

1188 
	}
}

1190 
	$GPS_SîülInô
() {

1191 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1192 
	`dñay
(1000);

1193 
uöt8_t
 
i
=0;i<5;i++){

1194 
	`SîülO≥n
(
GPS_SERIAL
,
öô_•ìd
[
i
]);

1195 #i‡(
GPS_BAUD
==19200)

1196 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,19200,0*23\r\n"));

1198 #i‡(
GPS_BAUD
==38400)

1199 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,38400,0*26\r\n"));

1201 #i‡(
GPS_BAUD
==57600)

1202 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,57600,0*2D\r\n"));

1204 #i‡(
GPS_BAUD
==115200)

1205 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,115200,0*1E\r\n"));

1207 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(10);

1209 
	`dñay
(200);

1210 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1211 
uöt8_t
 
i
=0; i<(
UBLOX_INIT
); i++) {

1212 
	`SîülWrôe
(
GPS_SERIAL
, 
	`pgm_ªad_byã
(
UBLOX_INIT
+
i
));

1213 
	`dñay
(5);

1215 
	}
}

1217 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
d©a
){

1218 
uöt8_t
 
_°ï
 = 0;

1219 
uöt8_t
 
_msg_id
;

1220 
uöt16_t
 
_∑ylﬂd_Àngth
;

1221 
uöt16_t
 
_∑ylﬂd_cou¡î
;

1222 
uöt8_t
 
_ck_a
;

1223 
uöt8_t
 
_ck_b
;

1225 
uöt8_t
 
°
 = 
_°ï
+1;

1226 
boﬁ
 
ªt
 = 
Ál£
;

1228 i‡(
°
 == 2)

1229 i‡(
PREAMBLE2
 !
d©a
Ë
°
--;

1230 i‡(
°
 == 1) {

1231 if(
PREAMBLE1
 !
d©a
Ë
°
--;

1232 } i‡(
°
 == 3) {

1233 
_ck_b
 = 
_ck_a
 = 
d©a
;

1234 } i‡(
°
 > 3 && st < 8) {

1235 
_ck_b
 +(
_ck_a
 +
d©a
);

1236 i‡(
°
 == 4) {

1237 
_msg_id
 = 
d©a
;

1238 } i‡(
°
 == 5) {

1239 
_∑ylﬂd_Àngth
 = 
d©a
;

1240 } i‡(
°
 == 6) {

1241 
_∑ylﬂd_Àngth
 +(
uöt16_t
)(
d©a
<<8);

1242 i‡(
_∑ylﬂd_Àngth
 > 512Ë
°
 = 0;

1243 
_∑ylﬂd_cou¡î
 = 0;

1245 i‡(
_∑ylﬂd_cou¡î
+1 < 
_∑ylﬂd_Àngth
Ë
°
--;

1246 i‡(
_∑ylﬂd_cou¡î
 < (
_buf„r
)Ë_buf„r.
byãs
[_∑ylﬂd_cou¡î] = 
d©a
;

1247 
_∑ylﬂd_cou¡î
++;

1249 } i‡(
°
 == 8) {

1250 i‡(
_ck_a
 !
d©a
Ë
°
 = 0;

1251 } i‡(
°
 == 9) {

1252 
°
 = 0;

1253 i‡(
_ck_b
 =
d©a
) {

1254 i‡(
_msg_id
 =
MSG_POSLLH
) {

1255 if(
f
.
GPS_FIX
) {

1256 
GPS_co‹d
[
LON
] = 
_buf„r
.
po¶lh
.
l⁄gôude
;

1257 
GPS_co‹d
[
LAT
] = 
_buf„r
.
po¶lh
.
œtôude
;

1258 
GPS_Ætôude
 = 
_buf„r
.
po¶lh
.
Ætôude_m¶
 / 1000;

1261 
ªt

åue
;

1262 } i‡(
_msg_id
 =
MSG_SOL
) {

1263 
f
.
GPS_FIX
 = 0;

1264 if((
_buf„r
.
sﬁuti⁄
.
fix_°©us
 & 
NAV_STATUS_FIX_VALID
Ë&& (_buf„r.sﬁuti⁄.
fix_ty≥
 =
FIX_3D
 || _buf„r.sﬁuti⁄.fix_ty≥ =
FIX_2D
)Ë
f
.
GPS_FIX
 = 1;

1265 
GPS_numS©
 = 
_buf„r
.
sﬁuti⁄
.
ßãŒôes
;

1266 } i‡(
_msg_id
 =
MSG_VELNED
) {

1267 
GPS_•ìd
 = 
_buf„r
.
vñ√d
.
•ìd_2d
;

1268 
GPS_ground_cour£
 = (
uöt16_t
)(
_buf„r
.
vñ√d
.
hódög_2d
 / 10000);

1272 
_°ï
 = 
°
;

1273  
ªt
;

1274 
	}
}

1282 #i‡
deföed
(
MTK_BINARY16
Ë|| deföed(
MTK_BINARY19
)

1284 
	#MTK_SET_BINARY
 
	`PSTR
("$PGCMD,16,0,0,0,0,0*6A\r\n")

	)

1285 
	#MTK_SET_NMEA
 
	`PSTR
("$PGCMD,16,1,1,1,1,1*6B\r\n")

	)

1286 
	#MTK_SET_NMEA_SENTENCES
 
	`PSTR
("$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n")

	)

1287 
	#MTK_OUTPUT_4HZ
 
	`PSTR
("$PMTK220,250*29\r\n")

	)

1288 
	#MTK_OUTPUT_5HZ
 
	`PSTR
("$PMTK220,200*2C\r\n")

	)

1289 
	#MTK_OUTPUT_10HZ
 
	`PSTR
("$PMTK220,100*2F\r\n")

	)

1290 
	#MTK_NAVTHRES_OFF
 
	`PSTR
("$PMTK397,0*23\r\n")

1291 
	#SBAS_ON
 
	`PSTR
("$PMTK313,1*2E\r\n")

	)

1292 
	#WAAS_ON
 
	`PSTR
("$PMTK301,2*2E\r\n")

	)

1293 
	#SBAS_TEST_MODE
 
	`PSTR
("$PMTK319,0*25\r\n")

1294 

	)

1295 
	sdiyd_mtk_msg
 {

1296 
öt32_t
 
	mœtôude
;

1297 
öt32_t
 
	ml⁄gôude
;

1298 
öt32_t
 
	mÆtôude
;

1299 
öt32_t
 
	mground_•ìd
;

1300 
öt32_t
 
	mground_cour£
;

1301 
uöt8_t
 
	mßãŒôes
;

1302 
uöt8_t
 
	mfix_ty≥
;

1303 
uöt32_t
 
	mutc_d©e
;

1304 
uöt32_t
 
	mutc_time
;

1305 
uöt16_t
 
	mhd›
;

1309 
	ediyd_mtk_fix_ty≥
 {

1310 
	mFIX_NONE
 = 1,

1311 
	mFIX_2D
 = 2,

1312 
	mFIX_3D
 = 3,

1313 
	mFIX_2D_SBAS
 = 6,

1314 
	mFIX_3D_SBAS
 = 7

1317 #i‡
deföed
(
MTK_BINARY16
)

1318 
	ediyd_mtk_¥Ÿocﬁ_byãs
 {

1319 
	mPREAMBLE1
 = 0xd0,

1320 
	mPREAMBLE2
 = 0xdd,

1324 #i‡
deföed
(
MTK_BINARY19
)

1325 
	ediyd_mtk_¥Ÿocﬁ_byãs
 {

1326 
	mPREAMBLE1
 = 0xd1,

1327 
	mPREAMBLE2
 = 0xdd,

1332 
uöt8_t
 
	g_ck_a
;

1333 
uöt8_t
 
	g_ck_b
;

1336 
uöt8_t
 
	g_°ï
;

1337 
uöt8_t
 
	g_∑ylﬂd_cou¡î
;

1340 
	g_time_off£t
;

1341 
boﬁ
 
	g_off£t_ˇlcuœãd
;

1345 
diyd_mtk_msg
 
	mmsg
;

1346 
uöt8_t
 
	mbyãs
[];

1347 } 
	g_buf„r
;

1349 
ölöe
 
	$_sw≠l
(c⁄° *
byãs
) {

1350 c⁄° 
uöt8_t
 *
b
 = (c⁄° uöt8_à*)
byãs
;

1352 
v
;

1353 
uöt8_t
 
b
[4];

1354 } 
u
;

1356 
u
.
b
[0] = b[3];

1357 
u
.
b
[1] = b[2];

1358 
u
.
b
[2] = b[1];

1359 
u
.
b
[3] = b[0];

1361 (
u
.
v
);

1362 
	}
}

1364 
uöt32_t
 
	göô_•ìd
[5] = {9600,19200,38400,57600,115200};

1366 
	$SîülGpsPröt
(c⁄° 
PROGMEM
 * 
°r
) {

1367 
b
;

1368 
°r
 && (
b
 = 
	`pgm_ªad_byã
(str++))) {

1369 
	`SîülWrôe
(
GPS_SERIAL
, 
b
);

1371 
	}
}

1373 
	$GPS_SîülInô
() {

1374 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1375 
	`dñay
(1000);

1376 #i‡
	`deföed
(
INIT_MTK_GPS
)

1377 
uöt8_t
 
i
=0;i<5;i++){

1378 
	`SîülO≥n
(
GPS_SERIAL
,
öô_•ìd
[
i
]);

1379 #i‡(
GPS_BAUD
==19200)

1380 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,19200*22\r\n"));

1382 #i‡(
GPS_BAUD
==38400)

1383 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,38400*27\r\n"));

1385 #i‡(
GPS_BAUD
==57600)

1386 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,57600*2C\r\n"));

1388 #i‡(
GPS_BAUD
==115200)

1389 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,115200*1F\r\n"));

1391 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1395 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1397 
	`SîülGpsPröt
(
MTK_NAVTHRES_OFF
);

1398 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1399 
	`SîülGpsPröt
(
SBAS_ON
);

1400 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1401 
	`SîülGpsPröt
(
WAAS_ON
);

1402 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1403 
	`SîülGpsPröt
(
SBAS_TEST_MODE
);

1404 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1405 
	`SîülGpsPröt
(
MTK_OUTPUT_5HZ
);

1407 #i‡
	`deföed
(
NMEA
)

1408 
	`SîülGpsPröt
(
MTK_SET_NMEA_SENTENCES
);

1410 #i‡
	`deföed
(
MTK_BINARY19
Ë|| deföed(
MTK_BINARY16
)

1411 
	`SîülGpsPröt
(
MTK_SET_BINARY
);

1414 
	}
}

1416 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
d©a
) {

1417 
boﬁ
 
∑r£d
 = 
Ál£
;

1419 
ª°¨t
:

1420 
_°ï
) {

1431 if(
PREAMBLE1
 =
d©a
)

1432 
_°ï
++;

1435 i‡(
PREAMBLE2
 =
d©a
) {

1436 
_°ï
++;

1439 
_°ï
 = 0;

1440 
ª°¨t
;

1442 i‡((
_buf„r
Ë=
d©a
) {

1443 
_°ï
++;

1444 
_ck_b
 = 
_ck_a
 = 
d©a
;

1445 
_∑ylﬂd_cou¡î
 = 0;

1447 
_°ï
 = 0;

1448 
ª°¨t
;

1453 
_buf„r
.
byãs
[
_∑ylﬂd_cou¡î
++] = 
d©a
;

1454 
_ck_b
 +(
_ck_a
 +
d©a
);

1455 i‡(
_∑ylﬂd_cou¡î
 =(
_buf„r
))

1456 
_°ï
++;

1460 
_°ï
++;

1461 i‡(
_ck_a
 !
d©a
)

1462 
_°ï
 = 0;

1465 
_°ï
 = 0;

1466 i‡(
_ck_b
 !
d©a
)

1468 
f
.
GPS_FIX
 = ((
_buf„r
.
msg
.
fix_ty≥
 =
FIX_3D
Ë|| (_buf„r.msg.fix_ty≥ =
FIX_3D_SBAS
));

1469 #i‡
	`deföed
(
MTK_BINARY16
)

1470 
GPS_co‹d
[
LAT
] = 
_buf„r
.
msg
.
œtôude
 * 10;

1471 
GPS_co‹d
[
LON
] = 
_buf„r
.
msg
.
l⁄gôude
 * 10;

1473 #i‡
	`deföed
(
MTK_BINARY19
)

1474 
GPS_co‹d
[
LAT
] = 
_buf„r
.
msg
.
œtôude
;

1475 
GPS_co‹d
[
LON
] = 
_buf„r
.
msg
.
l⁄gôude
;

1477 
GPS_Ætôude
 = 
_buf„r
.
msg
.
Ætôude
 /100;

1478 
GPS_•ìd
 = 
_buf„r
.
msg
.
ground_•ìd
;

1479 
GPS_ground_cour£
 = 
_buf„r
.
msg
.
ground_cour£
/100;

1480 
GPS_numS©
 = 
_buf„r
.
msg
.
ßãŒôes
;

1483 
∑r£d
 = 
åue
;

1485  
∑r£d
;

1486 
	}
}

1497 #i‡
deföed
(
I2C_GPS
)

1498 
	#I2C_GPS_ADDRESS
 0x20

1499 

	)

1500 
	#I2C_GPS_STATUS_00
 00

1501 
	#I2C_GPS_STATUS_NEW_DATA
 0x01

1502 
	#I2C_GPS_STATUS_2DFIX
 0x02

1503 
	#I2C_GPS_STATUS_3DFIX
 0x04

1504 
	#I2C_GPS_STATUS_NUMSATS
 0xF0

1505 
	#I2C_GPS_LOCATION
 07

1506 
	#I2C_GPS_GROUND_SPEED
 31

1507 
	#I2C_GPS_ALTITUDE
 33

1508 
	#I2C_GPS_GROUND_COURSE
 35

1509 
	#I2C_GPS_TIME
 39

1510 
	#I2C_GPS_SONAR_ALT
 239

1511 

	)

1512 
uöt8_t
 
	$GPS_NewD©a
() {

1513 
uöt8_t
 
i2c_gps_°©us
;

1515 
i2c_gps_°©us
 = 
	`i2c_ªadReg
(
I2C_GPS_ADDRESS
,
I2C_GPS_STATUS_00
);

1517 #i‡
	`deföed
(
I2C_GPS_SONAR
)

1518 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_SONAR_ALT
, (
uöt8_t
*)&
s⁄¨A…
,2);

1521 
f
.
GPS_FIX
 = 0;

1522 i‡(
i2c_gps_°©us
 & 
I2C_GPS_STATUS_3DFIX
) {

1523 
f
.
GPS_FIX
 = 1;

1524 i‡(
i2c_gps_°©us
 & 
I2C_GPS_STATUS_NEW_DATA
) {

1525 
GPS_Føme
 = 1;

1526 i‡(
GPS_upd©e
 == 1) GPS_update = 0; GPS_update = 1;

1527 
GPS_numS©
 = 
i2c_gps_°©us
 >>4;

1528 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_LOCATION
, (
uöt8_t
*)&
GPS_co‹d
[
LAT
],4);

1529 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_LOCATION
+4, (
uöt8_t
*)&
GPS_co‹d
[
LON
],4);

1538 
	}
}

	@GPS.h

1 #i‚de‡
GPS_H_


2 
	#GPS_H_


	)

5 
boﬁ
 
GPS_√wFøme
(
uöt8_t
 
c
);

6 
uöt8_t
 
GPS_Føme
;

8 
öt32_t
 
wøp_18000
(öt32_à
™g
);

10 
GPS_£t_pids
();

11 
GPS_SîülInô
();

12 
uöt8_t
 
GPS_Compuã
();

13 
GPS_ª£t_home_posôi⁄
();

14 
GPS_£t_√xt_wp
(
öt32_t
* 
œt_to
, i¡32_t* 
l⁄_to
, i¡32_t* 
œt_‰om
, i¡32_t* 
l⁄_‰om
);

15 
GPS_ª£t_«v
();

17 
öt32_t
 
gë_Ætôude_îr‹
();

18 
˛ór_√w_Ætôude
();

19 
f‹˚_√w_Ætôude
(
öt32_t
 
_√w_Æt
);

20 
£t_√w_Ætôude
(
öt32_t
 
_√w_Æt
);

21 
öt32_t
 
gë_√w_Ætôude
();

22 
ab‹t_missi⁄
(
îr‹_code
);

23 
GPS_adju°_hódög
();

24 
öô_RTH
();

25 
check_œnd
();

27 #i‡
deföed
(
I2C_GPS
)

28 
uöt8_t
 
GPS_NewD©a
();

31 
uöt32_t
 
wp_di°™˚
;

32 
öt32_t
 
èrgë_bórög
;

	@IMU.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"IMU.h
"

7 
	~"Sís‹s.h
"

9 
gëE°im©edAâôude
();

11 
	$compuãIMU
 () {

12 
uöt8_t
 
axis
;

13 
öt16_t
 
gyroADC¥evious
[3] = {0,0,0};

14 
öt16_t
 
gyroADCöãr
[3];

16 
uöt16_t
 
timeI¡îÀave
 = 0;

17 #i‡
ACC


18 
	`ACC_gëADC
();

19 
	`gëE°im©edAâôude
();

21 #i‡
GYRO


22 
	`Gyro_gëADC
();

24 
axis
 = 0;áxis < 3;áxis++)

25 
gyroADCöãr
[
axis
] = 
imu
.
gyroADC
[axis];

26 
timeI¡îÀave
=
	`mi¸os
();

27 
	`™√xCode
();

28 
uöt8_t
 
t
=0;

29 (
öt16_t
)(
	`mi¸os
()-
timeI¡îÀave
)<650Ë
t
=1;

30 #ifde‡
LCD_TELEMETRY


31 i‡(!
t
Ë
™√x650_ovîrun_cou¡
++;

33 #i‡
GYRO


34 
	`Gyro_gëADC
();

36 
axis
 = 0;áxis < 3;áxis++) {

37 
gyroADCöãr
[
axis
] = 
imu
.
gyroADC
[axis]+gyroADCinter[axis];

39 
imu
.
gyroD©a
[
axis
] = (
gyroADCöãr
[axis]+
gyroADC¥evious
[axis])/3;

40 
gyroADC¥evious
[
axis
] = 
gyroADCöãr
[axis]>>1;

41 i‡(!
ACC
Ë
imu
.
accADC
[
axis
]=0;

43 #i‡
	`deföed
(
GYRO_SMOOTHING
)

44 
öt16_t
 
gyroSmoŸh
[3] = {0,0,0};

45 
axis
 = 0;áxis < 3;áxis++) {

46 
imu
.
gyroD©a
[
axis
] = (
öt16_t
Ë––(
öt32_t
)((öt32_t)
gyroSmoŸh
[axis] * (
c⁄f
.
SmoŸhög
[axis]-1) )+imu.gyroData[axis]+1 ) / conf.Smoothing[axis]);

47 
gyroSmoŸh
[
axis
] = 
imu
.
gyroD©a
[axis];

49 #ñi‡
	`deföed
(
TRI
)

50 
öt16_t
 
gyroYawSmoŸh
 = 0;

51 
imu
.
gyroD©a
[
YAW
] = (
gyroYawSmoŸh
*2+imu.gyroData[YAW])/3;

52 
gyroYawSmoŸh
 = 
imu
.
gyroD©a
[
YAW
];

54 
	}
}

79 #i‚de‡
ACC_LPF_FACTOR


80 
	#ACC_LPF_FACTOR
 4

82 

	)

85 #i‚de‡
GYR_CMPF_FACTOR


86 
	#GYR_CMPF_FACTOR
 10

88 

	)

91 
	#GYR_CMPFM_FACTOR
 8

92 

	)

95 
öt32_t
 
	mX
,
	mY
,
	mZ
;

96 } 
	tt_öt32_t_ve˘‹_def
;

99 
uöt16_t
 
	mXL
; 
öt16_t
 
	mX
;

100 
uöt16_t
 
	mYL
; 
öt16_t
 
	mY
;

101 
uöt16_t
 
	mZL
; 
öt16_t
 
	mZ
;

102 } 
	tt_öt16_t_ve˘‹_def
;

106 
öt32_t
 
	mA32
[3];

107 
t_öt32_t_ve˘‹_def
 
	mV32
;

108 
öt16_t
 
	mA16
[6];

109 
t_öt16_t_ve˘‹_def
 
	mV16
;

110 } 
	tt_öt32_t_ve˘‹
;

113 
öt16_t
 
	$_©™2
(
öt32_t
 
y
, i¡32_à
x
){

114 
z
 = 
y
;

115 
öt16_t
 
a
;

116 
uöt8_t
 
c
;

117 
c
 = 
	`abs
(
y
Ë<ábs(
x
);

118 i‡–
c
 ) {
z
 = z / 
x
;} {z = x / z;}

119 
a
 = 2046.43 * (
z
 / (3.5714 + z * z));

120 i‡–
c
 ){

121 i‡(
x
<0) {

122 i‡(
y
<0Ë
a
 -= 1800;

123 
a
 += 1800;

126 
a
 = 900 -á;

127 i‡(
y
<0Ë
a
 -= 1800;

129  
a
;

130 
	}
}

132 
	$InvSqπ
 (
x
){

134 
öt32_t
 
i
;

135 
f
;

136 } 
c⁄v
;

137 
c⁄v
.
f
 = 
x
;

138 
c⁄v
.
i
 = 0x5f1ffff9 - (conv.i >> 1);

139  
c⁄v
.
f
 * (1.68191409‡- 0.703952253‡* 
x
 * conv.f * conv.f);

140 
	}
}

145 
	#Mu…iS16X16to32
(
l⁄gRes
, 
ötIn1
, 
ötIn2
) \

146 
asm
 volatile ( \

164 "=&r" (
l⁄gRes
) \

166 "a" (
ötIn1
), \

167 "a" (
ötIn2
) \

170 )

	)

172 
öt32_t
 
__©åibuã__
 ((
noölöe
)Ë
	$mul
(
öt16_t
 
a
, i¡16_à
b
) {

173 
öt32_t
 
r
;

174 
	`Mu…iS16X16to32
(
r
, 
a
, 
b
);

176  
r
;

177 
	}
}

180 
	$rŸ©eV32
–
t_öt32_t_ve˘‹
 *
v
,
öt16_t
* 
dñè
) {

181 
öt16_t
 
X
 = 
v
->
V16
.X;

182 
öt16_t
 
Y
 = 
v
->
V16
.Y;

183 
öt16_t
 
Z
 = 
v
->
V16
.Z;

185 
v
->
V32
.
Z
 -
	`mul
(
dñè
[
ROLL
] , 
X
Ë+ mul(dñè[
PITCH
] , 
Y
);

186 
v
->
V32
.
X
 +
	`mul
(
dñè
[
ROLL
] , 
Z
Ë- mul(dñè[
YAW
] , 
Y
);

187 
v
->
V32
.
Y
 +
	`mul
(
dñè
[
PITCH
] , 
Z
Ë+ mul(dñè[
YAW
] , 
X
);

188 
	}
}

190 
öt16_t
 
	gaccZ
=0;

192 
	$gëE°im©edAâôude
(){

193 
uöt8_t
 
axis
;

194 
öt32_t
 
accMag
 = 0;

195 
sˇÀ
;

196 
öt16_t
 
dñèGyroAngÀ16
[3];

197 
t_öt32_t_ve˘‹
 
E°G
 = {0,0,(
öt32_t
)
ACC_1G
<<16};

198 #i‡
MAG


199 
t_öt32_t_ve˘‹
 
E°M
;

201 
t_öt32_t_ve˘‹
 
E°M
 = {0,(
öt32_t
)1<<24,0};

203 
uöt32_t
 
LPFAcc
[3];

204 
övG
;

205 
öt16_t
 
accZoff£t
 = 0;

206 
öt32_t
 
accZ_tmp
=0;

207 
uöt16_t
 
¥eviousT
;

208 
uöt16_t
 
cuºítT
 = 
	`mi¸os
();

212 
sˇÀ
 = (
cuºítT
 - 
¥eviousT
Ë* (
GYRO_SCALE
 * 65536);

213 
¥eviousT
 = 
cuºítT
;

216 
axis
 = 0;áxis < 3;áxis++) {

218 
imu
.
accSmoŸh
[
axis
] = 
LPFAcc
[axis]>>
ACC_LPF_FACTOR
;

219 
LPFAcc
[
axis
] +
imu
.
accADC
[axis] - imu.
accSmoŸh
[axis];

221 
accMag
 +
	`mul
(
imu
.
accSmoŸh
[
axis
] , imu.accSmooth[axis]);

224 
dñèGyroAngÀ16
[
axis
] = 
imu
.
gyroADC
[axis] * 
sˇÀ
;

230 
	`rŸ©eV32
(&
E°G
,
dñèGyroAngÀ16
);

231 
	`rŸ©eV32
(&
E°M
,
dñèGyroAngÀ16
);

236 
axis
 = 0;áxis < 3;áxis++) {

237 i‡–(
öt16_t
)(0.85*
ACC_1G
*ACC_1G/256Ë< (öt16_t)(
accMag
>>8) && (int16_t)(accMag>>8) < (int16_t)(1.15*ACC_1G*ACC_1G/256) )

238 
E°G
.
A32
[
axis
] +(
öt32_t
)(
imu
.
accSmoŸh
[axis] - E°G.
A16
[2*axis+1])<<(16-
GYR_CMPF_FACTOR
);

239 
accZ_tmp
 +
	`mul
(
imu
.
accSmoŸh
[
axis
] , 
E°G
.
A16
[2*axis+1]);

240 #i‡
MAG


241 
E°M
.
A32
[
axis
] +(
öt32_t
)(
imu
.
magADC
[axis] - E°M.
A16
[2*axis+1])<<(16-
GYR_CMPFM_FACTOR
);

245 i‡(
E°G
.
V16
.
Z
 > 
ACCZ_25deg
)

246 
f
.
SMALL_ANGLES_25
 = 1;

248 
f
.
SMALL_ANGLES_25
 = 0;

251 
öt32_t
 
sqGX_sqGZ
 = 
	`mul
(
E°G
.
V16
.
X
,E°G.V16.XË+ mul(E°G.V16.
Z
,EstG.V16.Z);

252 
övG
 = 
	`InvSqπ
(
sqGX_sqGZ
 + 
	`mul
(
E°G
.
V16
.
Y
,EstG.V16.Y));

253 
©t
.
™gÀ
[
ROLL
] = 
	`_©™2
(
E°G
.
V16
.
X
 , E°G.V16.
Z
);

254 
©t
.
™gÀ
[
PITCH
] = 
	`_©™2
(
E°G
.
V16
.
Y
 , 
	`InvSqπ
(
sqGX_sqGZ
)*sqGX_sqGZ);

257 
©t
.
hódög
 = 
	`_©™2
(

258 
	`mul
(
E°M
.
V16
.
Z
 , 
E°G
.V16.
X
) - mul(EstM.V16.X , EstG.V16.Z),

259 (
E°M
.
V16
.
Y
 * 
sqGX_sqGZ
 - (
	`mul
(E°M.V16.
X
 , 
E°G
.V16.XË+ mul(E°M.V16.
Z
 , E°G.V16.Z)Ë* E°G.V16.Y)*
övG
 );

260 #i‡
MAG


261 
©t
.
hódög
 +
c⁄f
.
mag_de˛ö©i⁄
;

263 
©t
.
hódög
 /= 10;

265 #i‡
	`deföed
(
THROTTLE_ANGLE_CORRECTION
)

266 
cosZ
 = 
	`mul
(
E°G
.
V16
.
Z
 , 100Ë/ 
ACC_1G
 ;

267 
thrŸéeAngÀC‹ª˘i⁄
 = 
THROTTLE_ANGLE_CORRECTION
 * 
	`c⁄°øö
(100 - 
cosZ
, 0, 100) >>3;

272 
accZ
 = 
accZ_tmp
 * 
övG
;

273 i‡(!
f
.
ARMED
) {

274 
accZoff£t
 -=áccZoffset>>3;

275 
accZoff£t
 +
accZ
;

277 
accZ
 -
accZoff£t
>>3;

278 
	}
}

280 
	#UPDATE_INTERVAL
 25000

281 
	#BARO_TAB_SIZE
 21

	)

283 
	#ACC_Z_DEADBAND
 (
ACC_1G
>>5)

284 

	)

286 
	#≠∂yDódb™d
(
vÆue
, 
dódb™d
) \

287 if(
	`abs
(
vÆue
Ë< 
dódb™d
) { \

288 
vÆue
 = 0; \

289 } if(
vÆue
 > 0){ \

290 
vÆue
 -
dódb™d
; \

291 } if(
vÆue
 < 0){ \

292 
vÆue
 +
dódb™d
; \

293 }

	)

295 #i‡
BARO


296 
uöt8_t
 
	$gëE°im©edA…ôude
(){

297 
öt32_t
 
B¨oA…
;

298 
b¨oGroundTem≥øtuªSˇÀ
,
logB¨oGroundPªssuªSum
;

299 
vñ
 = 0.0f;

300 
uöt16_t
 
¥eviousT
;

301 
uöt16_t
 
cuºítT
 = 
	`mi¸os
();

302 
uöt16_t
 
dTime
;

304 
dTime
 = 
cuºítT
 - 
¥eviousT
;

305 i‡(
dTime
 < 
UPDATE_INTERVAL
)  0;

306 
¥eviousT
 = 
cuºítT
;

308 if(
ˇlibøtögB
 > 0) {

309 
logB¨oGroundPªssuªSum
 = 
	`log
(
b¨oPªssuªSum
);

310 
b¨oGroundTem≥øtuªSˇÀ
 = ((
öt32_t
)
b¨oTem≥øtuª
 + 27315) * (2 * 29.271267f);

311 
ˇlibøtögB
--;

316 
B¨oA…
 = ( 
logB¨oGroundPªssuªSum
 - 
	`log
(
b¨oPªssuªSum
ËË* 
b¨oGroundTem≥øtuªSˇÀ
;

318 
Æt
.
E°A…
 = (Æt.E°A… * 6 + 
B¨oA…
 ) >> 3;

319 #i‡(
	`deföed
(
VARIOMETER
Ë&& (VARIOMETER !2)Ë|| !deföed(
SUPPRESS_BARO_ALTHOLD
)

321 
öt16_t
 
îr‹16
 = 
	`c⁄°øö
(
A…Hﬁd
 - 
Æt
.
E°A…
, -300, 300);

322 
	`≠∂yDódb™d
(
îr‹16
, 10);

323 
B¨oPID
 = 
	`c⁄°øö
((
c⁄f
.
pid
[
PIDALT
].
P8
 * 
îr‹16
 >>7), -150, +150);

326 
îr‹A…ôudeI
 +
c⁄f
.
pid
[
PIDALT
].
I8
 * 
îr‹16
 >>6;

327 
îr‹A…ôudeI
 = 
	`c⁄°øö
(errorAltitudeI,-30000,30000);

328 
B¨oPID
 +
îr‹A…ôudeI
>>9;

330 
	`≠∂yDódb™d
(
accZ
, 
ACC_Z_DEADBAND
);

332 
öt32_t
 
œ°B¨oA…
;

334 
öt16_t
 
b¨oVñ
 = 
	`mul
((
Æt
.
E°A…
 - 
œ°B¨oA…
Ë, (1000000 / 
UPDATE_INTERVAL
));

336 
œ°B¨oA…
 = 
Æt
.
E°A…
;

338 
b¨oVñ
 = 
	`c⁄°øö
(baroVel, -300, 300);

339 
	`≠∂yDódb™d
(
b¨oVñ
, 10);

342 
vñ
 +
accZ
 * 
ACC_VñSˇÀ
 * 
dTime
;

346 
vñ
 = vñ * 0.985‡+ 
b¨oVñ
 * 0.015f;

349 
Æt
.
v¨io
 = 
vñ
;

350 
	`≠∂yDódb™d
(
Æt
.
v¨io
, 5);

351 
B¨oPID
 -
	`c⁄°øö
(
c⁄f
.
pid
[
PIDALT
].
D8
 * 
Æt
.
v¨io
 >>4, -150, 150);

354 
	}
}

	@IMU.h

1 #i‚de‡
IMU_H_


2 
	#IMU_H_


	)

4 
	#BARO_TAB_SIZE
 21

	)

6 #i‡
BARO


7 
uöt8_t
 
gëE°im©edA…ôude
();

10 
compuãIMU
();

11 
öt32_t
 
mul
(
öt16_t
 
a
, i¡16_à
b
);

	@LCD.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"Aœrms.h
"

7 
	~"EEPROM.h
"

8 
	~"Ouçut.h
"

9 
	~"RX.h
"

10 
	~"Sîül.h
"

11 
	~"Sís‹s.h
"

12 
	~"LCD.h
"

14 
__u8Inc
(* 
v¨
, 
öt16_t
 
öc
);

15 
__s8Inc
(* 
v¨
, 
öt16_t
 
öc
);

16 
__u16Inc
(* 
v¨
, 
öt16_t
 
öc
);

17 
__s16Inc
(* 
v¨
, 
öt16_t
 
öc
);

18 
__nuŒInc
(* 
v¨
, 
öt16_t
 
öc
);

19 
__u8Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

20 
__u16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

21 
__s8BôsFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

22 
__s16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

23 
__uAuxFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
, uöt8_à
aux
);

24 
__uAuxFmt1
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

25 
__uAuxFmt2
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

26 
__uAuxFmt3
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

27 
__uAuxFmt4
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

28 
__upMFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

30 
£rvi˚CheckPLog
();

31 
i2c_˛ór_OLED
();

32 
LCD√xéöe
();

33 
i2c_OLED_DIGOLE_£nd_°rög
(c⁄° *
°rög
);

40 #i‡
deföed
(
LCD_CONF
Ë|| deföed(
LCD_TELEMETRY
Ë|| deföed(
HAS_LCD
)

41 
	glöe1
[17],
	glöe2
[17];

42 
	gãm∂©e7
[7] = " .... ";

43 
	gãm∂©e3
[3] = ". ";

46 #ifde‡
DISPLAY_FONT_DSIZE


47 
uöt8_t
 
	glöe_is_vÆid
 = 0;

49 #i‡–
deföed
(
LOG_PERMANENT
Ë&& deföed(
DISPLAY_MULTILINE
) )

50 
uöt8_t
 
	g r
 = 0;

53 
	#LCD_FLUSH
 { 
	`dñay
(30); }

	)

55 
	$digô10000
(
uöt16_t
 
v
Ë{ '0' + v / 10000;
	}
}

56 
	$digô1000
(
uöt16_t
 
v
Ë{ '0' + v / 1000 - (v/10000Ë* 10;
	}
}

57 
	$digô100
(
uöt16_t
 
v
Ë{ '0' + v / 100 - (v/1000Ë* 10;
	}
}

58 
	$digô10
(
uöt16_t
 
v
Ë{ '0' + v / 10 - (v/100Ë* 10;
	}
}

59 
	$digô1
(
uöt16_t
 
v
Ë{ '0' + v - (v/10Ë* 10;
	}
}

61 #i‡
deföed
(
OLED_I2C_128x64
)

65 
	#OLED_addªss
 0x3C

66 
LINE_FILL_STRING
[] = " ";

67 
CHAR_FORMAT
 = 0;

70 
buf„r
;

71 c⁄° 
uöt8_t
 
PROGMEM
 
LOGO
[] = {

72 0x00, 0x00, 0x02, 0xFE, 0xFE, 0x0E, 0xFC, 0xF8, 0xC0, 0x00, 0xC0, 0xF8, 0xFC, 0x0E, 0xFE, 0xFE,

	)

139 c⁄° 
uöt8_t
 
PROGMEM
 
	gmyF⁄t
[][5] = {

271 
	$i2c_OLED_£nd_cmd
(
uöt8_t
 
comm™d
) {

272 
TWBR
 = ((
F_CPU
 / 400000L) - 16) / 2;

273 
	`i2c_wrôeReg
(
OLED_addªss
, 0x80, (
uöt8_t
)
comm™d
);

274 
	}
}

276 
	$i2c_OLED_£nd_byã
(
uöt8_t
 
vÆ
) {

277 
TWBR
 = ((
F_CPU
 / 400000L) - 16) / 2;

278 
	`i2c_wrôeReg
(
OLED_addªss
, 0x40, (
uöt8_t
)
vÆ
);

279 
	}
}

281 
	$i2c_OLED_öô
(){

282 
	`i2c_OLED_£nd_cmd
(0xae);

283 
	`i2c_OLED_£nd_cmd
(0xa4);

285 
	`dñay
(50);

286 
	`i2c_OLED_£nd_cmd
(0x20);

287 
	`i2c_OLED_£nd_cmd
(0x02);

289 
	`i2c_OLED_£nd_cmd
(0xa1);

291 
	`i2c_OLED_£nd_cmd
(0xC8);

292 
	`i2c_OLED_£nd_cmd
(0xa6);

294 
	`i2c_OLED_£nd_cmd
(0x81);

295 
	`i2c_OLED_£nd_cmd
(0xaf);

301 #ifde‡
DISPLAY_FONT_DSIZE


302 
	`i2c_OLED_£nd_cmd
(0xd6);

303 
	`i2c_OLED_£nd_cmd
(0x01);

308 
	`dñay
(20);

309 
	`i2c_OLED_£nd_cmd
(0xaf);

310 
	`dñay
(20);

311 
	}
}

313 
	$i2c_OLED_£nd_ch¨
(
ascii
){

314 
i
;

315 
i
=0;i<5;i++){

316 
buf„r
 = 
	`pgm_ªad_byã
(&(
myF⁄t
[
ascii
 - 32][
i
]));

317 
buf„r
 ^
CHAR_FORMAT
;

318 
	`i2c_OLED_£nd_byã
(
buf„r
);

320 
	`i2c_OLED_£nd_byã
(
CHAR_FORMAT
);

321 
	}
}

323 
	$i2c_OLED_£nd_°rög
(c⁄° *
°rög
){

324 
i
=0;

325 *
°rög
){

326 
i
=0;i<5;i++){

327 
buf„r
 = 
	`pgm_ªad_byã
(&(
myF⁄t
[(*
°rög
)- 32][
i
]));

328 
buf„r
 ^
CHAR_FORMAT
;

329 
	`i2c_OLED_£nd_byã
(()
buf„r
);

331 
	`i2c_OLED_£nd_byã
(
CHAR_FORMAT
);

332 *
°rög
++;

334 
	}
}

336 #i‚de‡
SUPPRESS_OLED_I2C_128x64LOGO


337 
	$i2c_OLED_£nd_logo
(){

338 
i
,
j
;

339 
	`i2c_OLED_£nd_cmd
(0xa6);

340 
	`i2c_OLED_£nd_cmd
(0xae);

341 
	`i2c_OLED_£nd_cmd
(0x20);

342 
	`i2c_OLED_£nd_cmd
(0x00);

343 
	`i2c_OLED_£nd_cmd
(0xb0);

344 
	`i2c_OLED_£nd_cmd
(0X40);

345 
	`i2c_OLED_£nd_cmd
(0);

346 
	`i2c_OLED_£nd_cmd
(0x10);

347 
uöt16_t
 
k
=0; k<1024; k++) {

348 
buf„r
 = 
	`pgm_ªad_byã
(&(
LOGO
[
k
]));

349 
	`i2c_OLED_£nd_byã
(
buf„r
);

351 
	`i2c_OLED_£nd_cmd
(0x81);

352 
	`i2c_OLED_£nd_cmd
(0x0);

353 
	`i2c_OLED_£nd_cmd
(0xaf);

354 
j
=0; j<2; j++){

355 
i
=0x01; i<0xff; i++){

356 
	`i2c_OLED_£nd_cmd
(0x81);

357 
	`i2c_OLED_£nd_cmd
(
i
);

358 
	`dñay
(1);

360 
i
=0xff; i>0x01; i--){

361 
	`i2c_OLED_£nd_cmd
(0x81);

362 
	`i2c_OLED_£nd_cmd
(
i
);

363 
	`dñay
(1);

366 
	`i2c_OLED_öô
();

367 
	`i2c_˛ór_OLED
();

368 
	}
}

369 #i‡
deföed
 (
OLED_I2C_128x64LOGO_PERMANENT
)

370 
	$i2c_OLED_Put_Logo
(){

371 
i
,
j
;

372 
	`i2c_OLED_£nd_cmd
(0xa6);

373 
	`i2c_OLED_£nd_cmd
(0xae);

374 
	`i2c_OLED_£nd_cmd
(0x20);

375 
	`i2c_OLED_£nd_cmd
(0x00);

376 
	`i2c_OLED_£nd_cmd
(0xb0);

377 
	`i2c_OLED_£nd_cmd
(0X40);

378 
	`i2c_OLED_£nd_cmd
(0);

379 
	`i2c_OLED_£nd_cmd
(0x10);

380 
i
=0; i<1024; i++) {

381 
buf„r
 = 
	`pgm_ªad_byã
(&(
LOGO
[
i
]));

382 
	`i2c_OLED_£nd_byã
(
buf„r
);

384 
	`i2c_OLED_£nd_cmd
(0x81);

385 
	`i2c_OLED_£nd_cmd
(250);

386 
	`i2c_OLED_£nd_cmd
(0xaf);

387 
	}
}

392 
	$i2c_OLED_£t_XY
(
byã
 
cﬁ
, byã 
row
) {

393 
	`i2c_OLED_£nd_cmd
(0xb0+
row
);

394 
	`i2c_OLED_£nd_cmd
(0x00+(8*
cﬁ
&0x0f));

395 
	`i2c_OLED_£nd_cmd
(0x10+((8*
cﬁ
>>4)&0x0f));

396 
	}
}

398 
	$i2c_OLED_£t_löe
(
byã
 
row
) {

399 
	`i2c_OLED_£nd_cmd
(0xb0+
row
);

400 
	`i2c_OLED_£nd_cmd
(0);

401 
	`i2c_OLED_£nd_cmd
(0x10);

402 
	}
}

404 
	$i2c_˛ór_OLED
(){

410 
	`i2c_OLED_£nd_cmd
(0xa6);

411 
	`i2c_OLED_£nd_cmd
(0xae);

412 
	`i2c_OLED_£nd_cmd
(0x20);

413 
	`i2c_OLED_£nd_cmd
(0x00);

414 
	`i2c_OLED_£nd_cmd
(0xb0);

415 
	`i2c_OLED_£nd_cmd
(0X40);

416 
	`i2c_OLED_£nd_cmd
(0);

417 
	`i2c_OLED_£nd_cmd
(0x10);

418 
uöt16_t
 
i
=0; i<1024; i++) {

419 
	`i2c_OLED_£nd_byã
(0);

421 
	`i2c_OLED_£nd_cmd
(0x81);

422 
	`i2c_OLED_£nd_cmd
(200);

423 
	`i2c_OLED_£nd_cmd
(0xaf);

424 
	}
}

428 #i‡
deföed
(
LCD_ETPP
)

429 
	#LCD_ETPP_ADDRESS
 0x3B

	)

434 
	$i2c_ETPP_öô
 () {

435 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

436 
	`i2c_wrôe
(0x00);

437 
	`i2c_wrôe
(0x24);

438 
	`i2c_wrôe
(0x0C);

439 
	`i2c_wrôe
(0x06);

440 
	`LCD˛ór
();

441 
	}
}

442 
	$i2c_ETPP_£nd_cmd
 (
byã
 
c
) {

443 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

444 
	`i2c_wrôe
(0x00);

445 
	`i2c_wrôe
(
c
);

446 
	}
}

447 
	$i2c_ETPP_£nd_ch¨
 (
c
) {

448 i‡(
c
 > 0x0f) c |= 0x80;

449 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

450 
	`i2c_wrôe
(0x40);

451 
	`i2c_wrôe
(
c
);

452 
	}
}

454 
	$i2c_ETPP_£t_curs‹
 (
byã
 
addr
) {

455 
	`i2c_ETPP_£nd_cmd
(0x80 | 
addr
);

456 
	}
}

457 
	$i2c_ETPP_£t_curs‹
 (
byã
 
cﬁ
, byã 
row
) {

458 
row
 = 
	`mö
(row,1);

459 
cﬁ
 = 
	`mö
(col,15);

460 
byã
 
addr
 = 
cﬁ
 + 
row
 * 0x40;

461 
	`i2c_ETPP_£t_curs‹
(
addr
);

462 
	}
}

463 
	$i2c_ETPP_¸óã_ch¨
 (
byã
 
idx
, 
uöt8_t
* 
¨øy
) {

464 
	`i2c_ETPP_£nd_cmd
(0x80);

465 
	`i2c_ETPP_£nd_cmd
(0x40 | 
	`byã
(
idx
 * 8));

466 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

467 
	`i2c_wrôe
(0x40);

468 
byã
 
i
 = 0; i<8; i++Ë{
	`i2c_wrôe
(*
¨øy
);árray++;}

469 
	}
}

471 
boﬁón
 
	gch¨sInôülized
;

472 
	$ETPP_b¨Gøph
(
byã
 
num
, 
vÆ
) {

473 i‡(!
ch¨sInôülized
) {

474 
ch¨sInôülized
 = 
åue
;

476 
byã
 
b¨s
[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,};

477 
byã
 
Àss
[8] = {0x00, 0x04, 0x0C, 0x1C, 0x0C, 0x04, 0x00, 0x15,};

478 
byã
 
gπ
 [8] = {0x00, 0x04, 0x06, 0x07, 0x06, 0x04, 0x00, 0x15,};

480 
byã
 
∑âîn
 = 0x10;

481 
öt8_t
 
i
 = 0; i <= 5; i++) {

482 
öt8_t
 
j
 = 0; j < 7; j++) {

483 
b¨s
[
j
] = 
∑âîn
;

485 
	`i2c_ETPP_¸óã_ch¨
(
i
, 
b¨s
);

486 
∑âîn
 >>= 1;

488 
	`i2c_ETPP_¸óã_ch¨
(6, 
Àss
);

489 
	`i2c_ETPP_¸óã_ch¨
(7, 
gπ
);

492 
b¨
[16];

493 
öt8_t
 
i
 = 0; i < 
num
; i++Ë{
b¨
[i] = 5;}

495 i‡(
vÆ
 < -100 || vÆ > 100Ë{
b¨
[0] = 6; b¨[
num
] = 7;}

496 i‡(
vÆ
 < 0Ë{
b¨
[0] = 6;}

497 i‡(
vÆ
 >100Ë{
b¨
[3] = 7;}

498 {
b¨
[
vÆ
/(100/
num
)] = (val%(100/num))/5;}

500 
öt8_t
 
i
 = 0; i < 
num
; i++) {

501 
	`i2c_ETPP_£nd_ch¨
(
b¨
[
i
]);

503 
	}
}

506 #i‡
deföed
(
LCD_LCD03
)

507 
	#LCD_LCD03_ADDRESS
 0x63

	)

511 
	$i2c_LCD03_öô
 () {

512 
	`i2c_ªp_°¨t
(
LCD_LCD03_ADDRESS
<<1);

513 
	`i2c_wrôe
(0x00);

514 
	`i2c_wrôe
(04);

515 
	`i2c_wrôe
(12);

516 
	`i2c_wrôe
(19);

517 
	}
}

518 
	$i2c_LCD03_£nd_cmd
 (
byã
 
c
) {

519 
	`i2c_ªp_°¨t
(
LCD_LCD03_ADDRESS
<<1);

520 
	`i2c_wrôe
(0x00);

521 
	`i2c_wrôe
(
c
);

522 
	}
}

523 
	$i2c_LCD03_£nd_ch¨
 (
c
) {

524 
	`i2c_ªp_°¨t
(
LCD_LCD03_ADDRESS
<<1);

525 
	`i2c_wrôe
(0x00);

526 
	`i2c_wrôe
(
c
);

527 
	}
}

528 
	$i2c_LCD03_£t_curs‹
 (
byã
 
cﬁ
, byã 
row
) {

529 
row
 = 
	`mö
(row,1);

530 
cﬁ
 = 
	`mö
(col,15);

531 
	`i2c_LCD03_£nd_cmd
(03);

532 
	`i2c_LCD03_£nd_cmd
(
row
+1);

533 
	`i2c_LCD03_£nd_cmd
(
cﬁ
+1);

534 
	}
}

537 #i‡
deföed
(
LCD_LCD03S
)

541 
	$£rül_LCD03_öô
 () {

542 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 0x00 );

543 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 04 );

544 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 12 );

545 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 19 );

546 
	}
}

547 
	$£rül_LCD03_£nd_cmd
 (
byã
 
c
) {

548 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 0x00 );

549 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 
c
 );

550 
	}
}

551 
	$£rül_LCD03_£nd_ch¨
 (
c
) {

553 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 
c
 );

554 
	}
}

555 
	$£rül_LCD03_£t_curs‹
 (
byã
 
cﬁ
, byã 
row
) {

556 
row
 = 
	`mö
(row,1);

557 
cﬁ
 = 
	`mö
(col,15);

558 
	`£rül_LCD03_£nd_cmd
(03);

559 
	`£rül_LCD03_£nd_ch¨
(
row
+1);

560 
	`£rül_LCD03_£nd_ch¨
(
cﬁ
+1);

561 
	}
}

564 #i‡
deföed
(
OLED_DIGOLE
)

565 
	#OLED_DIGOLE_ADDRESS
 0x27

569 
	`i2c_OLED_DIGOLE_öô
 (Ë{

	)

570 
i2c_OLED_DIGOLE_£nd_°rög
("CL");

574 
i2c_OLED_DIGOLE_£nd_°rög
("CT");

575 
i2c_wrôe
(100);

589 
	$i2c_OLED_DIGOLE_£nd_byã
 (
byã
 
c
) {

590 
	`i2c_ªp_°¨t
(
OLED_DIGOLE_ADDRESS
<<1);

591 
	`i2c_wrôe
(0x00);

592 
	`i2c_wrôe
(
c
);

593 
	}
}

594 
	$i2c_OLED_DIGOLE_£nd_°rög
(c⁄° *
°rög
){

595 
	`i2c_ªp_°¨t
(
OLED_DIGOLE_ADDRESS
<<1);

596 
	`i2c_wrôe
(0x00);

597 *
°rög
){

598 
	`i2c_wrôe
(*
°rög
);

599 *
°rög
++;

602 
	}
}

603 
	$i2c_OLED_DIGOLE_¥ötSåög
(c⁄° *
°rög
){

608 
	`i2c_OLED_DIGOLE_£nd_°rög
("TT");

609 *
°rög
){

610 
	`i2c_wrôe
(*
°rög
);

611 *
°rög
++;

613 
	`i2c_wrôe
(0x00);

615 
	}
}

616 
	$i2c_OLED_DIGOLE_¥ötCh¨
(
c
){

617 
	`i2c_ªp_°¨t
(
OLED_DIGOLE_ADDRESS
<<1);

618 
	`i2c_wrôe
(0x00);

619 
	`i2c_wrôe
('T');

620 
	`i2c_wrôe
('T');

621 
	`i2c_wrôe
(
c
);

622 
	`i2c_wrôe
(0x00);

624 
	}
}

625 
	$i2c_OLED_DIGOLE_˛ór
() {

626 
	`i2c_OLED_DIGOLE_£nd_°rög
("CLSF");

627 #ifde‡
DISPLAY_FONT_DSIZE


628 
	`i2c_wrôe
(0);

630 
	`i2c_wrôe
(10);

632 
	}
}

635 
	$LCD¥öt
(
uöt8_t
 
i
) {

636 #ifde‡
DISPLAY_FONT_DSIZE


637 i‡(! 
löe_is_vÆid
) ;

639 #i‡
	`deföed
(
LCD_SERIAL3W
)

642 
	#BITDELAY
 102

	)

643 
LCDPIN_OFF
;

644 
	`dñayMi¸o£c⁄ds
(
BITDELAY
);

645 
uöt8_t
 
mask
 = 0x01; mask; mask <<= 1) {

646 i‡(
i
 & 
mask
Ë{
LCDPIN_ON
;} {
LCDPIN_OFF
;}

647 
	`dñayMi¸o£c⁄ds
(
BITDELAY
);

649 
LCDPIN_ON


650 
	`dñayMi¸o£c⁄ds
(
BITDELAY
);

651 #ñi‡
	`deföed
(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
Ë|| deföed(
LCD_TTY
)

652 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 
i
 );

653 #ñi‡
	`deföed
(
LCD_ETPP
)

654 
	`i2c_ETPP_£nd_ch¨
(
i
);

655 #ñi‡
	`deföed
(
LCD_LCD03
)

656 
	`i2c_LCD03_£nd_ch¨
(
i
);

657 #ñi‡
	`deföed
(
LCD_LCD03S
)

658 
	`£rül_LCD03_£nd_ch¨
(
i
);

659 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

660 
	`i2c_OLED_£nd_ch¨
(
i
);

661 #ñi‡
	`deföed
(
OLED_DIGOLE
)

662 
	`i2c_OLED_DIGOLE_¥ötCh¨
(
i
);

664 
	}
}

666 
	$LCD¥ötCh¨
(c⁄° *
s
) {

667 #ifde‡
OLED_DIGOLE


668 #ifde‡
DISPLAY_FONT_DSIZE


669 i‡(! 
löe_is_vÆid
) ;

671 
	`i2c_OLED_DIGOLE_¥ötSåög
(
s
);

673 *
s
Ë{
	`LCD¥öt
(*s++);}

675 
	}
}

677 
	$LCD¸lf
() {

678 #i‡–
	`deföed
(
OLED_I2C_128x64
)|| deföed(
LCD_VT100
Ë|| deföed(
OLED_DIGOLE
) )

681 
	`LCD¥ötCh¨
("\r\n");

683 
	}
}

684 
	$LCD˛ór
() {

685 #i‡
	`deföed
(
LCD_SERIAL3W
)

686 
	`LCD¥öt
(0xFE);LCD¥öt(0x01);
	`dñay
(10);LCDprint(0xFE);LCDprint(0x02);delay(10);

687 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

688 
	`LCD¥öt
(0x0c);

689 #ñi‡
	`deföed
(
LCD_VT100
)

690 
	`LCD¸lf
();

691 
	`LCD¥öt
(0x1B); LCD¥öt(0x5B); 
	`LCD¥ötCh¨
("2J");

692 
	`LCD¸lf
();

693 
	`LCD¥öt
(0x1B); LCD¥öt(0x5B); 
	`LCD¥ötCh¨
("1;1H");

694 #ñi‡
	`deföed
(
LCD_TTY
)

695 
	`LCD¸lf
();

696 #ñi‡
	`deföed
(
LCD_ETPP
)

697 
	`i2c_ETPP_£nd_cmd
(0x01);

698 
byã
 
i
 = 0; i<80; i++Ë
	`i2c_ETPP_£nd_ch¨
(' ');

699 #ñi‡
	`deföed
(
LCD_LCD03
)

700 
	`i2c_LCD03_£nd_cmd
(12);

701 #ñi‡
	`deföed
(
LCD_LCD03S
)

702 
	`£rül_LCD03_£nd_cmd
(12);

703 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

704 
	`i2c_˛ór_OLED
();

705 #ñi‡
	`deföed
(
OLED_DIGOLE
)

706 
	`i2c_OLED_DIGOLE_˛ór
();

708 #i‡–
	`deföed
(
LOG_PERMANENT
Ë&& deföed(
DISPLAY_MULTILINE
) )

709 
 r
 = 0;

711 
	}
}

713 
	$LCD£tLöe
(
byã
 
löe
) {

714 #ifde‡
DISPLAY_FONT_DSIZE


715 i‡(
löe
 >=1 &&Üöê<(
MULTILINE_PRE
+
MULTILINE_POST
)) {

716 
löe_is_vÆid
 = 1;

718 
löe_is_vÆid
 = 0;

722 #i‡
	`deföed
(
LCD_SERIAL3W
)

723 i‡(
löe
==1Ë{
	`LCD¥öt
(0xFE);LCDprint(128);} {LCDprint(0xFE);LCDprint(192);}

724 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

725 
	`LCD¸lf
(); 
	`LCD¥öt
(0x„);LCD¥öt('L');LCD¥öt(
löe
);

726 #ñi‡
	`deföed
(
LCD_VT100
)

727 #i‚de‡
DEBUG


728 i‡(
löe
<1 ||Üöe>(
MULTILINE_PRE
+
MULTILINE_POST
))Üine = 1;

730 
	`LCD¸lf
();

731 
	`LCD¥öt
(0x1b); LCDprint(0x5b);

732 
	`LCD¥öt
–
	`digô10
(
löe
) );

733 
	`LCD¥öt
–
	`digô1
(
löe
) );

734 
	`LCD¥ötCh¨
(";1H");

735 
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("2K");

736 #ñi‡
	`deföed
(
LCD_TTY
)

737 
	`LCD¸lf
();

738 #ñi‡
	`deföed
(
LCD_ETPP
)

739 
	`i2c_ETPP_£t_curs‹
(0,
löe
-1);

740 #ñi‡
	`deföed
(
LCD_LCD03
)

741 
	`i2c_LCD03_£t_curs‹
(0,
löe
-1);

742 #ñi‡
	`deföed
(
LCD_LCD03S
)

743 
	`£rül_LCD03_£t_curs‹
(0,
löe
-1);

744 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

748 
	`i2c_OLED_£t_löe
(
löe
-1);

749 #ñi‡
	`deföed
(
OLED_DIGOLE
)

750 
	`i2c_OLED_DIGOLE_£nd_°rög
("TP"); 
	`i2c_wrôe
(0);i2c_wrôe(
löe
-1);

752 
	}
}

753 #i‡
deföed
(
LCD_VT100
)

754 
	$LCD©åibuãsBﬁd
(Ë{
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("1m");
	}
}

755 
	$LCD©åibuãsRevî£
(Ë{
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("7m");
	}
}

756 
	$LCD©åibuãsOff
(Ë{
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("0m");
	}
}

757 
	$LCDÆ¨mAndRevî£
(Ë{
	`LCD©åibuãsRevî£
(); i‡(
f
.
ARMED
Ë{ 
	`LCD¥öt
(0x07); }; 
	}
}

758 #ñi‡
deföed
(
OLED_I2C_128x64
)

759 
	$LCD©åibuãsBﬁd
(Ë{ 
	}
}

760 
	$LCD©åibuãsRevî£
(Ë{
CHAR_FORMAT
 = 0b01111111; 
	}
}

761 
	$LCD©åibuãsOff
(Ë{
CHAR_FORMAT
 = 0; 
	}
}

762 
	$LCDÆ¨mAndRevî£
(Ë{
	`LCD©åibuãsRevî£
(); 
	}
}

764 
	$LCD©åibuãsBﬁd
(Ë{
	}
}

765 
	$LCD©åibuãsRevî£
(Ë{
	}
}

766 
	$LCD©åibuãsOff
(Ë{
	}
}

767 
	$LCDÆ¨mAndRevî£
(Ë{
	}
}

770 
	$LCD¥ötI¡16
(
öt16_t
 
v
) {

771 
uöt16_t
 
unô
;

772 
löe
[7];

773 i‡(
v
 < 0 ) {

774 
unô
 = -
v
;

775 
löe
[0] = '-';

777 
unô
 = 
v
;

778 
löe
[0] = ' ';

780 
löe
[1] = 
	`digô10000
(
unô
);

781 
löe
[2] = 
	`digô1000
(
unô
);

782 
löe
[3] = 
	`digô100
(
unô
);

783 
löe
[4] = 
	`digô10
(
unô
);

784 
löe
[5] = 
	`digô1
(
unô
);

785 
löe
[6] = 0;

786 
	`LCD¥ötCh¨
(
löe
);

787 
	}
}

788 
	$lcd¥öt_uöt32
(
uöt32_t
 
v
) {

789 
löe
[14] = "-.---.---.---";

791 
löe
[0] = '0' + 
v
 / 1000000000;

792 
löe
[2] = '0' + 
v
 / 100000000 - (v/1000000000) * 10;

793 
löe
[3] = '0' + 
v
 / 10000000 - (v/100000000) * 10;

794 
löe
[4] = '0' + 
v
 / 1000000 - (v/10000000) * 10;

795 
löe
[6] = '0' + 
v
 / 100000 - (v/1000000) * 10;

796 
löe
[7] = '0' + 
v
 / 10000 - (v/100000) * 10;

797 
löe
[8] = '0' + 
v
 / 1000 - (v/10000) * 10;

798 
löe
[10] = '0' + 
v
 / 100 - (v/1000) * 10;

799 
löe
[11] = '0' + 
v
 / 10 - (v/100) * 10;

800 
löe
[12] = '0' + 
v
 - (v/10) * 10;

801 
	`LCD¥ötCh¨
(
löe
);

802 
	}
}

804 
	$öôLCD
() {

805 
	`blökLED
(20,30,1);

806 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

807 #i‡
	`deföed
(
LCD_SERIAL3W
)

808 
	`SîülEnd
(0);

810 
PINMODE_LCD
;

811 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

815 
	`LCD¥öt
(0xFE);LCDprint('R');

816 #ñi‡
	`deföed
(
LCD_VT100
)

818 #ñi‡
	`deföed
(
LCD_TTY
)

820 #ñi‡
	`deföed
(
LCD_ETPP
)

822 
	`i2c_ETPP_öô
();

823 #ñi‡
	`deföed
(
LCD_LCD03
)

826 
	`i2c_LCD03_öô
();

827 #ñi‡
	`deföed
(
LCD_LCD03S
)

830 
	`£rül_LCD03_öô
();

831 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

832 
	`i2c_OLED_öô
();

833 #i‚de‡
SUPPRESS_OLED_I2C_128x64LOGO


834 
	`i2c_OLED_£nd_logo
();

835 #i‡
	`deföed
 (
OLED_I2C_128x64LOGO_PERMANENT
)

836 
	`i2c_OLED_Put_Logo
();

839 #ñi‡
	`deföed
(
OLED_DIGOLE
)

840 
	`i2c_OLED_DIGOLE_öô
();

842 #i‚de‡
OLED_I2C_128x64LOGO_PERMANENT


843 
	`LCD˛ór
();

844 
	`°r˝y_P
(
löe1
,
	`PSTR
–
BOARD_NAME
 ));

846 
löe1
[12] = 
	`digô100
(
VERSION
);

847 
löe1
[14] = 
	`digô10
(
VERSION
);

848 
löe1
[15] = 
	`digô1
(
VERSION
);

849 
	`LCD©åibuãsBﬁd
();

850 
	`LCD£tLöe
(1); 
	`LCD¥ötCh¨
(
löe1
);

851 
	`°r˝y_P
(
löe2
,
	`PSTR
(" Unknown Modell"));

852 #i‡
	`deföed
(
TRI
)

853 
	`°r˝y_P
(
löe2
,
	`PSTR
(" TRICopter"));

854 #ñi‡
	`deföed
(
QUADP
)

855 
	`°r˝y_P
(
löe2
,
	`PSTR
(" QUAD-P"));

856 #ñi‡
	`deföed
(
QUADX
)

857 
	`°r˝y_P
(
löe2
,
	`PSTR
(" QUAD-X"));

858 #ñi‡
	`deföed
(
BI
)

859 
	`°r˝y_P
(
löe2
,
	`PSTR
(" BICopter"));

860 #ñi‡
	`deföed
(
Y6
)

861 
	`°r˝y_P
(
löe2
,
	`PSTR
(" Y6"));

862 #ñi‡
	`deföed
(
HEX6
)

863 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HEX6"));

864 #ñi‡
	`deföed
(
FLYING_WING
)

865 
	`°r˝y_P
(
löe2
,
	`PSTR
(" FLYING_WING"));

866 #ñi‡
	`deföed
(
Y4
)

867 
	`°r˝y_P
(
löe2
,
	`PSTR
(" Y4"));

868 #ñi‡
	`deföed
(
HEX6X
)

869 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HEX6-X"));

870 #ñi‡
	`deföed
(
HEX6H
)

871 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HEX6-H"));

872 #ñi‡
	`deföed
(
OCTOX8
)

873 
	`°r˝y_P
(
löe2
,
	`PSTR
(" OCTOX8"));

874 #ñi‡
	`deföed
(
OCTOFLATP
)

875 
	`°r˝y_P
(
löe2
,
	`PSTR
(" OCTOFLAT-P"));

876 #ñi‡
	`deföed
(
OCTOFLATX
)

877 
	`°r˝y_P
(
löe2
,
	`PSTR
(" OCTOFLAT-X"));

878 #ñi‡
	`deföed
 (
AIRPLANE
)

879 
	`°r˝y_P
(
löe2
,
	`PSTR
(" AIRPLANE"));

880 #ñi‡
	`deföed
 (
HELI_120_CCPM
)

881 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HELI_120_CCPM"));

882 #ñi‡
	`deföed
 (
HELI_90_DEG
)

883 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HELI_90_DEG"));

884 #ñi‡
	`deföed
(
VTAIL4
)

885 
	`°r˝y_P
(
löe2
,
	`PSTR
(" VTAIL Quad"));

888 
	`LCD£tLöe
(2); 
	`LCD¥ötCh¨
(
löe2
);

889 
	`LCD©åibuãsOff
();

890 
	`dñay
(2500);

892 #i‡
	`deföed
(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
)

894 
	`LCD˛ór
();

896 #i‡
	`deföed
(
OLED_I2C_128x64
Ë&& !(deföed(
OLED_I2C_128x64LOGO_PERMANENT
)Ë&& deföed(
NEW_OLED_FONT
Ë&& !(deföed(
LCD_TELEMETRY
))

899 
	`LCD£tLöe
(4); 
	`LCD¥ötCh¨
("To ENTER CONFIG ");

900 
	`LCD£tLöe
(5); 
	`LCD¥ötCh¨
("YAW RIGHT & PITCH FWD");

901 
	`LCD£tLöe
(7); 
	`LCD¥ötCh¨
("To SAVE CONFIG ");

902 
	`LCD£tLöe
(8); 
	`LCD¥ötCh¨
("YAW LEFT & PITCH FWD ");

909 #ifde‡
LCD_TELEMETRY_STEP


911 
	`LCD˛ór
();

912 
ãÀmëry
 = 
ãÀmërySãpSequí˚
[
ãÀmërySãpIndex
];

914 
	}
}

919 #ifde‡
LCD_CONF


920 
uöt8_t
 
	gª£t_to_deÁu…s
;

922 (*
	tf‹m©ãr_func_±r
)(*, 
	tuöt8_t
, uint8_t);

923 (*
	töc_func_±r
)(*, 
	töt16_t
);

925  
	slcd_ty≥_desc_t
 {

926 
f‹m©ãr_func_±r
 
fmt
;

927 
öc_func_±r
 
öc
;

930 
lcd_ty≥_desc_t
 
LTU8
 = {&
__u8Fmt
, &
__u8Inc
};

931 
lcd_ty≥_desc_t
 
	gLTS8
 = {&
__s8BôsFmt
, &
__s8Inc
};

932 
lcd_ty≥_desc_t
 
	gLTU16
 = {&
__u16Fmt
, &
__u16Inc
};

933 
lcd_ty≥_desc_t
 
	gLTS16
 = {&
__s16Fmt
, &
__s16Inc
};

934 
lcd_ty≥_desc_t
 
	gLPMM
 = {&
__upMFmt
, &
__nuŒInc
};

936 
lcd_ty≥_desc_t
 
	gLAUX1
 = {&
__uAuxFmt1
, &
__u16Inc
};

937 
lcd_ty≥_desc_t
 
	gLAUX2
 = {&
__uAuxFmt2
, &
__u16Inc
};

938 
lcd_ty≥_desc_t
 
	gLAUX3
 = {&
__uAuxFmt3
, &
__u16Inc
};

939 
lcd_ty≥_desc_t
 
	gLAUX4
 = {&
__uAuxFmt4
, &
__u16Inc
};

941  
	slcd_∑øm_def_t
 {

942 
lcd_ty≥_desc_t
 * 
	mty≥
;

943 
uöt8_t
 
	mdecimÆ
;

944 
uöt8_t
 
	mmu…ùlõr
;

945 
uöt16_t
 
	mö¸emít
;

958 
lcd_∑øm_def_t
 
	g__P
 = {&
LTU8
, 1, 1, 1};

959 
lcd_∑øm_def_t
 
	g__I
 = {&
LTU8
, 3, 1, 1};

960 
lcd_∑øm_def_t
 
	g__D
 = {&
LTU8
, 0, 1, 1};

961 
lcd_∑øm_def_t
 
	g__RC
 = {&
LTU8
, 2, 1, 1};

962 
lcd_∑øm_def_t
 
	g__PM
 = {&
LPMM
, 1, 1, 0};

964 
lcd_∑øm_def_t
 
	g__PT
 = {&
LTU8
, 0, 1, 1};

965 
lcd_∑øm_def_t
 
	g__VB
 = {&
LTU8
, 1, 1, 0};

966 
lcd_∑øm_def_t
 
	g__L
 = {&
LTU8
, 0, 1, 0};

967 
lcd_∑øm_def_t
 
	g__FS
 = {&
LTU8
, 1, 1, 0};

968 
lcd_∑øm_def_t
 
	g__SE
 = {&
LTU16
, 0, 1, 10};

969 
lcd_∑øm_def_t
 
	g__SE1
 = {&
LTU16
, 0, 1, 1};

970 
lcd_∑øm_def_t
 
	g__ST
 = {&
LTS16
, 0, 1, 10};

971 
lcd_∑øm_def_t
 
	g__AUX1
 = {&
LAUX1
, 0, 1, 1};

972 
lcd_∑øm_def_t
 
	g__AUX2
 = {&
LAUX2
, 0, 1, 8};

973 
lcd_∑øm_def_t
 
	g__AUX3
 = {&
LAUX3
, 0, 1, 64};

974 
lcd_∑øm_def_t
 
	g__AUX4
 = {&
LAUX4
, 0, 1, 512};

975 
lcd_∑øm_def_t
 
	g__BITS
 = {&
LTS8
, 0, 1, 1};

979 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt01
 [] = "Pit&Roll P";

980 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt02
 [] = "Roll P";

981 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt03
 [] = "Roll I";

982 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt04
 [] = "Roll D";

983 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt05
 [] = "Pitch P";

984 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt06
 [] = "Pitch I";

985 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt07
 [] = "Pitch D";

986 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt08
 [] = "Yaw P";

987 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt09
 [] = "Yaw I";

988 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt10
 [] = "Yaw D";

989 #i‡ 
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

990 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt11
 [] = "Alt P";

991 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt12
 [] = "Alt I";

992 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt13
 [] = "Alt D";

993 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt14
 [] = "Vel P";

994 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt15
 [] = "Vel I";

995 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt16
 [] = "Vel D";

997 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt17
 [] = "Ang/Hor P";

998 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt18
 [] = "Ang/Hor I";

999 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt188
[] = "Ang/Hor D";

1000 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt19
 [] = "Mag P";

1001 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt20
 [] = "RC Rate ";

1002 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt21
 [] = "RC Expo ";

1003 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt20t
 [] = "Thrott Mid";

1004 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt21t
 [] = "ThrottExpo";

1005 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt22
 [] = "P&R Rate ";

1006 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt23
 [] = "Yaw Rate ";

1007 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt24
 [] = "Thrott PID";

1008 #ifde‡
LOG_VALUES


1009 #i‡(
LOG_VALUES
 >= 3)

1010 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt25
 [] = "pmeter m0";

1011 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt26
 [] = "pmeter m1";

1012 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt27
 [] = "pmeter m2";

1013 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt28
 [] = "pmeter m3";

1014 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt29
 [] = "pmeter m4";

1015 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt30
 [] = "pmeter m5";

1016 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt31
 [] = "pmeter m6";

1017 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt32
 [] = "pmeter m7";

1020 #ifde‡
FLYING_WING


1021 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt36
 [] = "SERvTRIM1";

1022 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt37
 [] = "SERvTRIM2";

1024 #ifde‡
TRI


1025 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt38
 [] = "SERvTRIMy";

1026 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt39
 [] = "SERvINVy";

1027 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt152
 [] = "SERvMINy";

1028 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt153
 [] = "SERvMAXy";

1035 #i‡
deföed
(
LCD_CONF_AUX
)

1036 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt41
 [] = "AUXángle ";

1037 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt42
 [] = "AUX horizn";

1038 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt43
 [] = "AUX baro ";

1039 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt44
 [] = "AUX mag ";

1040 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt45
 [] = "AUX camstb";

1041 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt46
 [] = "AUX camtrg";

1042 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt47
 [] = "AUXárm ";

1043 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt48
 [] = "AUX gpshom";

1044 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt49
 [] = "AUX gpshld";

1045 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt50
 [] = "AUXÖassth";

1046 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt51
 [] = "AUX headfr";

1047 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt52
 [] = "AUX buzzer";

1048 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt53
 [] = "AUX vario ";

1049 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt54
 [] = "AUX calib ";

1050 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt55
 [] = "AUX govern";

1051 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt56
 [] = "AUX osd ";

1054 #ifde‡
HELI_120_CCPM


1055 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt73
 [] = "SERvTRIMn";

1056 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt74
 [] = "SERvTRIMl";

1057 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt75
 [] = "SERvTRIMy";

1058 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt76
 [] = "SERvTRIMr";

1059 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt140
 [] = "SERvINVn";

1060 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt141
 [] = "SERvINVl";

1061 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt142
 [] = "SERvINVy";

1062 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt143
 [] = "SERvINVr";

1064 #ifde‡
GYRO_SMOOTHING


1065 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt80
 [] = "GSMOOTH R ";

1066 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt81
 [] = "GSMOOTH P ";

1067 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt82
 [] = "GSMOOTH Y ";

1069 #ifde‡
AIRPLANE


1070 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt83
 [] = "SERVoMID3";

1071 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt84
 [] = "SERVoMID4";

1072 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt85
 [] = "SERVoMID5";

1073 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt86
 [] = "SERVoMID6";

1074 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt87
 [] = "SERVoMID7";

1076 #i‡
GPS


1077 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt91
 [] = "GPS Pos. P";

1078 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt92
 [] = "GPS Pos. I";

1079 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt93
 [] = "Pos Rate P";

1080 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt94
 [] = "Pos Rate I";

1081 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt95
 [] = "Pos Rate D";

1082 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt96
 [] = "NAV Rate P";

1083 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt97
 [] = "NAV Rate I";

1084 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt98
 [] = "NAV Rate D";

1086 #i‡
deföed
 (
FAILSAFE
)

1087 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt101
 [] = "FailThrot";

1089 #ifde‡
VBAT


1090 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt35
 [] = "batt volt ";

1091 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt102
 [] = "VBAT SCALE";

1092 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt103
 [] = "BattWarn 1";

1093 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt104
 [] = "BattWarn 2";

1094 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt106
 [] = "BattW Crit";

1097 #ifde‡
POWERMETER


1098 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt33
 [] = "pmeterSum";

1099 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt34
 [] = "pAlarm /50";

1100 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt111
 [] = "PMsENSOR0";

1101 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt114
 [] = "PM INT2MA ";

1105 #ifde‡
MMGYRO


1106 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt121
 [] = "MMGYRO ";

1108 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt131
 [] = "MINTHROTL";

1109 #i‡
deföed
(
ARMEDTIMEWARNING
)

1110 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt132
 [] = "ArmdTWarn";

1112 #ifde‡
GOVERNOR_P


1113 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt133
 [] = "Govern P";

1114 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt134
 [] = "Govern D";

1115 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt135
 [] = "GovernRpm";

1117 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1118 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt150
 [] = "writeCset";

1120 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt151
 [] = "Reset (7)";

1121 #ifde‡
YAW_COLL_PRECOMP


1122 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt155
 [] = "yawPrcomp";

1123 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt156
 [] = "yawPrDead";

1127 
PROGMEM
 c⁄° * c⁄° 
	glcd_∑øm_±r_èbÀ
 [] = {

1128 &
lcd_∑øm_ãxt01
, &
c⁄f
.
pid
[
ROLL
].
P8
, &
__P
,

1129 &
lcd_∑øm_ãxt02
, &
c⁄f
.
pid
[
ROLL
].
P8
, &
__P
,

1130 &
lcd_∑øm_ãxt03
, &
c⁄f
.
pid
[
ROLL
].
I8
, &
__I
,

1131 &
lcd_∑øm_ãxt04
, &
c⁄f
.
pid
[
ROLL
].
D8
, &
__D
,

1132 &
lcd_∑øm_ãxt05
, &
c⁄f
.
pid
[
PITCH
].
P8
, &
__P
,

1133 &
lcd_∑øm_ãxt06
, &
c⁄f
.
pid
[
PITCH
].
I8
, &
__I
,

1134 &
lcd_∑øm_ãxt07
, &
c⁄f
.
pid
[
PITCH
].
D8
, &
__D
,

1135 &
lcd_∑øm_ãxt08
, &
c⁄f
.
pid
[
YAW
].
P8
, &
__P
,

1136 &
lcd_∑øm_ãxt09
, &
c⁄f
.
pid
[
YAW
].
I8
, &
__I
,

1137 #i‡(!(
PID_CONTROLLER
 =1)Ë|| (!
deföed
(
COPTER_WITH_SERVO
))

1138 &
lcd_∑øm_ãxt10
, &
c⁄f
.
pid
[
YAW
].
D8
, &
__D
,

1140 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

1141 &
lcd_∑øm_ãxt11
, &
c⁄f
.
pid
[
PIDALT
].
P8
, &
__P
,

1142 &
lcd_∑øm_ãxt12
, &
c⁄f
.
pid
[
PIDALT
].
I8
, &
__I
,

1143 &
lcd_∑øm_ãxt13
, &
c⁄f
.
pid
[
PIDALT
].
D8
, &
__D
,

1144 &
lcd_∑øm_ãxt14
, &
c⁄f
.
pid
[
PIDVEL
].
P8
, &
__P
,

1145 &
lcd_∑øm_ãxt15
, &
c⁄f
.
pid
[
PIDVEL
].
I8
, &
__I
,

1146 &
lcd_∑øm_ãxt16
, &
c⁄f
.
pid
[
PIDVEL
].
D8
, &
__D
,

1148 &
lcd_∑øm_ãxt17
, &
c⁄f
.
pid
[
PIDLEVEL
].
P8
, &
__P
,

1149 &
lcd_∑øm_ãxt18
, &
c⁄f
.
pid
[
PIDLEVEL
].
I8
, &
__I
,

1150 &
lcd_∑øm_ãxt188
, &
c⁄f
.
pid
[
PIDLEVEL
].
D8
, &
__D
,

1151 #i‡
MAG


1152 &
lcd_∑øm_ãxt19
, &
c⁄f
.
pid
[
PIDMAG
].
P8
, &
__P
,

1154 &
lcd_∑øm_ãxt20t
, &
c⁄f
.
thrMid8
, &
__RC
,

1155 &
lcd_∑øm_ãxt21t
, &
c⁄f
.
thrExpo8
, &
__RC
,

1156 &
lcd_∑øm_ãxt20
, &
c⁄f
.
rcR©e8
, &
__RC
,

1157 &
lcd_∑øm_ãxt21
, &
c⁄f
.
rcExpo8
, &
__RC
,

1158 &
lcd_∑øm_ãxt22
, &
c⁄f
.
rﬁlPôchR©e
, &
__RC
,

1159 &
lcd_∑øm_ãxt23
, &
c⁄f
.
yawR©e
, &
__RC
,

1160 &
lcd_∑øm_ãxt24
, &
c⁄f
.
dynThrPID
, &
__RC
,

1161 #i‡
GPS


1162 &
lcd_∑øm_ãxt91
, &
c⁄f
.
pid
[
PIDPOS
].
P8
 , &
__RC
,

1163 &
lcd_∑øm_ãxt92
, &
c⁄f
.
pid
[
PIDPOS
].
I8
 , &
__I
,

1164 &
lcd_∑øm_ãxt93
, &
c⁄f
.
pid
[
PIDPOSR
].
P8
, &
__P
,

1165 &
lcd_∑øm_ãxt94
, &
c⁄f
.
pid
[
PIDPOSR
].
I8
, &
__I
,

1166 &
lcd_∑øm_ãxt95
, &
c⁄f
.
pid
[
PIDPOSR
].
D8
, &
__I
,

1167 &
lcd_∑øm_ãxt96
, &
c⁄f
.
pid
[
PIDNAVR
].
P8
, &
__P
,

1168 &
lcd_∑øm_ãxt97
, &
c⁄f
.
pid
[
PIDNAVR
].
I8
, &
__RC
,

1169 &
lcd_∑øm_ãxt98
, &
c⁄f
.
pid
[
PIDNAVR
].
D8
, &
__I
,

1171 #ifde‡
LCD_CONF_AUX


1172 #i‡
ACC


1173 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX1
,

1174 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1175 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX2
,

1177 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX1
,

1178 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1179 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX2
,

1181 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1182 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX3
,

1183 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX4
,

1184 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX3
,

1185 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX4
,

1188 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

1189 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX1
,

1190 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1191 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX2
,

1193 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1194 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX3
,

1195 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX4
,

1198 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX1
,

1199 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1200 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX2
,

1202 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1203 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX3
,

1204 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX4
,

1206 #ifde‡
GIMBAL


1207 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX1
,

1208 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1209 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX2
,

1211 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1212 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX3
,

1213 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX4
,

1215 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX1
,

1216 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1217 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX2
,

1219 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1220 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX3
,

1221 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX4
,

1224 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX1
,

1225 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1226 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX2
,

1228 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1229 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX3
,

1230 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX4
,

1232 #i‡
GPS


1233 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX1
,

1234 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1235 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX2
,

1237 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1238 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX3
,

1239 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX4
,

1241 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX1
,

1242 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1243 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX2
,

1245 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1246 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX3
,

1247 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX4
,

1250 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

1251 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX1
,

1252 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1253 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX2
,

1255 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1256 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX3
,

1257 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX4
,

1260 #i‡
deföed
(
HEADFREE
)

1261 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX1
,

1262 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1263 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX2
,

1265 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1266 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX3
,

1267 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX4
,

1270 #i‡
deföed
(
BUZZER
)

1271 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX1
,

1272 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1273 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX2
,

1275 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1276 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX3
,

1277 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX4
,

1280 #ifde‡
VARIOMETER


1281 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX1
,

1282 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1283 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX2
,

1285 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1286 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX3
,

1287 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX4
,

1290 #ifde‡
INFLIGHT_ACC_CALIBRATION


1291 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX1
,

1292 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1293 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX2
,

1295 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1296 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX3
,

1297 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX4
,

1300 #ifde‡
GOVERNOR_P


1301 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX1
,

1302 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1303 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX2
,

1305 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1306 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX3
,

1307 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX4
,

1310 #ifde‡
OSD_SWITCH


1311 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX1
,

1312 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1313 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX2
,

1315 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1316 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX3
,

1317 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX4
,

1322 #ifde‡
LOG_VALUES


1323 #i‡(
LOG_VALUES
 >= 3)

1324 #i‡(
NUMBER_MOTOR
 > 0)

1325 &
lcd_∑øm_ãxt25
, &
pMëî
[0], &
__PM
,

1327 #i‡(
NUMBER_MOTOR
 > 1)

1328 &
lcd_∑øm_ãxt26
, &
pMëî
[1], &
__PM
,

1330 #i‡(
NUMBER_MOTOR
 > 2)

1331 &
lcd_∑øm_ãxt27
, &
pMëî
[2], &
__PM
,

1333 #i‡(
NUMBER_MOTOR
 > 3)

1334 &
lcd_∑øm_ãxt28
, &
pMëî
[3], &
__PM
,

1336 #i‡(
NUMBER_MOTOR
 > 4)

1337 &
lcd_∑øm_ãxt29
, &
pMëî
[4], &
__PM
,

1339 #i‡(
NUMBER_MOTOR
 > 5)

1340 &
lcd_∑øm_ãxt30
, &
pMëî
[5], &
__PM
,

1342 #i‡(
NUMBER_MOTOR
 > 6)

1343 &
lcd_∑øm_ãxt31
, &
pMëî
[6], &
__PM
,

1345 #i‡(
NUMBER_MOTOR
 > 7)

1346 &
lcd_∑øm_ãxt32
, &
pMëî
[7], &
__PM
,

1350 &
lcd_∑øm_ãxt131
, &
c⁄f
.
möthrŸée
, &
__ST
,

1351 #i‡
deföed
 (
FAILSAFE
)

1352 &
lcd_∑øm_ãxt101
, &
c⁄f
.
Áûß„_thrŸée
, &
__ST
,

1354 #ifde‡
FLYING_WING


1355 &
lcd_∑øm_ãxt36
, &
c⁄f
.
£rvoC⁄f
[3].
middÀ
, &
__SE
,

1356 &
lcd_∑øm_ãxt37
, &
c⁄f
.
£rvoC⁄f
[4].
middÀ
, &
__SE
,

1358 #ifde‡
TRI


1359 &
lcd_∑øm_ãxt152
, &
c⁄f
.
£rvoC⁄f
[5].
mö
, &
__SE
,

1360 &
lcd_∑øm_ãxt153
, &
c⁄f
.
£rvoC⁄f
[5].
max
, &
__SE
,

1361 &
lcd_∑øm_ãxt38
, &
c⁄f
.
£rvoC⁄f
[5].
middÀ
, &
__SE
,

1362 &
lcd_∑øm_ãxt39
, &
c⁄f
.
£rvoC⁄f
[5].
øã
, &
__BITS
,

1364 #ifde‡
HELI_120_CCPM


1365 &
lcd_∑øm_ãxt73
, &
c⁄f
.
£rvoC⁄f
[3].
middÀ
, &
__SE
,

1366 &
lcd_∑øm_ãxt74
, &
c⁄f
.
£rvoC⁄f
[4].
middÀ
, &
__SE
,

1367 &
lcd_∑øm_ãxt76
, &
c⁄f
.
£rvoC⁄f
[6].
middÀ
, &
__SE
,

1368 &
lcd_∑øm_ãxt75
, &
c⁄f
.
£rvoC⁄f
[5].
middÀ
, &
__SE
,

1369 &
lcd_∑øm_ãxt140
, &
c⁄f
.
£rvoC⁄f
[3].
øã
, &
__BITS
,

1370 &
lcd_∑øm_ãxt141
, &
c⁄f
.
£rvoC⁄f
[4].
øã
, &
__BITS
,

1371 &
lcd_∑øm_ãxt143
, &
c⁄f
.
£rvoC⁄f
[6].
øã
, &
__BITS
,

1372 &
lcd_∑øm_ãxt142
, &
c⁄f
.
£rvoC⁄f
[5].
øã
, &
__BITS
,

1374 #ifde‡
GOVERNOR_P


1375 &
lcd_∑øm_ãxt133
, &
c⁄f
.
govîn‹P
, &
__D
,

1376 &
lcd_∑øm_ãxt134
, &
c⁄f
.
govîn‹D
, &
__D
,

1378 #ifde‡
YAW_COLL_PRECOMP


1379 &
lcd_∑øm_ãxt155
, &
c⁄f
.
yawCﬁlPªcomp
, &
__PT
,

1380 &
lcd_∑øm_ãxt156
, &
c⁄f
.
yawCﬁlPªcompDódb™d
, &
__SE
,

1382 #ifde‡
GYRO_SMOOTHING


1383 &
lcd_∑øm_ãxt80
, &
c⁄f
.
SmoŸhög
[0], &
__D
,

1384 &
lcd_∑øm_ãxt81
, &
c⁄f
.
SmoŸhög
[1], &
__D
,

1385 &
lcd_∑øm_ãxt82
, &
c⁄f
.
SmoŸhög
[2], &
__D
,

1387 #ifde‡
AIRPLANE


1388 &
lcd_∑øm_ãxt83
, &
c⁄f
.
£rvoC⁄f
[3].
middÀ
, &
__SE
,

1389 &
lcd_∑øm_ãxt84
, &
c⁄f
.
£rvoC⁄f
[4].
middÀ
, &
__SE
,

1390 &
lcd_∑øm_ãxt85
, &
c⁄f
.
£rvoC⁄f
[5].
middÀ
, &
__SE
,

1391 &
lcd_∑øm_ãxt86
, &
c⁄f
.
£rvoC⁄f
[6].
middÀ
, &
__SE
,

1393 #ifde‡
MMGYRO


1394 &
lcd_∑øm_ãxt121
, &
c⁄f
.
mmgyro
, &
__D
,

1396 #ifde‡
VBAT


1398 &
lcd_∑øm_ãxt102
, &
c⁄f
.
vb©sˇÀ
, &
__PT
,

1399 &
lcd_∑øm_ãxt103
, &
c⁄f
.
vb©Àvñ_w¨n1
, &
__P
,

1400 &
lcd_∑øm_ãxt104
, &
c⁄f
.
vb©Àvñ_w¨n2
, &
__P
,

1401 &
lcd_∑øm_ãxt106
, &
c⁄f
.
vb©Àvñ_¸ô
, &
__P
,

1404 #ifde‡
POWERMETER


1406 &
lcd_∑øm_ãxt114
, &
c⁄f
.
pöt2ma
, &
__PT
,

1407 #ifde‡
POWERMETER_HARD


1408 &
lcd_∑øm_ãxt111
, &
c⁄f
.
p£ns‹nuŒ
, &
__SE1
,

1410 &
lcd_∑øm_ãxt34
, &
c⁄f
.
powîTriggî1
, &
__PT
,

1412 #i‡
deföed
(
ARMEDTIMEWARNING
)

1413 &
lcd_∑øm_ãxt132
, &
c⁄f
.
¨medtimew¨nög
, &
__SE
,

1415 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1416 &
lcd_∑øm_ãxt150
, &
globÆ_c⁄f
.
cuºítSë
, &
__D
,

1418 &
lcd_∑øm_ãxt151
, &
ª£t_to_deÁu…s
, &
__D
,

1425 
	#PARAMMAX
 ((
lcd_∑øm_±r_èbÀ
)/6 - 1)

	)

1428 
	$__u8Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(
uöt8_t
*)v¨ +(uöt8_t)öc;
	}
};

1429 
	$__s8Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(
öt8_t
*)v¨ +(öt8_t)öc;
	}
};

1430 
	$__u16Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(
uöt16_t
*)v¨ +öc;
	}
};

1431 
	$__s16Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(öt16_t*)v¨ +öc;
	}
};

1432 
	$__nuŒInc
(* 
v¨
, 
öt16_t
 
öc
Ë{
	}
};

1434 
	$__u8Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1435 
uöt16_t
 
unô
 = *(
uöt8_t
*)
v¨
;

1436 
unô
 *
mul
;

1437 
c1
 = '0'+
unô
/100; 
c2
 = '0'+unô/10-(unô/100)*10; 
c3
 = '0'+unit-(unit/10)*10;

1438 
dec
) {

1439 0: 
löe2
[3] = 
c1
;Üöe2[4] = 
c2
;Üöe2[5] = 
c3
; ;

1440 1: 
löe2
[2] = 
c1
;Üöe2[3] = 
c2
;Üöe2[4] = '.';Üöe2[5] = 
c3
; ;

1441 2: 
löe2
[2] = 
c1
;Üöe2[3] = '.';Üöe2[4] = 
c2
;Üöe2[5] = 
c3
; ;

1442 3: 
löe2
[1] = '0';Üöe2[2] = '.';Üöe2[3] = 
c1
;Üöe2[4] = 
c2
;Üöe2[5] = 
c3
; ;

1444 
	}
}

1446 
	$__u16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1447 
uöt16_t
 
unô
 = *(uöt16_t*)
v¨
;

1448 
unô
 *
mul
;

1449 
löe2
[2] = 
	`digô10000
(
unô
);

1450 
löe2
[3] = 
	`digô1000
(
unô
);

1451 
löe2
[4] = 
	`digô100
(
unô
);

1452 
löe2
[5] = 
	`digô10
(
unô
);

1453 
löe2
[6] = 
	`digô1
(
unô
);

1454 
	}
}

1455 
	$__s16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1456 
öt16_t
 
unô
 = *(öt16_t*)
v¨
;

1457 i‡(
unô
 >= 0) {

1458 
löe2
[1] = ' ';

1460 
löe2
[1] = '-';

1461 
unô
 = -unit;

1463 
	`__u16Fmt
(&
unô
, 
mul
, 
dec
);

1464 
	}
}

1465 
	$__uAuxFmt1
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 1); 
	}
}

1466 
	$__uAuxFmt2
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 2); 
	}
}

1467 
	$__uAuxFmt3
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 3); 
	}
}

1468 
	$__uAuxFmt4
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 4); 
	}
}

1471 
	$__uAuxFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
, uöt8_à
aux
) {

1472 
uöt16_t
 
unô
 = *(uöt16_t*)
v¨
;

1473 
löe2
[1] = 
	`digô1
(
aux
);

1474 
löe2
[3] = ( 
unô
 & 1<<(3*
aux
-3) ? 'L' : '.' );

1475 
löe2
[4] = ( 
unô
 & 1<<(3*
aux
-2) ? 'M' : '.' );

1476 
löe2
[5] = ( 
unô
 & 1<<(3*
aux
-1) ? 'H' : '.' );

1477 
	}
}

1479 
	$__s8BôsFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1480 
öt8_t
 
unô
 = *(öt8_t*)
v¨
;

1481 
löe2
[1] = ( 
unô
 & 1<<2 ? 'C' : '.' );

1482 
löe2
[2] = ( 
unô
 & 1<<1 ? 'N' : '.' );

1483 
löe2
[3] = ( 
unô
 & 1<<0 ? 'R' : '.' );

1484 
	}
}

1486 #ifde‡
POWERMETER


1487 
	$__upMFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1488 
uöt32_t
 
unô
 = *(uöt32_t*)
v¨
;

1489 
unô
 /
PLEVELDIV
;

1490 
	`__u16Fmt
(&
unô
, 
mul
, 
dec
);

1491 
	}
}

1504 
uöt8_t
 
	glcdStickSèã
[4];

1505 
	#IsLow
(
x
Ë(
lcdStickSèã
[x] & 0x1)

	)

1506 
	#IsHigh
(
x
Ë(
lcdStickSèã
[x] & 0x2)

	)

1507 
	#IsMid
(
x
Ë(!
lcdStickSèã
[x])

	)

1511 #ifde‡
DISPLAY_2LINES


1512 
	$C⁄figRe‰esh
(
uöt8_t
 
p
) {

1513 
	`blökLED
(10,20,1);

1514 
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);

1515 
	`°r˝y_P
(
löe1
,
	`PSTR
(" "));

1516 
	`°r˝y
(
löe2
,
löe1
);

1517 
	`°r˝y_P
(
löe1
, (*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[
p
 * 3])));

1518 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3) + 2]));

1519 
de·
->
ty≥
->
	`fmt
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3Ë+ 1])), de·->
mu…ùlõr
, de·->
decimÆ
);

1520 
	`LCD˛ór
();

1521 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
(
löe1
);

1522 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
(
löe2
);

1523 
	}
}

1526 #ifde‡
DISPLAY_MULTILINE


1528 
	$C⁄figRe‰esh
(
uöt8_t
 
p
) {

1529 
uöt8_t
 
j
, 
l
 = 1;

1530 
öt8_t
 
µ
 = (öt8_t)
p
;

1531 #i‚de‡
OLED_I2C_128x64


1532 
	`blökLED
(2,4,1);

1533 
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);

1534 
	`LCD˛ór
();

1536 
	`dñay
(60);

1538 
öt8_t
 
i
=
µ
 - 
MULTILINE_PRE
; i<µ + 
MULTILINE_POST
; i++) {

1540 
j
 = (
i
<0 ? i + 1 + 
PARAMMAX
 : i);

1541 i‡(
j
 > 
PARAMMAX
) j -= (1 + PARAMMAX);

1542 
	`°r˝y_P
(
löe1
,
	`PSTR
(" "));

1543 
	`°r˝y
(
löe2
,
löe1
);

1544 
	`°r˝y_P
(
löe1
, (*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[
j
 * 3])));

1545 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
j
 * 3) + 2]));

1546 
de·
->
ty≥
->
	`fmt
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
j
 * 3Ë+ 1])), de·->
mu…ùlõr
, de·->
decimÆ
);

1548 
	`LCD£tLöe
(
l
++);

1549 i‡(
j
 =
p
) {

1550 #i‡–!
	`deföed
(
OLED_I2C_128x64
Ë&& !deföed(
OLED_DIGOLE
) )

1551 
	`LCD¥öt
('>');

1553 #i‡–
	`deföed
(
OLED_DIGOLE
) )

1554 
löe2
[0] = '*';

1556 
	`LCD©åibuãsRevî£
();

1558 
	`LCD¥ötCh¨
(
löe1
);

1559 i‡(
j
 =
p
Ë{
	`LCD©åibuãsOff
(); }

1561 
	`LCD¥ötCh¨
(
löe2
);

1562 #i‡–!
	`deföed
(
OLED_I2C_128x64
Ë&& !deföed(
OLED_DIGOLE
) )

1563 i‡(
j
 =
p
Ë{
	`LCD©åibuãsOff
(); 
	`LCD¥öt
('<');}

1565 
LCD_FLUSH
;

1567 
	`LCD¸lf
();

1568 
	}
}

1570 
	$c⁄figuøti⁄Lo›
() {

1571 
uöt8_t
 
i
, 
p
;

1572 
uöt8_t
 
LCD
=1;

1573 
uöt8_t
 
ª‰eshLCD
 = 1;

1574 
uöt8_t
 
key
 = 0;

1575 
uöt8_t
 
Ælow_exô
 = 0;

1576 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1577 
uöt8_t
 
cuºítSë
 = 
globÆ_c⁄f
.currentSet;

1579 
	`öôLCD
();

1580 #i‡
deföed
 
OLED_I2C_128x64LOGO_PERMANENT


1581 
	`LCD˛ór
();

1583 
ª£t_to_deÁu…s
 = 0;

1584 
p
 = 0;

1585 
LCD
 == 1) {

1586 i‡(
ª‰eshLCD
) {

1587 
	`C⁄figRe‰esh
(
p
);

1588 
ª‰eshLCD
 = 0;

1590 #i‡
	`deföed
(
SERIAL_RX
)

1591 
	`dñay
(10);

1592 i‡(
•ekFømeFœgs
 =0x01Ë
	`ªadSîül_RX
();

1593 
	`dñay
(44);

1595 #i‡
	`deföed
(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
Ë|| deföed(
LCD_TTY
)

1596 
key
 = ( 
	`SîülAvaûabÀ
(
LCD_SERIAL_PORT
Ë? 
	`SîülRód
(LCD_SERIAL_PORT) : 0 );

1598 #ifde‡
LCD_CONF_DEBUG


1599 
	`dñay
(1000);

1600 i‡(
key
 =
LCD_MENU_NEXT
Ëkey=
LCD_VALUE_UP
; key = LCD_MENU_NEXT;

1602 
i
 = 
ROLL
; i <
THROTTLE
; i++Ë{
uöt16_t
 
Tmp
 = 
	`ªadRawRC
(i); 
lcdStickSèã
[i] = (Tm∞< 
MINCHECK
Ë| ((Tm∞> 
MAXCHECK
) << 1);};

1603 i‡(
	`IsMid
(
YAW
Ë&& IsMid(
PITCH
Ë&& IsMid(
ROLL
)Ë
Ælow_exô
 = 1;

1604 i‡(
key
 =
LCD_MENU_SAVE_EXIT
 || (
	`IsLow
(
YAW
Ë&& 
	`IsHigh
(
PITCH
Ë&& 
Ælow_exô
)Ë
LCD
 = 0;

1605 i‡(
key
 =
LCD_MENU_ABORT
 || (
	`IsHigh
(
YAW
Ë&& IsHigh(
PITCH
Ë&& 
Ælow_exô
)Ë
LCD
 = 2;

1606 i‡(
key
 =
LCD_MENU_NEXT
 || (
	`IsLow
(
PITCH
Ë&& 
	`IsMid
(
YAW
))) {

1607 
ª‰eshLCD
 = 1; 
p
++; i‡’>
PARAMMAX
)Ö = 0;

1608 } i‡(
key
 =
LCD_MENU_PREV
 || (
	`IsHigh
(
PITCH
Ë&& 
	`IsMid
(
YAW
))) {

1609 
ª‰eshLCD
 = 1; 
p
--; i‡’ =0xFFË∞
PARAMMAX
;

1610 } i‡(
key
 =
LCD_VALUE_DOWN
 || (
	`IsLow
(
ROLL
))) {

1611 
ª‰eshLCD
 = 1;

1612 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3) + 2]));

1613 
de·
->
ty≥
->
	`öc
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3Ë+ 1])), -(
	`IsHigh
(
THROTTLE
Ë? 10: 1Ë* de·->
ö¸emít
);

1614 i‡(
p
 =0Ë
c⁄f
.
pid
[
PITCH
].
P8
 = c⁄f.pid[
ROLL
].P8;

1615 } i‡(
key
 =
LCD_VALUE_UP
 || (
	`IsHigh
(
ROLL
))) {

1616 
ª‰eshLCD
 = 1;

1617 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3) + 2]));

1618 
de·
->
ty≥
->
	`öc
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3Ë+ 1])), +(
	`IsHigh
(
THROTTLE
Ë? 10 : 1Ë* de·->
ö¸emít
);

1619 i‡(
p
 =0Ë
c⁄f
.
pid
[
PITCH
].
P8
 = c⁄f.pid[
ROLL
].P8;

1621 #i‡
	`deföed
(
PRI_SERVO_TO
)

1622 
	#MAX_SERV
 7

	)

1623 #if(
PRI_SERVO_TO
 < 
MAX_SERV
)

1624 #unde‡
MAX_SERV


1625 
	#MAX_SERV
 
PRI_SERVO_TO


	)

1627 
i
=
PRI_SERVO_FROM
-1; i<
MAX_SERV
; i++Ë
£rvo
[i] = 
c⁄f
.
£rvoC⁄f
[i].
middÀ
;

1628 #i‡
	`deföed
(
HELICOPTER
Ë&& 
YAWMOTOR


1629 
£rvo
[5] = 
MINCOMMAND
;

1631 #i‡
	`deföed
(
TRI
Ë&& deföed(
MEGA_HW_PWM_SERVOS
Ë&& deföed(
MEGA
)

1632 
£rvo
[3] = servo[5];

1634 
	`wrôeSîvos
();

1637 
	`blökLED
(20,30,1);

1638 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

1639 
	`LCD˛ór
();

1640 
	`LCD£tLöe
(1);

1641 i‡(
LCD
 == 0) {

1642 
	`°r˝y_P
(
löe1
,
	`PSTR
("Saving..."));

1643 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1644 
löe1
[7] = 
	`digô1
(
globÆ_c⁄f
.
cuºítSë
);

1646 
	`LCD¥ötCh¨
(
löe1
);

1647 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1648 
	`wrôeGlobÆSë
(0);

1650 i‡(
ª£t_to_deÁu…s
 == 7) {

1652 
	`°r˝y_P
(
löe1
,
	`PSTR
("RESET.."));

1654 
	`LCD¥ötCh¨
(
löe1
);

1655 
	`LﬂdDeÁu…s
();

1657 
	`wrôeP¨ams
(1);

1660 
	`°r˝y_P
(
löe1
,
	`PSTR
("Aborting"));

1661 
	`LCD¥ötCh¨
(
löe1
);

1662 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1663 
globÆ_c⁄f
.
cuºítSë
 = currentSet;

1665 
	`ªadEEPROM
();

1667 
	`LCD£tLöe
(2);

1668 
	`°r˝y_P
(
löe1
,
	`PSTR
("Exit"));

1669 
	`LCD¥ötCh¨
(
löe1
);

1670 #i‡
	`deföed
(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
)

1671 
	`dñay
(2000);

1672 
	`öôLCD
();

1674 #i‡
	`deföed
(
LCD_SERIAL3W
)

1675 
	`SîülO≥n
(0,115200);

1677 #i‡
	`deföed
(
LCD_TELEMETRY
Ë|| deföed(
OLED_I2C_128x64
)

1678 
	`dñay
(1500);

1680 
cy˛eTime
 = 0;

1681 #i‡
	`deföed
(
OLED_I2C_128x64
)

1682 #i‡
	`deföed
(
OLED_I2C_128x64LOGO_PERMANENT
)

1683 
	`i2c_OLED_Put_Logo
();

1684 #ñi‡!
	`deföed
(
LOG_PERMANENT_SHOW_AFTER_CONFIG
)

1685 
	`LCD˛ór
();

1688 #ifde‡
LOG_PERMANENT_SHOW_AFTER_CONFIG


1689 i‡(!
f
.
ARMED
Ë
	`dumpPLog
(0);

1691 
	}
}

1695 #ifde‡
LCD_TELEMETRY


1698 
	$LCDb¨
(
uöt8_t
 
n
,uöt8_à
v
) {

1699 i‡(
v
 > 200) v = 0;

1700 i‡(
v
 > 100) v = 100;

1701 #i‡
	`deföed
(
LCD_SERIAL3W
)

1702 
uöt8_t
 
i
=0; i< 
n
; i++Ë
	`LCD¥öt
((i<n*
v
/100 ? '=' : '.'));

1703 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

1704 
	`LCD¥öt
(0xFE);LCD¥öt('b');LCD¥öt(
n
);LCD¥öt(
v
);

1705 #ñi‡
	`deföed
(
LCD_VT100
Ë|| deföed(
LCD_TTY
)

1706 
uöt8_t
 
i
, 
j
 = (
n
*
v
)/100;

1707 
i
=0; i< 
j
; i++Ë
	`LCD¥öt
( '=' );

1708 
i
=
j
; i< 
n
; i++Ë
	`LCD¥öt
( '.' );

1709 #ñi‡
	`deföed
(
LCD_ETPP
)

1710 
	`ETPP_b¨Gøph
(
n
,
v
);

1711 #ñi‡
	`deföed
(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
)

1712 
uöt8_t
 
i
=0; i< 
n
; i++Ë
	`LCD¥öt
((i<n*
v
/100 ? '=' : '.'));

1713 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

1714 
uöt8_t
 
i
, 
j
 = (
n
*
v
)/100;

1715 
i
=0; i< 
j
; i++Ë
	`LCD¥öt
( 159 );

1716 i‡(
j
<
n
Ë
	`LCD¥öt
(154 + (
v
*n*5/100 - 5*j));

1717 
i
=
j
+1; i< 
n
; i++Ë
	`LCD¥öt
( 154 );

1718 #ñi‡
	`deföed
(
OLED_DIGOLE
)

1719 
uöt8_t
 
i
, 
j
 = (
n
*
v
)/100;

1720 
l
[
n
+1];

1721 
i
=0; i< 
j
; i++Ë
l
[i] = '=';

1722 
i
=
j
; i< 
n
; i++Ë
l
[i] = '.';

1723 
l
[
n
] = 0;

1724 
	`LCD¥ötCh¨
(
l
);

1726 
	}
}

1728 
	$fûl_löe1_deg
() {

1729 
uöt16_t
 
unô
;

1730 
	`°r˝y_P
(
löe1
,
	`PSTR
("Deg ---.- ---.-"));

1732 i‡(
©t
.
™gÀ
[0] < 0 ) {

1733 
unô
 = -
©t
.
™gÀ
[0];

1734 
löe1
[3] = '-';

1736 
unô
 = 
©t
.
™gÀ
[0];

1737 
löe1
[4] = 
	`digô1000
(
unô
);

1738 
löe1
[5] = 
	`digô100
(
unô
);

1739 
löe1
[6] = 
	`digô10
(
unô
);

1740 
löe1
[8] = 
	`digô1
(
unô
);

1741 i‡(
©t
.
™gÀ
[1] < 0 ) {

1742 
unô
 = -
©t
.
™gÀ
[1];

1743 
löe1
[10] = '-';

1745 
unô
 = 
©t
.
™gÀ
[1];

1746 
löe1
[11] = 
	`digô1000
(
unô
);

1747 
löe1
[12] = 
	`digô100
(
unô
);

1748 
löe1
[13] = 
	`digô10
(
unô
);

1749 
löe1
[15] = 
	`digô1
(
unô
);

1750 
	}
}

1751 
	$ouçut_AmaxA
() {

1752 #ifde‡
POWERMETER_HARD


1754 
	`°r˝y_P
(
löe2
,
	`PSTR
("---,-A max---,-A"));

1756 
löe2
[0] = 
	`digô1000
(
™Æog
.
am≥øge
);

1757 
löe2
[1] = 
	`digô100
(
™Æog
.
am≥øge
);

1758 
löe2
[2] = 
	`digô10
(
™Æog
.
am≥øge
);

1759 
löe2
[4] = 
	`digô1
(
™Æog
.
am≥øge
);

1761 
löe2
[10] = 
	`digô1000
(
powîVÆueMaxMAH
);

1762 
löe2
[11] = 
	`digô100
(
powîVÆueMaxMAH
);

1763 
löe2
[12] = 
	`digô10
(
powîVÆueMaxMAH
);

1764 
löe2
[14] = 
	`digô1
(
powîVÆueMaxMAH
);

1765 
	`LCD¥ötCh¨
(
löe2
);

1767 
	}
}

1768 #ifde‡
WATTS


1769 
	$ouçut_WmaxW
() {

1771 
	`°r˝y_P
(
löe2
,
	`PSTR
("----W max----W"));

1772 
löe2
[0] = 
	`digô1000
(
™Æog
.
w©ts
);

1773 
löe2
[1] = 
	`digô100
(
™Æog
.
w©ts
);

1774 
löe2
[2] = 
	`digô10
(
™Æog
.
w©ts
);

1775 
löe2
[3] = 
	`digô1
(
™Æog
.
w©ts
);

1776 
löe2
[11] = 
	`digô1000
(
w©tsMax
);

1777 
löe2
[12] = 
	`digô100
(
w©tsMax
);

1778 
löe2
[13] = 
	`digô10
(
w©tsMax
);

1779 
löe2
[14] = 
	`digô1
(
w©tsMax
);

1780 
	`LCD¥ötCh¨
(
löe2
);

1781 
	}
}

1784 
	$ouçut_V
() {

1785 #ifde‡
VBAT


1786 
	`°r˝y_P
(
löe1
,
	`PSTR
(" --.-V"));

1788 
löe1
[1] = 
	`digô100
(
™Æog
.
vb©
);

1789 
löe1
[2] = 
	`digô10
(
™Æog
.
vb©
);

1790 
löe1
[4] = 
	`digô1
(
™Æog
.
vb©
);

1791 #i‚de‡
OLED_I2C_128x64


1792 i‡(
™Æog
.
vb©
 < 
c⁄f
.
vb©Àvñ_w¨n1
Ë{ 
	`LCD©åibuãsRevî£
(); }

1794 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, (((
™Æog
.
vb©
 - 
c⁄f
.
vb©Àvñ_w¨n1
)*100)/(
VBATNOMINAL
-conf.vbatlevel_warn1)) );

1795 
	`LCD©åibuãsOff
();

1796 
	`LCD¥ötCh¨
(
löe1
);

1798 
	}
}

1800 
	$ouçut_Vmö
() {

1801 #ifde‡
VBAT


1802 
	`°r˝y_P
(
löe1
,
	`PSTR
(" --.-Vmin"));

1804 
löe1
[1] = 
	`digô100
(
vb©Mö
);

1805 
löe1
[2] = 
	`digô10
(
vb©Mö
);

1806 
löe1
[4] = 
	`digô1
(
vb©Mö
);

1807 #i‚de‡
OLED_I2C_128x64


1808 i‡(
vb©Mö
 < 
c⁄f
.
vb©Àvñ_¸ô
Ë{ 
	`LCD©åibuãsRevî£
(); }

1810 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, (
vb©Mö
 > 
c⁄f
.
vb©Àvñ_¸ô
 ? (((vb©Mö - c⁄f.vb©Àvñ_¸ô)*100)/(
VBATNOMINAL
-conf.vbatlevel_crit)) : 0 ));

1811 
	`LCD©åibuãsOff
();

1812 
	`LCD¥ötCh¨
(
löe1
);

1814 
	}
}

1815 
	$ouçut_mAh
() {

1816 #ifde‡
POWERMETER


1817 
uöt16_t
 
mah
 = 
™Æog
.
ötPowîMëîSum
;

1818 i‡(
™Æog
.
ötPowîMëîSum
 < (
uöt16_t
)
c⁄f
.
powîTriggî1
 * 
PLEVELSCALE
)

1819 
mah
 = 
c⁄f
.
powîTriggî1
 * 
PLEVELSCALE
 - 
™Æog
.
ötPowîMëîSum
;

1820 
	`°r˝y_P
(
löe1
,
	`PSTR
(" -----mAh"));

1821 
löe1
[1] = 
	`digô10000
(
mah
);

1822 
löe1
[2] = 
	`digô1000
(
mah
);

1823 
löe1
[3] = 
	`digô100
(
mah
);

1824 
löe1
[4] = 
	`digô10
(
mah
);

1825 
löe1
[5] = 
	`digô1
(
mah
);

1826 i‡(
c⁄f
.
powîTriggî1
) {

1827 
öt8_t
 
v
 = 100 - ( 
™Æog
.
ötPowîMëîSum
/(
uöt16_t
)
c⁄f
.
powîTriggî1
) *2;

1828 #i‚de‡
OLED_I2C_128x64


1829 i‡(
v
 <0Ë{ 
	`LCD©åibuãsRevî£
(); }

1831 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, 
v
);

1832 
	`LCD©åibuãsOff
();

1834 
	`LCD¥ötCh¨
(
löe1
);

1836 
	}
}

1837 
	$ouçut_îr‹s_‹_¨medTime
() {

1838 i‡(
Áûß„Evíts
 || (
i2c_îr‹s_cou¡
>>10)) {

1840 
	`LCDÆ¨mAndRevî£
();

1841 
	`ouçut_Áûs
();

1842 
	`LCD©åibuãsOff
();

1844 
uöt16_t
 
©s
 = 
¨medTime
 / 1000000;

1845 #ifde‡
ARMEDTIMEWARNING


1846 #i‚de‡
OLED_I2C_128x64


1847 i‡(
©s
 > 
c⁄f
.
¨medtimew¨nög
Ë{ 
	`LCD©åibuãsRevî£
(); }

1849 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, (
©s
 < 
c⁄f
.
¨medtimew¨nög
 ? (((conf.armedtimewarning-ats+1)*25)/(conf.armedtimewarning+1)*4) : 0 ));

1850 
	`LCD©åibuãsOff
();

1852 
	`LCD¥öt
(' ');

1853 #ifde‡
ARMEDTIMEWARNING


1854 
	`¥öt_u±ime
–(
c⁄f
.
¨medtimew¨nög
 > 
©s
 ? conf.armedtimewarning -áts :áts) );

1856 
	`¥öt_u±ime
(
©s
);

1859 
	}
}

1860 
	$ouçut_Ætôude
() {

1861 #i‡
BARO


1863 
öt16_t
 
h
 = 
Æt
.
E°A…
 / 100;

1864 
	`LCD¥öt
('A'); 
	`LCD¥ötI¡16
(
h
); LCDprint('m');

1865 
h
 = 
BAROÆtMax
 / 100;

1866 
	`LCD¥ötCh¨
(" ("); 
	`LCD¥ötI¡16
(
h
);

1869 
	}
}

1870 
	$ouçut_u±ime_c£t
() {

1871 
	`°r˝y_P
(
löe1
,
	`PSTR
("U∞")); 
	`LCD¥ötCh¨
÷öe1); 
	`¥öt_u±ime
(
	`mûlis
() / 1000 );

1872 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1873 
	`°r˝y_P
(
löe1
,
	`PSTR
(" C£à-"));Üöe1[7] = 
	`digô1
(
globÆ_c⁄f
.
cuºítSë
); 
	`LCD¥ötCh¨
(line1);

1875 
	}
}

1876 
	$ouçut_cy˛e
() {

1877 
	`°r˝y_P
(
löe1
,
	`PSTR
("Cycle -----us"));

1880 
löe1
[9] = 
	`digô10000
(
cy˛eTime
);

1881 
löe1
[10] = 
	`digô1000
(
cy˛eTime
);

1882 
löe1
[11] = 
	`digô100
(
cy˛eTime
);

1883 
löe1
[12] = 
	`digô10
(
cy˛eTime
);

1884 
löe1
[13] = 
	`digô1
(
cy˛eTime
);

1885 
	`LCD¥ötCh¨
(
löe1
);

1886 
	}
}

1887 
	$ouçut_cy˛eMöMax
() {

1888 #i‡(
LOG_VALUES
 >= 2)

1889 
	`°r˝y_P
(
löe2
,
	`PSTR
("(-----, -----)us"));

1890 
löe2
[1] = 
	`digô10000
(
cy˛eTimeMö
 );

1891 
löe2
[2] = 
	`digô1000
(
cy˛eTimeMö
 );

1892 
löe2
[3] = 
	`digô100
(
cy˛eTimeMö
 );

1893 
löe2
[4] = 
	`digô10
(
cy˛eTimeMö
 );

1894 
löe2
[5] = 
	`digô1
(
cy˛eTimeMö
 );

1895 
löe2
[8] = 
	`digô10000
(
cy˛eTimeMax
);

1896 
löe2
[9] = 
	`digô1000
(
cy˛eTimeMax
);

1897 
löe2
[10] = 
	`digô100
(
cy˛eTimeMax
);

1898 
löe2
[11] = 
	`digô10
(
cy˛eTimeMax
);

1899 
löe2
[12] = 
	`digô1
(
cy˛eTimeMax
);

1900 
	`LCD¥ötCh¨
(
löe2
);

1902 
	}
}

1903 
	$ouçut_Áûs
() {

1904 
uöt16_t
 
unô
;

1906 
	`°r˝y_P
(
löe2
,
	`PSTR
("-- Fails -- i2c"));

1907 
unô
 = 
Áûß„Evíts
;

1908 
löe2
[0] = 
	`digô10
(
unô
);

1909 
löe2
[1] = 
	`digô1
(
unô
);

1910 
unô
 = 
i2c_îr‹s_cou¡
;

1911 
löe2
[10] = 
	`digô10
(
unô
);

1912 
löe2
[11] = 
	`digô1
(
unô
);

1913 
	`LCD¥ötCh¨
(
löe2
);

1914 
	}
}

1915 
	$ouçut_™√x
() {

1917 
	`°r˝y_P
(
löe2
,
	`PSTR
("annex --"));

1918 
löe2
[6] = 
	`digô10
(
™√x650_ovîrun_cou¡
);

1919 
löe2
[7] = 
	`digô1
(
™√x650_ovîrun_cou¡
);

1920 
	`LCD¥ötCh¨
(
löe2
);

1921 
	}
}

1922 
	gcheckboxôemNames
[][4] = {

1924 #i‡
ACC


1927 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

1930 #ifde‡
VARIOMETER


1934 #i‡
deföed
(
HEADFREE
)

1938 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

1941 #i‡
deföed
(
CAMTRIG
)

1944 #i‡
GPS


1948 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

1951 #i‡
deföed
(
BUZZER
)

1954 #i‡
deföed
(
LED_FLASHER
)

1958 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

1961 #ifde‡
INFLIGHT_ACC_CALIBRATION


1964 #ifde‡
GOVERNOR_P


1967 #ifde‡
OSD_SWITCH


1971 
	$ouçut_checkboxôems
() {

1972 
uöt8_t
 
i
=0; i<
CHECKBOXITEMS
; i++ ) {

1973 i‡(
rcO±i⁄s
[
i
] || ((i==
BOXARM
)&&(
f
.
ARMED
)) ) {

1974 
	`LCD¥ötCh¨
(
checkboxôemNames
[
i
]);

1975 
	`LCD¥öt
(' ');

1978 
	}
}

1979 
	$ouçut_checkbox°©us
() {

1980 #i‡(
	`deföed
(
DISPLAY_COLUMNS
))

1981 
uöt8_t
 
˙tmax
 = 
DISPLAY_COLUMNS
 /4;

1983 
uöt8_t
 
˙tmax
 = 4;

1985 
uöt8_t
 
˙t
 = 0;

1986 #ifde‡
BUZZER


1987 i‡(
	`isBuzzîON
()Ë{ 
	`LCDÆ¨mAndRevî£
(); }

1989 
uöt8_t
 
i
=0; (i<
CHECKBOXITEMS
Ë&& (
˙t
<
˙tmax
); i++ ) {

1990 i‡(
rcO±i⁄s
[
i
] || ((i==
BOXARM
)&&(
f
.
ARMED
)) ) {

1991 
	`LCD¥ötCh¨
(
checkboxôemNames
[
i
]);

1992 
	`LCD¥öt
(' ');

1993 
˙t
++;

1996 
uöt8_t
 
i
=
˙t
; i<
˙tmax
; i++Ë
	`LCD¥ötCh¨
(". ");

1997 
	`LCD©åibuãsOff
();

1998 
	}
}

2000 
	#GYROLIMIT
 60

2001 
	#ACCLIMIT
 60

2002 
	`ouçutSís‹
(
uöt8_t
 
num
, 
öt16_t
 
d©a
, i¡16_à
limô
Ë{

	)

2003 i‡(
	gd©a
 < -
	glimô
Ë{
LCD¥ötCh¨
("<<<<");}

2004 i‡(
	gd©a
 > 
	glimô
Ë{
LCD¥ötCh¨
(">>>>");}

2005 
LCDb¨
(
num
, 
limô
 + 
d©a
 *50/limit);

2007 
	$¥öt_u±ime
(
uöt16_t
 
£c
) {

2008 
uöt16_t
 
m
, 
s
;

2009 
löe
[6] = "--:--";

2010 
m
 = 
£c
 / 60;

2011 
s
 = 
£c
 - (60 * 
m
);

2012 
löe
[0] = 
	`digô10
(
m
);

2013 
löe
[1] = 
	`digô1
(
m
);

2014 
löe
[3] = 
	`digô10
(
s
);

2015 
löe
[4] = 
	`digô1
(
s
);

2016 
	`LCD¥ötCh¨
(
löe
);

2017 
	}
}

2018 #i‡
GPS


2019 
	$fûl_löe1_gps_œt
(
uöt8_t
 
ßt
) {

2020 
öt32_t
 
aGPS_œtôude
 = 
	`abs
(
GPS_co‹d
[
LAT
]);

2021 
	`°r˝y_P
(
löe1
,
	`PSTR
(".---.------- #--"));

2023 
löe1
[0] = 
GPS_co‹d
[
LAT
]<0?'S':'N';

2024 i‡(
ßt
) {

2026 
löe1
[14] = 
	`digô10
(
GPS_numS©
);

2027 
löe1
[15] = 
	`digô1
(
GPS_numS©
);

2029 
löe1
[1] = '0' + 
aGPS_œtôude
 / 1000000000;

2030 
löe1
[2] = '0' + 
aGPS_œtôude
 / 100000000 - (aGPS_latitude/1000000000) * 10;

2031 
löe1
[3] = '0' + 
aGPS_œtôude
 / 10000000 - (aGPS_latitude/100000000) * 10;

2032 
löe1
[5] = '0' + 
aGPS_œtôude
 / 1000000 - (aGPS_latitude/10000000) * 10;

2033 
löe1
[6] = '0' + 
aGPS_œtôude
 / 100000 - (aGPS_latitude/1000000) * 10;

2034 
löe1
[7] = '0' + 
aGPS_œtôude
 / 10000 - (aGPS_latitude/100000) * 10;

2035 
löe1
[8] = '0' + 
aGPS_œtôude
 / 1000 - (aGPS_latitude/10000) * 10;

2036 
löe1
[9] = '0' + 
aGPS_œtôude
 / 100 - (aGPS_latitude/1000) * 10;

2037 
löe1
[10] = '0' + 
aGPS_œtôude
 / 10 - (aGPS_latitude/100) * 10;

2038 
löe1
[11] = '0' + 
aGPS_œtôude
 - (aGPS_latitude/10) * 10;

2039 
	}
}

2040 
	$fûl_löe2_gps_l⁄
(
uöt8_t
 
°©us
) {

2041 
öt32_t
 
aGPS_l⁄gôude
 = 
	`abs
(
GPS_co‹d
[
LON
]);

2042 
	`°r˝y_P
(
löe2
,
	`PSTR
(".---.------- "));

2044 
löe2
[0] = 
GPS_co‹d
[
LON
]<0?'W':'E';

2045 i‡(
°©us
) {

2046 
löe2
[13] = (
GPS_upd©e
 ? 'U' : '.');

2049 
löe2
[1] = '0' + 
aGPS_l⁄gôude
 / 1000000000;

2050 
löe2
[2] = '0' + 
aGPS_l⁄gôude
 / 100000000 - (aGPS_longitude/1000000000) * 10;

2051 
löe2
[3] = '0' + 
aGPS_l⁄gôude
 / 10000000 - (aGPS_longitude/100000000) * 10;

2052 
löe2
[5] = '0' + 
aGPS_l⁄gôude
 / 1000000 - (aGPS_longitude/10000000) * 10;

2053 
löe2
[6] = '0' + 
aGPS_l⁄gôude
 / 100000 - (aGPS_longitude/1000000) * 10;

2054 
löe2
[7] = '0' + 
aGPS_l⁄gôude
 / 10000 - (aGPS_longitude/100000) * 10;

2055 
löe2
[8] = '0' + 
aGPS_l⁄gôude
 / 1000 - (aGPS_longitude/10000) * 10;

2056 
löe2
[9] = '0' + 
aGPS_l⁄gôude
 / 100 - (aGPS_longitude/1000) * 10;

2057 
löe2
[10] = '0' + 
aGPS_l⁄gôude
 / 10 - (aGPS_longitude/100) * 10;

2058 
löe2
[11] = '0' + 
aGPS_l⁄gôude
 - (aGPS_longitude/10) * 10;

2059 
	}
}

2062 
	$ouçut_gyroX
() {

2063 
	`LCD¥ötI¡16
(
imu
.
gyroD©a
[0]); 
	`LCD¥öt
(' ');

2064 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
gyroD©a
[0], 
GYROLIMIT
);

2065 
	}
}

2066 
	$ouçut_gyroY
() {

2067 
	`LCD¥ötI¡16
(
imu
.
gyroD©a
[1]); 
	`LCD¥öt
(' ');

2068 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
gyroD©a
[1], 
GYROLIMIT
);

2069 
	}
}

2070 
	$ouçut_gyroZ
() {

2071 
	`LCD¥ötI¡16
(
imu
.
gyroD©a
[2]); 
	`LCD¥öt
(' ');

2072 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
gyroD©a
[2], 
GYROLIMIT
);

2073 
	}
}

2074 
	$ouçut_accX
() {

2075 
	`LCD¥ötI¡16
(
imu
.
accSmoŸh
[0]); 
	`LCD¥öt
(' ');

2076 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
accSmoŸh
[0], 
ACCLIMIT
);

2077 
	}
}

2078 
	$ouçut_accY
() {

2079 
	`LCD¥ötI¡16
(
imu
.
accSmoŸh
[1]); 
	`LCD¥öt
(' ');

2080 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
accSmoŸh
[1], 
ACCLIMIT
);

2081 
	}
}

2082 
	$ouçut_accZ
() {

2083 
	`LCD¥ötI¡16
(
imu
.
accSmoŸh
[2]); 
	`LCD¥öt
(' ');

2084 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
accSmoŸh
[2] - 
ACC_1G
, 
ACCLIMIT
);

2085 
	}
}

2087 
	$ouçut_debug0
(Ë{ 
	`LCD¥ötCh¨
("D1 "); 
	`LCD¥ötI¡16
(
debug
[0]); 
	}
}

2088 
	$ouçut_debug1
(Ë{ 
	`LCD¥ötCh¨
("D2 "); 
	`LCD¥ötI¡16
(
debug
[1]); 
	}
}

2089 
	$ouçut_debug2
(Ë{ 
	`LCD¥ötCh¨
("D3 "); 
	`LCD¥ötI¡16
(
debug
[2]); 
	}
}

2090 
	$ouçut_debug3
(Ë{ 
	`LCD¥ötCh¨
("D4 "); 
	`LCD¥ötI¡16
(
debug
[3]); 
	}
}

2093 #i‡
deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

2094 
	#PRINT_FREE_RAM
 { \

2095 
__bss_íd
; \

2097 *
__brkvÆ
; \

2098 
‰ì_mem‹y
; \

2099 if(()
__brkvÆ
 == 0) \

2100 
‰ì_mem‹y
 = (()&‰ì_mem‹yË- (()&
__bss_íd
); \

2102 
‰ì_mem‹y
 = (()&‰ì_mem‹yË- (()
__brkvÆ
); \

2103 
	`°r˝y_P
(
löe1
,
	`PSTR
(" Free ----")); \

2104 
löe1
[6] = 
	`digô1000
–
‰ì_mem‹y
 ); \

2105 
löe1
[7] = 
	`digô100
–
‰ì_mem‹y
 ); \

2106 
löe1
[8] = 
	`digô10
–
‰ì_mem‹y
 ); \

2107 
löe1
[9] = 
	`digô1
–
‰ì_mem‹y
 ); \

2108 
	`LCD£tLöe
(1); 
	`LCD¥ötCh¨
(
löe1
); \

2109 
ãÀmëry
 = 0; \

2110 }

	)

2111 
	#PRINT_FREE_RAM_v2
 { \

2112 c⁄° 
uöt8_t
 *
±r
 = &
_íd
; \

2113 
uöt16_t
 
‰ì_mem‹y
 = 0; \

2114 *
±r
 =0xa5 &&Öå <&
__°ack
) \

2115 { 
±r
++; 
‰ì_mem‹y
++; } \

2116 
	`°r˝y_P
(
löe1
,
	`PSTR
(" Free ----")); \

2117 
löe1
[6] = 
	`digô1000
–
‰ì_mem‹y
 ); \

2118 
löe1
[7] = 
	`digô100
–
‰ì_mem‹y
 ); \

2119 
löe1
[8] = 
	`digô10
–
‰ì_mem‹y
 ); \

2120 
löe1
[9] = 
	`digô1
–
‰ì_mem‹y
 ); \

2121 
	`LCD£tLöe
(1); 
	`LCD¥ötCh¨
(
löe1
); \

2122 
ãÀmëry
 = 0; \

2123 }

	)

2127 #ifde‡
DISPLAY_2LINES


2128 
	$lcd_ãÀmëry
() {

2129 
uöt8_t
 
löír
 = 0;

2130 
ãÀmëry
) {

2131 
uöt16_t
 
unô
;

2132 
uöt8_t
 
i
;

2133 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_1


2136 i‡(
löír
++ % 2) {

2137 
	`fûl_löe1_deg
();

2138 
	`LCD£tLöe
(1);

2139 
	`LCD¥ötCh¨
(
löe1
);

2141 #ifde‡
POWERMETER_HARD


2142 
	`LCD£tLöe
(2);

2143 
	`ouçut_AmaxA
();

2148 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_2


2151 i‡(
löír
++ % 2) {

2152 
	`LCD£tLöe
(1);

2153 
	`ouçut_V
();

2155 
	`LCD£tLöe
(2);

2156 
	`ouçut_mAh
();

2160 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_3


2163 i‡(
löír
++ % 2) {

2164 
	`LCD£tLöe
(1);

2165 
	`ouçut_cy˛e
();

2167 #i‡(
LOG_VALUES
 >= 2)

2168 
	`LCD£tLöe
(2);

2169 
	`ouçut_cy˛eMöMax
());

2174 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_4


2177 i‡(
löír
++ % 2) {

2178 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
("G ");

2179 
	`ouçutSís‹
(4, 
imu
.
gyroD©a
[0], 
GYROLIMIT
); 
	`LCD¥öt
(' ');

2180 
	`ouçutSís‹
(4, 
imu
.
gyroD©a
[1], 
GYROLIMIT
); 
	`LCD¥öt
(' ');

2181 
	`ouçutSís‹
(4, 
imu
.
gyroD©a
[2], 
GYROLIMIT
);

2183 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
("A ");

2184 
	`ouçutSís‹
(4, 
imu
.
accSmoŸh
[0], 
ACCLIMIT
); 
	`LCD¥öt
(' ');

2185 
	`ouçutSís‹
(4, 
imu
.
accSmoŸh
[1], 
ACCLIMIT
); 
	`LCD¥öt
(' ');

2186 
	`ouçutSís‹
(4, 
imu
.
accSmoŸh
[2] - 
ACC_1G
, 
ACCLIMIT
);

2190 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_5


2193 i‡(
löír
++ % 2) {

2194 
	`LCD£tLöe
(1);

2195 
	`ouçut_Áûs
();

2197 
	`LCD£tLöe
(2);

2198 
	`ouçut_™√x
();

2202 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_6


2205 i‡(
löír
++ % 2) {

2206 
	`°r˝y_P
(
löe1
,
	`PSTR
("Roll Pitch Throt"));

2207 i‡(
f
.
ARMED
Ë
löe2
[14] = 'A'; line2[14] = 'a';

2208 i‡(
Áûß„C¡
 > 5Ë
löe2
[15] = 'F'; line2[15] = 'f';

2209 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
(
löe1
);

2212 
	`°r˝y_P
(
löe2
,
	`PSTR
("---- ---- ----xx"));

2213 
löe2
[0] = 
	`digô1000
–
rcD©a
[
ROLL
] );

2214 
löe2
[1] = 
	`digô100
–
rcD©a
[
ROLL
] );

2215 
löe2
[2] = 
	`digô10
–
rcD©a
[
ROLL
] );

2216 
löe2
[3] = 
	`digô1
–
rcD©a
[
ROLL
] );

2217 
löe2
[5] = 
	`digô1000
–
rcD©a
[
PITCH
] );

2218 
löe2
[6] = 
	`digô100
–
rcD©a
[
PITCH
] );

2219 
löe2
[7] = 
	`digô10
–
rcD©a
[
PITCH
] );

2220 
löe2
[8] = 
	`digô1
–
rcD©a
[
PITCH
] );

2221 
löe2
[10] = 
	`digô1000
–
rcD©a
[
THROTTLE
] );

2222 
löe2
[11] = 
	`digô100
–
rcD©a
[
THROTTLE
] );

2223 
löe2
[12] = 
	`digô10
–
rcD©a
[
THROTTLE
] );

2224 
löe2
[13] = 
	`digô1
–
rcD©a
[
THROTTLE
] );

2225 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
(
löe2
);

2229 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_7


2232 #i‡
GPS


2233 i‡(
löír
++ % 2) {

2234 
	`fûl_löe1_gps_œt
(1);

2235 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
(
löe1
);

2238 
	`fûl_löe2_gps_l⁄
(1);

2239 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
(
löe2
);

2244 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_9


2247 
	`LCD£tLöe
(1);

2248 
	`LCD¥ötI¡16
(
debug
[0]); 
	`LCD¥öt
(' ');

2249 
	`LCD¥ötI¡16
(
debug
[1]); 
	`LCD¥öt
(' ');

2250 
	`LCD¥ötI¡16
(
debug
[2]); 
	`LCD¥öt
(' ');

2251 
	`LCD¥ötI¡16
(
debug
[3]); 
	`LCD¥öt
(' ');

2255 #i‡
	`deföed
(
LOG_VALUES
Ë&& deföed(
DEBUG
)

2258 
cy˛eTimeMax
 = 0;

2259 
cy˛eTimeMö
 = 65535;

2260 
ãÀmëry
 = 0;

2263 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

2265 
PRINT_FREE_RAM
;

2270 
	}
}

2274 #ifde‡
DISPLAY_MULTILINE


2275 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_5


2276 
	$ouçutMŸ‹Sîvo
(
uöt8_t
 
i
, 
uöt16_t
 
unô
) {

2277 #ifde‡
HELICOPTER


2278 
ouçutNames
[16][3] = {"M1", " 2"," 3", " 4", " 5", " 6", " 7", " 8",

2281 
ouçutNames
[16][3] = {"M1", " 2"," 3", " 4", " 5", " 6", " 7", " 8",

2284 
	`LCD¥ötCh¨
(
ouçutNames
[
i
]);

2285 
ãm∂©e7
[1] = 
	`digô1000
(
unô
);

2286 
ãm∂©e7
[2] = 
	`digô100
(
unô
);

2287 
ãm∂©e7
[3] = 
	`digô10
(
unô
);

2288 
ãm∂©e7
[4] = 
	`digô1
(
unô
);

2289 
	`LCD¥ötCh¨
(
ãm∂©e7
);

2290 
unô
 = 
	`c⁄°øö
(unit,1000,2000);

2291 
	`LCDb¨
(
DISPLAY_COLUMNS
-8, (
unô
-1000)/10 );

2292 
	`LCD¸lf
();

2293 
	}
}

2295 #ifde‡
LCD_TELEMETRY_PAGE1


2296 (*
	g∑ge1_func_±r
[]Ë(Ë
LCD_TELEMETRY_PAGE1
 ;

2298 (*
	g∑ge1_func_±r
[]) () = {

2299 #ifde‡
VBAT


2300 
ouçut_V
,

2302 #ifde‡
POWERMETER


2303 
ouçut_mAh
,

2305 #ifde‡
VBAT


2306 
ouçut_Vmö
,

2308 
ouçut_îr‹s_‹_¨medTime
,

2309 
ouçut_checkbox°©us
,

2310 #i‡
BARO


2311 
ouçut_Ætôude
,

2313 #ifde‡
POWERMETER_HARD


2314 
ouçut_AmaxA
,

2316 #ifde‡
WATTS


2317 
ouçut_WmaxW
,

2319 
ouçut_u±ime_c£t
,

2322 #ifde‡
LCD_TELEMETRY_PAGE9


2323 (*
	g∑ge9_func_±r
[]Ë(Ë
LCD_TELEMETRY_PAGE9
 ;

2325 (*
	g∑ge9_func_±r
[]) () = {

2326 
ouçut_cy˛e
,

2327 #i‡(
LOG_VALUES
 >= 2)

2328 
ouçut_cy˛eMöMax
,

2330 
ouçut_Áûs
,

2331 
ouçut_™√x
,

2332 #ifde‡
DEBUG


2333 
ouçut_debug0
, 
ouçut_debug1
, 
ouçut_debug2
, 
ouçut_debug3
,

2337 #ifde‡
LCD_TELEMETRY_PAGE2


2338 (*
	g∑ge2_func_±r
[]Ë(Ë
LCD_TELEMETRY_PAGE2
 ;

2340 (*
	g∑ge2_func_±r
[]Ë(Ë{ 
ouçut_gyroX
, 
ouçut_gyroY
, 
ouçut_gyroZ
, 
ouçut_accX
, 
ouçut_accY
, 
ouçut_accZ
, };

2343 
	$lcd_ãÀmëry
() {

2344 
uöt8_t
 
löír
 = 0;

2345 #ifde‡
DISPLAY_FONT_DSIZE


2346 
uöt8_t
 
off£t
 = 0;

2347 
	#POSSIBLE_OFFSET
 
off£t


	)

2349 
	#POSSIBLE_OFFSET
 0

	)

2351 
ãÀmëry
) {

2352 
uöt16_t
 
unô
;

2353 
uöt8_t
 
i
;

2355 
ãÀmëry
 = 0;

2357 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_1


2358 #ifde‡
DISPLAY_FONT_DSIZE


2360 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2366 
löír
++;

2367 
löír
 %
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, ((
∑ge1_func_±r
)/2Ë- 
POSSIBLE_OFFSET
);

2368 
	`LCD£tLöe
(
löír
+1);

2369 (*
∑ge1_func_±r
 [
löír
 + 
POSSIBLE_OFFSET
] ) ();

2370 
	`LCD¸lf
();

2374 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_2


2375 #ifde‡
DISPLAY_FONT_DSIZE


2377 { 
off£t
 = 3; }

2382 
£ns‹Names
[6][3] = {"Gx", "Gy", "Gz", "Ax", "Ay", "Az"};

2383 
i
 = 
löír
++ % 
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, 6 - 
POSSIBLE_OFFSET
);

2384 
	`LCD£tLöe
(
i
 + 1);

2385 
	`LCD¥ötCh¨
(
£ns‹Names
[
i
+
POSSIBLE_OFFSET
]);

2386 
	`LCD¥öt
(' ');

2387 (*
∑ge2_func_±r
 [
i
+
POSSIBLE_OFFSET
] ) ();

2388 
	`LCD¸lf
();

2391 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_3


2392 #ifde‡
DISPLAY_FONT_DSIZE


2394 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2400 
i
 = 
löír
++ % 
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, 
CHECKBOXITEMS
 - 
POSSIBLE_OFFSET
);

2401 
	`LCD£tLöe
(
i
 + 1);

2402 
	`LCD¥ötCh¨
(
checkboxôemNames
[
i
+
POSSIBLE_OFFSET
]);

2404 
	`LCD¥öt
(' ');

2405 
	`LCD¥öt
–
rcO±i⁄s
[
i
+
POSSIBLE_OFFSET
] ? 'X' : '.');

2406 
	`LCD¸lf
();

2410 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_4


2411 #ifde‡
DISPLAY_FONT_DSIZE


2413 { 
off£t
 = 4; }

2419 
ch™√lNames
[8][4] = {"Ail", "Ele", "Yaw", "Thr", "Ax1", "Ax2", "Ax3", "Ax4"};

2420 
i
 = 
löír
++ % 8;

2421 
	`LCD£tLöe
((
i
 - 
POSSIBLE_OFFSET
)%8 + 1);

2424 
ãm∂©e3
[0] = ( '0' + 
i
+1);

2425 
	`LCD¥ötCh¨
(
ãm∂©e3
);

2426 
	`LCD¥ötCh¨
(
ch™√lNames
[
i
]);

2427 
unô
 = 
rcD©a
[
i
];

2428 
ãm∂©e7
[1] = 
	`digô1000
(
unô
);

2429 
ãm∂©e7
[2] = 
	`digô100
(
unô
);

2430 
ãm∂©e7
[3] = 
	`digô10
(
unô
);

2431 
ãm∂©e7
[4] = 
	`digô1
(
unô
);

2432 
	`LCD¥ötCh¨
(
ãm∂©e7
);

2433 
unô
 = 
	`c⁄°øö
(
rcD©a
[
i
],1000,2000);

2434 
	`LCDb¨
(
DISPLAY_COLUMNS
-11, (
unô
-1000)/10 );

2435 
	`LCD¸lf
();

2439 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_5


2440 #ifde‡
DISPLAY_FONT_DSIZE


2442 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2450 
uöt8_t
 
ödex
 = 0;

2451 
i
 = 
ödex
++ % 16;

2452 i‡(
i
 =0Ë
löír
 = 0;

2453 
	`LCD£tLöe
((
löír
 - 
POSSIBLE_OFFSET
)%8 +1);

2454 i‡(
i
 < 8) {

2455 i‡(
i
 < 
NUMBER_MOTOR
) {

2456 
	`ouçutMŸ‹Sîvo
(
i
, 
mŸ‹
[i]);

2457 
löír
++;

2459 
ödex
 = 8;

2462 
uöt8_t
 
j
 = 
i
-7;

2463 #i‡
	`deföed
(
PRI_SERVO_FROM
Ë&& deföed(
SEC_SERVO_FROM
)

2464 i‡((
PRI_SERVO_FROM
 <
j
 && 
PRI_SERVO_TO
 >jË|| (
SEC_SERVO_FROM
 <j && 
SEC_SERVO_TO
 >= j))

2465 #ñi‡
	`deföed
(
PRI_SERVO_FROM
)

2466 i‡(
j
 < 
PRI_SERVO_FROM
Ë
ödex
 = 7 + PRI_SERVO_FROM;

2467 i‡(
j
 > 
PRI_SERVO_TO
Ë
ödex
 = 16;

2470 #i‡
	`deföed
(
PRI_SERVO_FROM
Ë|| deföed(
SEC_SERVO_FROM
)

2472 
	`ouçutMŸ‹Sîvo
(
i
, 
£rvo
[
j
-1]);

2473 
löír
++;

2483 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_6


2484 #i‡
	`deföed
(
VBAT_CELLS
)

2485 #ifde‡
DISPLAY_FONT_DSIZE


2487 { 
off£t
 = 4; }

2493 
i
 = 
löír
++ % 
VBAT_CELLS_NUM
;

2494 
	`LCD£tLöe
((
i
 - 
POSSIBLE_OFFSET
)% 
VBAT_CELLS_NUM
 + 1);

2495 
	`°r˝y_P
(
löe1
,
	`PSTR
("_:-.-V __._V"));

2497 
löe1
[0] = 
	`digô1
(
i
+1);

2498 
uöt16_t
 
v
 = 
™Æog
.
vb©˚Œs
[
i
];

2499 i‡(
i
>0Ë
v
 = (
™Æog
.
vb©˚Œs
[i] >ánalog.vbatcells[i-1] ?ánalog.vbatcells[i] -ánalog.vbatcells[i-1] : 0);

2500 
löe1
[2] = 
	`digô10
(
v
);

2501 
löe1
[4] = 
	`digô1
(
v
);

2502 
löe1
[7] = 
	`digô100
(
™Æog
.
vb©˚Œs
[
i
]);

2503 
löe1
[8] = 
	`digô10
(
™Æog
.
vb©˚Œs
[
i
]);

2504 
löe1
[10] = 
	`digô1
(
™Æog
.
vb©˚Œs
[
i
]);

2508 i‡(
v
 > 
VBATNOMINAL
/
VBAT_CELLS_NUM
) v = VBATNOMINAL/VBAT_CELLS_NUM;

2509 
	`LCDb¨
(
DISPLAY_COLUMNS
-12, (
v
*100*
VBAT_CELLS_NUM
)/
VBATNOMINAL
 );

2511 
	`LCD¥ötCh¨
(
löe1
);

2512 
	`LCD¸lf
();

2518 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_7


2519 #i‡
GPS


2520 #ifde‡
DISPLAY_FONT_DSIZE


2522 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2527 
löír
++;

2528 
löír
 %= 6;

2529 
	`LCD£tLöe
(
löír
+1);

2530 
löír
 + 
POSSIBLE_OFFSET
) {

2532 
	`fûl_löe1_gps_œt
(0);

2533 
	`LCD¥ötCh¨
(
löe1
);

2536 
	`fûl_löe2_gps_l⁄
(0);

2537 
	`LCD¥ötCh¨
(
löe2
);

2540 
	`°r˝y_P
(
löe1
,
	`PSTR
("-- Sats"));

2542 
löe1
[0] = 
	`digô10
(
GPS_numS©
);

2543 
löe1
[1] = 
	`digô1
(
GPS_numS©
);

2544 
	`LCD¥ötCh¨
(
löe1
);

2560 
uöt8_t
 
v
 = (
GPS_•ìd
 * 0.036f);

2561 
	`°r˝y_P
(
löe1
,
	`PSTR
("--km/h max--km/h"));

2563 
löe1
[0] = 
	`digô10
(
v
);

2564 
löe1
[1] = 
	`digô1
(
v
);

2565 
v
 = (
GPS_•ìdMax
 * 0.036f);

2566 
löe1
[10] = 
	`digô10
(
v
);

2567 
löe1
[11] = 
	`digô1
(
v
);

2568 
	`LCD¥ötCh¨
(
löe1
);

2572 
	`ouçut_V
();

2575 
	`LCD¸lf
();

2580 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_8


2581 #ifde‡
DISPLAY_FONT_DSIZE


2583 { 
off£t
 = 5; }

2589 
Æ¨msNames
[][12] = {

2600 
löír
++;

2601 
löír
 %
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, 10 - 
POSSIBLE_OFFSET
);

2602 
	`LCD£tLöe
(
löír
+1);

2604 
	`LCD¥ötCh¨
–
Æ¨msNames
[
löír
 + 
POSSIBLE_OFFSET
] );

2605 
	`LCD¥öt
(' ');

2606 
	`LCD¥öt
–
	`digô1
–
Æ¨mAºay
[
löír
 + 
POSSIBLE_OFFSET
] ) );

2607 
	`LCD¸lf
();

2611 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_9


2612 #ifde‡
DISPLAY_FONT_DSIZE


2614 { 
off£t
 = 4; }

2619 
löír
++;

2620 
löír
 %
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, ((
∑ge9_func_±r
)/2Ë- 
POSSIBLE_OFFSET
);

2621 
	`LCD£tLöe
(
löír
+1);

2622 (*
∑ge9_func_±r
 [
löír
 + 
POSSIBLE_OFFSET
] ) ();

2623 
	`LCD¸lf
();

2626 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_R


2630 #i‡
	`deföed
(
LOG_VALUES
) && (LOG_VALUES >= 2)

2631 
cy˛eTimeMax
 = 0;

2632 
cy˛eTimeMö
 = 65535;

2634 #i‡
BARO


2635 #i‡
	`deföed
(
LOG_VALUES
)

2636 
BAROÆtMax
 = 0;

2639 #i‡
	`deföed
(
FAILSAFE
)

2640 
Áûß„Evíts
 = 0;

2642 
i2c_îr‹s_cou¡
 = 0;

2643 
f
.
OK_TO_ARM
 = 1;

2644 
ãÀmëry
 = 0;

2648 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

2650 
PRINT_FREE_RAM
;

2655 
	}
}

2659 
	$toggÀ_ãÀmëry
(
uöt8_t
 
t
) {

2660 i‡(
ãÀmëry
 =
t
)Åelemetry = 0;

2662 
ãÀmëry
 = 
t
;

2663 #i‡
	`deföed
–
OLED_I2C_128x64
)

2664 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_öô
();

2665 #ñi‡
	`deföed
(
OLED_DIGOLE
)

2666 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_DIGOLE_öô
();

2668 
	`LCD˛ór
();

2670 
	}
}

2673 #ifde‡
LOG_PERMANENT


2674 
	$dumpPLog
(
uöt8_t
 
fuŒ
) {

2675 #ifde‡
HAS_LCD


2676  
	`LCD√xéöe
();

2677 
	`LCD¥ötCh¨
("La°Of‡ "); LCD¥ötCh¨(
∂og
.
ru¬ög
 ? "KO" : "ok"); 
	`LCD√xéöe
();

2678 
	`LCD¥ötCh¨
("#O¿ "); 
	`LCD¥ötI¡16
(
∂og
.
°¨t
); 
	`LCD√xéöe
();

2679 
	`LCD¥ötCh¨
("Li„[mö]"); 
	`LCD¥ötI¡16
(
∂og
.
li„time
/60); 
	`LCD√xéöe
();

2680 i‡(
fuŒ
) {

2681 #ifde‡
DEBUG


2682 
	`LCD¥ötCh¨
("#¨m "); 
	`LCD¥ötI¡16
(
∂og
.
¨m
); 
	`LCD√xéöe
();

2683 
	`LCD¥ötCh¨
("#dißrm"); 
	`LCD¥ötI¡16
(
∂og
.
dißrm
); 
	`LCD√xéöe
();

2684 
	`LCD¥ötCh¨
("œ°[s]"); 
	`LCD¥ötI¡16
(
∂og
.
¨med_time
/1000000); 
	`LCD√xéöe
();

2685 
	`LCD¥ötCh¨
("#Áû@dis"); 
	`LCD¥ötI¡16
(
∂og
.
Áûß„
); 
	`LCD√xéöe
();

2686 
	`LCD¥ötCh¨
("#i2c@di†"); 
	`LCD¥ötI¡16
(
∂og
.
i2c
); 
	`LCD√xéöe
();

2698 
	`dñay
(4000);

2700 #ifde‡
LOG_PERMANENT_SERVICE_LIFETIME


2701 
	`£rvi˚CheckPLog
();

2703 #ifde‡
HAS_LCD


2704 
	`LCD˛ór
();

2706 
	}
}

2708 
	$LCD√xéöe
() {

2709 #i‡–
	`deföed
(
DISPLAY_MULTILINE
) )

2710 
 r
++;

2711 i‡(
 r
 > (
MULTILINE_PRE
+
MULTILINE_POST
)) {

2712 
 r
 = 1;

2713 
	`dñay
(4000);

2714 
	`LCD˛ór
();

2716 
	`LCD£tLöe
(
 r
);

2717 
LCD_FLUSH
;

2718 #ñi‡–
	`deföed
(
DISPLAY_2LINES
))

2719 #i‡(! (
	`deföed
(
LCD_TTY
) ) )

2720 
	`dñay
(600);

2722 #ifde‡
HAS_LCD


2723 
	`LCD¥ötCh¨
("\r\n");

2728 
	}
}

2730 #ifde‡
LOG_PERMANENT_SERVICE_LIFETIME


2731 
	$£rvi˚CheckPLog
() {

2732 i‡–(!
f
.
ARMED
Ë&& (
∂og
.
li„time
 > 
LOG_PERMANENT_SERVICE_LIFETIME
) ){

2733 
uöt8_t
 
i
 = 0; i<
	`max
(1, 
	`mö
(9,(
∂og
.
li„time
-
LOG_PERMANENT_SERVICE_LIFETIME
)>>10 )); i++) {

2734 #ifde‡
HAS_LCD


2735 
	`LCD¥ötCh¨
("SERVICEÜi„time"); 
	`LCD√xéöe
();

2737 
	`blökLED
(5,200,5);

2738 
	`dñay
(5000);

2740 
	`SET_ALARM
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

2742 
	}
}

	@LCD.h

1 #i‚de‡
LCD_H_


2 
	#LCD_H_


	)

4 
c⁄figuøti⁄Lo›
();

5 
LCD¥öt
(
uöt8_t
 
i
);

6 
lcd_ãÀmëry
();

7 
öôLCD
();

8 
i2c_OLED_DIGOLE_öô
 ();

9 
i2c_OLED_öô
();

10 
LCD˛ór
();

11 
toggÀ_ãÀmëry
(
uöt8_t
 
t
);

12 
dumpPLog
(
uöt8_t
 
fuŒ
);

15 
LCD¥ötI¡16
(
öt16_t
 
v
);

16 
LCD¸lf
();

18 
¥öt_u±ime
(
uöt16_t
 
£c
);

19 
ouçut_checkboxôems
();

22 
ouçut_Áûs
();

23 
ouçut_™√x
();

25 
ouçut_V
();

26 
ouçut_mAh
();

27 
ouçut_AmaxA
();

28 
ouçut_îr‹s_‹_¨medTime
();

29 
ouçut_WmaxW
();

30 
ouçut_u±ime_c£t
();

31 
ouçut_Ætôude
();

32 
ouçut_checkbox°©us
();

33 
ouçut_cy˛eMöMax
();

34 
ouçut_cy˛e
();

35 
ouçut_gyroX
();

36 
ouçut_gyroY
();

37 
ouçut_gyroZ
();

38 
ouçut_accX
();

39 
ouçut_accY
();

40 
ouçut_accZ
();

42 
ouçut_debug0
() ;

43 
ouçut_debug1
() ;

44 
ouçut_debug2
() ;

45 
ouçut_debug3
() ;

	@MultiWii.cpp

11 
	~<avr/io.h
>

13 
	~"Arduöo.h
"

14 
	~"c⁄fig.h
"

15 
	~"def.h
"

16 
	~"ty≥s.h
"

17 
	~"Mu…iWii.h
"

18 
	~"Aœrms.h
"

19 
	~"EEPROM.h
"

20 
	~"IMU.h
"

21 
	~"LCD.h
"

22 
	~"Ouçut.h
"

23 
	~"RX.h
"

24 
	~"Sís‹s.h
"

25 
	~"Sîül.h
"

26 
	~"GPS.h
"

27 
	~"PrŸocﬁ.h
"

29 
	~<avr/pgm•a˚.h
>

33 c⁄° 
	gpid«mes
[] 
	gPROGMEM
 =

46 c⁄° 
	gbox«mes
[] 
	gPROGMEM
 =

48 #i‡
ACC


52 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

55 #ifde‡
VARIOMETER


59 #i‡
deföed
(
HEADFREE
)

63 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

66 #i‡
deföed
(
CAMTRIG
)

69 #i‡
GPS


73 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

76 #i‡
deföed
(
BUZZER
)

79 #i‡
deföed
(
LED_FLASHER
)

83 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

86 #ifde‡
INFLIGHT_ACC_CALIBRATION


89 #ifde‡
GOVERNOR_P


92 #ifde‡
OSD_SWITCH


95 #i‡
GPS


101 c⁄° 
uöt8_t
 
	gboxids
[] 
	gPROGMEM
 = {

103 #i‡
ACC


107 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

110 #ifde‡
VARIOMETER


114 #i‡
deföed
(
HEADFREE
)

118 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

121 #i‡
deföed
(
CAMTRIG
)

124 #i‡
GPS


128 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

131 #i‡
deföed
(
BUZZER
)

134 #i‡
deföed
(
LED_FLASHER
)

138 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

141 #ifde‡
INFLIGHT_ACC_CALIBRATION


144 #ifde‡
GOVERNOR_P


147 #ifde‡
OSD_SWITCH


150 #i‡
GPS


157 
uöt32_t
 
	gcuºítTime
 = 0;

158 
uöt16_t
 
	g¥eviousTime
 = 0;

159 
uöt16_t
 
	gcy˛eTime
 = 0;

160 
uöt16_t
 
	gˇlibøtögA
 = 0;

161 
uöt16_t
 
	gˇlibøtögB
 = 0;

162 
uöt16_t
 
	gˇlibøtögG
;

163 
öt16_t
 
	gmagHﬁd
,
	ghódFªeModeHﬁd
;

164 
uöt8_t
 
	gvb©Mö
 = 
VBATNOMINAL
;

165 
uöt8_t
 
	grcO±i⁄s
[
CHECKBOXITEMS
];

166 
öt32_t
 
	gA…Hﬁd
;

167 
öt16_t
 
	gs⁄¨A…
;

168 
öt16_t
 
	gB¨oPID
 = 0;

169 
öt16_t
 
	gîr‹A…ôudeI
 = 0;

174 
öt16_t
 
	ggyroZîo
[3] = {0,0,0};

176 
imu_t
 
	gimu
;

178 
™Æog_t
 
	g™Æog
;

180 
Æt_t
 
	gÆt
;

182 
©t_t
 
	g©t
;

184 #i‡
deföed
(
ARMEDTIMEWARNING
)

185 
uöt32_t
 
	gArmedTimeW¨nögMi¸oSec⁄ds
 = 0;

188 
öt16_t
 
	gdebug
[4];

190 
Êags_°ru˘_t
 
	gf
;

193 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
)

194 
uöt16_t
 
	gcy˛eTimeMax
 = 0;

195 
uöt16_t
 
	gcy˛eTimeMö
 = 65535;

196 
öt32_t
 
	gBAROÆtMax
;

197 
uöt16_t
 
	gGPS_•ìdMax
 = 0;

198 #ifde‡
POWERMETER_HARD


199 
uöt16_t
 
	gpowîVÆueMaxMAH
 = 0;

201 #i‡
deföed
(
WATTS
)

202 
uöt16_t
 
	gw©tsMax
 = 0;

205 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
Ë|| deföed(
ARMEDTIMEWARNING
Ë|| deföed(
LOG_PERMANENT
)

206 
uöt32_t
 
	g¨medTime
 = 0;

209 
öt16_t
 
	gi2c_îr‹s_cou¡
 = 0;

212 #i‡
deföed
(
THROTTLE_ANGLE_CORRECTION
)

213 
öt16_t
 
	gthrŸéeAngÀC‹ª˘i⁄
 = 0;

214 
öt8_t
 
	gcosZ
 = 100;

222 #i‡
deföed
(
INFLIGHT_ACC_CALIBRATION
)

223 
uöt16_t
 
	gInÊightˇlibøtögA
 = 0;

224 
öt16_t
 
	gAccInÊightCÆibøti⁄Armed
;

225 
uöt16_t
 
	gAccInÊightCÆibøti⁄MósuªmítD⁄e
 = 0;

226 
uöt16_t
 
	gAccInÊightCÆibøti⁄SavëoEEProm
 = 0;

227 
uöt16_t
 
	gAccInÊightCÆibøti⁄A˘ive
 = 0;

233 #i‡
deföed
(
POWERMETER
Ë|| ( deföed(
LOG_VALUES
) && (LOG_VALUES >= 3) )

234 
uöt32_t
 
	gpMëî
[
PMOTOR_SUM
 + 1];

235 
uöt8_t
 
	gpMëîV
;

236 
uöt32_t
 
	gpAœrm
;

237 
uöt16_t
 
	gpowîVÆue
 = 0;

239 
uöt16_t
 
	götPowîTriggî1
;

244 #i‡
deföed
(
LCD_TELEMETRY
)

245 
uöt8_t
 
	gãÀmëry
 = 0;

246 
uöt8_t
 
	gãÀmëry_auto
 = 0;

247 
öt16_t
 
	g™√x650_ovîrun_cou¡
 = 0;

249 #ifde‡
LCD_TELEMETRY_STEP


250 
	gãÀmërySãpSequí˚
 [] = 
LCD_TELEMETRY_STEP
;

251 
uöt8_t
 
	gãÀmërySãpIndex
 = 0;

257 
	#ROL_LO
 (1<<(2*
ROLL
))

	)

258 
	#ROL_CE
 (3<<(2*
ROLL
))

	)

259 
	#ROL_HI
 (2<<(2*
ROLL
))

	)

260 
	#PIT_LO
 (1<<(2*
PITCH
))

	)

261 
	#PIT_CE
 (3<<(2*
PITCH
))

	)

262 
	#PIT_HI
 (2<<(2*
PITCH
))

	)

263 
	#YAW_LO
 (1<<(2*
YAW
))

	)

264 
	#YAW_CE
 (3<<(2*
YAW
))

	)

265 
	#YAW_HI
 (2<<(2*
YAW
))

	)

266 
	#THR_LO
 (1<<(2*
THROTTLE
))

	)

267 
	#THR_CE
 (3<<(2*
THROTTLE
))

	)

268 
	#THR_HI
 (2<<(2*
THROTTLE
))

	)

270 
öt16_t
 
	gÁûß„Evíts
 = 0;

271 vﬁ©ûê
öt16_t
 
	gÁûß„C¡
 = 0;

273 
öt16_t
 
	grcD©a
[
RC_CHANS
];

274 
öt16_t
 
	grcSîül
[8];

275 
öt16_t
 
	grcComm™d
[4];

276 
uöt8_t
 
	grcSîülCou¡
 = 0;

277 
öt16_t
 
	glookupPôchRﬁlRC
[5];

278 
uöt16_t
 
	glookupThrŸéeRC
[11];

280 #i‡
deföed
(
SERIAL_RX
)

281 vﬁ©ûê
uöt8_t
 
	g•ekFømeFœgs
;

282 vﬁ©ûê
uöt32_t
 
	g•ekTimeLa°
;

283 
uöt8_t
 
	g•ekFømeD⁄e
;

286 #i‡
deföed
(
OPENLRSv2MULTI
)

287 
uöt8_t
 
	gpŸ_P
,
	gpŸ_I
;

294 
öt16_t
 
	gaxisPID
[3];

295 
öt16_t
 
	gmŸ‹
[8];

296 
öt16_t
 
	g£rvo
[8] = {1500,1500,1500,1500,1500,1500,1500,1000};

301 
uöt8_t
 
	gdynP8
[2], 
	gdynD8
[2];

303 
globÆ_c⁄f_t
 
	gglobÆ_c⁄f
;

305 
c⁄f_t
 
	gc⁄f
;

307 #ifde‡
LOG_PERMANENT


308 
∂og_t
 
	g∂og
;

314 #i‡
GPS


315 
gps_c⁄f_°ru˘
 
	gGPS_c⁄f
;

317 
öt16_t
 
	gGPS_™gÀ
[2] = { 0, 0};

318 
öt32_t
 
	gGPS_co‹d
[2];

319 
öt32_t
 
	gGPS_home
[2];

320 
öt32_t
 
	gGPS_hﬁd
[2];

321 
öt32_t
 
	gGPS_¥ev
[2];

322 
öt32_t
 
	gGPS_poi
[2];

323 
uöt8_t
 
	gGPS_numS©
;

324 
uöt16_t
 
	gGPS_di°™˚ToHome
;

325 
öt16_t
 
	gGPS_dúe˘i⁄ToHome
;

326 
öt32_t
 
	gGPS_dúe˘i⁄ToPoi
;

327 
uöt16_t
 
	gGPS_Ætôude
;

328 
uöt16_t
 
	gGPS_•ìd
;

329 
uöt8_t
 
	gGPS_upd©e
 = 0;

330 
uöt16_t
 
	gGPS_ground_cour£
 = 0;

333 
uöt8_t
 
	gNAV_°©e
 = 0;

334 
uöt8_t
 
	gNAV_îr‹
 = 0;

335 
uöt8_t
 
	g¥v_gps_modes
 = 0;

336 
uöt32_t
 
	g«v_timî_°›
 = 0;

337 
uöt16_t
 
	g«v_hﬁd_time
;

338 
uöt8_t
 
	gNAV_∑u£d_©
 = 0;

340 
uöt8_t
 
	g√xt_°ï
 = 1;

341 
öt16_t
 
	gjump_times
 = -10;

342 #i‡
GPS


343 
missi⁄_°ï_°ru˘
 
	gmissi⁄_°ï
;

348 
öt16_t
 
	g«v
[2];

349 
öt16_t
 
	g«v_øãd
[2];

352 
öt32_t
 
	g‹igöÆ_Ætôude
;

354 
öt32_t
 
	gèrgë_Ætôude
;

356 
öt32_t
 
	gÆt_to_hﬁd
;

358 
uöt32_t
 
	gÆt_ch™ge_timî
;

359 
öt8_t
 
	gÆt_ch™ge_Êag
;

360 
uöt32_t
 
	gÆt_ch™ge
;

362 
uöt8_t
 
	gÆ¨mAºay
[
ALRM_FAC_SIZE
];

364 #i‡
BARO


365 
öt32_t
 
	gb¨oPªssuª
;

366 
öt16_t
 
	gb¨oTem≥øtuª
;

367 
öt32_t
 
	gb¨oPªssuªSum
;

370 
	$™√xCode
() {

371 
uöt32_t
 
ˇlibøãdAccTime
;

372 
uöt16_t
 
tmp
,
tmp2
;

373 
uöt8_t
 
axis
,
¥›1
,
¥›2
;

376 #ifde‡
HELICOPTER


377 
	#DYN_THR_PID_CHANNEL
 
COLLECTIVE_PITCH


	)

379 
	#DYN_THR_PID_CHANNEL
 
THROTTLE


	)

381 
¥›2
 = 128;

382 i‡(
rcD©a
[
DYN_THR_PID_CHANNEL
]>1500) {

383 i‡(
rcD©a
[
DYN_THR_PID_CHANNEL
]<2000) {

384 
¥›2
 -((
uöt16_t
)
c⁄f
.
dynThrPID
*(
rcD©a
[
DYN_THR_PID_CHANNEL
]-1500)>>9);

386 
¥›2
 -
c⁄f
.
dynThrPID
;

390 
axis
=0;axis<3;axis++) {

391 
tmp
 = 
	`mö
(
	`abs
(
rcD©a
[
axis
]-
MIDRC
),500);

392 #i‡
	`deföed
(
DEADBAND
)

393 i‡(
tmp
>
DEADBAND
) {Åmp -= DEADBAND; }

394 { 
tmp
=0; }

396 if(
axis
!=2) {

397 
tmp2
 = 
tmp
>>7;

398 
rcComm™d
[
axis
] = 
lookupPôchRﬁlRC
[
tmp2
] + ((
tmp
-(tmp2<<7)) * (lookupPitchRollRC[tmp2+1]-lookupPitchRollRC[tmp2])>>7);

399 
¥›1
 = 128-((
uöt16_t
)
c⁄f
.
rﬁlPôchR©e
*
tmp
>>9);

400 
¥›1
 = (
uöt16_t
Ìr›1*
¥›2
>>7;

401 
dynP8
[
axis
] = (
uöt16_t
)
c⁄f
.
pid
[axis].
P8
*
¥›1
>>7;

402 
dynD8
[
axis
] = (
uöt16_t
)
c⁄f
.
pid
[axis].
D8
*
¥›1
>>7;

404 
rcComm™d
[
axis
] = 
tmp
;

406 i‡(
rcD©a
[
axis
]<
MIDRC
Ë
rcComm™d
[axis] = -rcCommand[axis];

408 
tmp
 = 
	`c⁄°øö
(
rcD©a
[
THROTTLE
],
MINCHECK
,2000);

409 
tmp
 = (
uöt32_t
)—mp-
MINCHECK
)*2559/(2000-MINCHECK);

410 
tmp2
 = 
tmp
/256;

411 
rcComm™d
[
THROTTLE
] = 
lookupThrŸéeRC
[
tmp2
] + (
tmp
-tmp2*256) * (lookupThrottleRC[tmp2+1]-lookupThrottleRC[tmp2]) / 256;

412 #i‡
	`deföed
(
HEADFREE
)

413 if(
f
.
HEADFREE_MODE
) {

414 
ødDiff
 = (
©t
.
hódög
 - 
hódFªeModeHﬁd
) * 0.0174533f;

415 
cosDiff
 = 
	`cos
(
ødDiff
);

416 
söDiff
 = 
	`sö
(
ødDiff
);

417 
öt16_t
 
rcComm™d_PITCH
 = 
rcComm™d
[
PITCH
]*
cosDiff
 +ÑcComm™d[
ROLL
]*
söDiff
;

418 
rcComm™d
[
ROLL
] =ÑcComm™d[ROLL]*
cosDiff
 -ÑcComm™d[
PITCH
]*
söDiff
;

419 
rcComm™d
[
PITCH
] = 
rcComm™d_PITCH
;

424 
uöt8_t
 
™ÆogRódî
 =0;

425 
™ÆogRódî
++ % (3+
VBAT_CELLS_NUM
)) {

428 #i‡
	`deföed
(
POWERMETER_HARD
)

429 
uöt32_t
 
œ°Ród
 = 
cuºítTime
;

430 
uöt8_t
 
öd
 = 0;

431 
uöt16_t
 
pvec
[
PSENSOR_SMOOTH
], 
psum
;

432 
uöt16_t
 
p
 = 
	`™ÆogRód
(
PSENSORPIN
);

435 #i‡
PSENSOR_SMOOTH
 != 1

436 
psum
 +
p
;

437 
psum
 -
pvec
[
öd
];

438 
pvec
[
öd
++] = 
p
;

439 
öd
 %
PSENSOR_SMOOTH
;

440 
p
 = 
psum
 / 
PSENSOR_SMOOTH
;

442 
powîVÆue
 = ( 
c⁄f
.
p£ns‹nuŒ
 > 
p
 ? conf.psensornull -Ö :Ö - conf.psensornull);

443 
™Æog
.
am≥øge
 = ((
uöt32_t
)
powîVÆue
 * 
c⁄f
.
pöt2ma
) / 100;

444 
pMëî
[
PMOTOR_SUM
] +((
cuºítTime
-
œ°Ród
Ë* (
uöt32_t
)((uöt32_t)
powîVÆue
*
c⁄f
.
pöt2ma
))/100000;

445 
œ°Ród
 = 
cuºítTime
;

452 #i‡
	`deföed
(
VBAT
Ë&& !deföed(
VBAT_CELLS
)

453 
uöt8_t
 
öd
 = 0;

454 
uöt16_t
 
vvec
[
VBAT_SMOOTH
], 
vsum
;

455 
uöt16_t
 
v
 = 
	`™ÆogRód
(
V_BATPIN
);

456 #i‡
VBAT_SMOOTH
 == 1

457 
™Æog
.
vb©
 = (
v
*
VBAT_PRESCALER
Ë/ 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

459 
vsum
 +
v
;

460 
vsum
 -
vvec
[
öd
];

461 
vvec
[
öd
++] = 
v
;

462 
öd
 %
VBAT_SMOOTH
;

463 #i‡
VBAT_SMOOTH
 =
VBAT_PRESCALER


464 
™Æog
.
vb©
 = 
vsum
 / 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

465 #ñi‡
VBAT_SMOOTH
 < 
VBAT_PRESCALER


466 
™Æog
.
vb©
 = (
vsum
 * (
VBAT_PRESCALER
/
VBAT_SMOOTH
)Ë/ 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

468 
™Æog
.
vb©
 = ((
vsum
 /
VBAT_SMOOTH
Ë* 
VBAT_PRESCALER
Ë/ 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

476 #i‡
	`deföed
(
RX_RSSI
)

477 
uöt8_t
 
öd
 = 0;

478 
uöt16_t
 
rvec
[
RSSI_SMOOTH
], 
rsum
, 
r
;

481 #i‡
	`deföed
(
RX_RSSI_CHAN
)

482 
uöt16_t
 
rssi_I≈ut
 = 
	`c⁄°øö
(
rcD©a
[
RX_RSSI_CHAN
],1000,2000);

483 
r
 = 
	`m≠
((
uöt16_t
)
rssi_I≈ut
 , 1000, 2000, 0, 1023);

485 
r
 = 
	`™ÆogRód
(
RX_RSSI_PIN
);

488 #i‡
RSSI_SMOOTH
 == 1

489 
™Æog
.
rssi
 = 
r
;

491 
rsum
 +
r
;

492 
rsum
 -
rvec
[
öd
];

493 
rvec
[
öd
++] = 
r
;

494 
öd
 %
RSSI_SMOOTH
;

495 
r
 = 
rsum
 / 
RSSI_SMOOTH
;

496 
™Æog
.
rssi
 = 
r
;

503 #i‡
	`deföed
(
VBAT
Ë&& deföed(
VBAT_CELLS
)

504 i‡–(
™ÆogRódî
<4Ë|| (™ÆogRódî>4+
VBAT_CELLS_NUM
-1) ) ;

505 
uöt8_t
 
öd
 = 
™ÆogRódî
-4;

506 
uöt16_t
 
vb©˚Œs_pös
[
VBAT_CELLS_NUM
] = 
VBAT_CELLS_PINS
;

507 
uöt8_t
 
vb©˚Œs_off£t
[
VBAT_CELLS_NUM
] = 
VBAT_CELLS_OFFSETS
;

508 
uöt8_t
 
vb©˚Œs_div
[
VBAT_CELLS_NUM
] = 
VBAT_CELLS_DIVS
;

509 
uöt16_t
 
v
 = 
	`™ÆogRód
(
vb©˚Œs_pös
[
öd
]);

510 
™Æog
.
vb©˚Œs
[
öd
] = 
vb©˚Œs_off£t
[öd] + (
v
 << 2Ë/ 
vb©˚Œs_div
[ind];

511 i‡(
öd
 =
VBAT_CELLS_NUM
 -1Ë
™Æog
.
vb©
 =á«log.
vb©˚Œs
[ind];

517 #i‡
	`deföed
–
POWERMETER_HARD
 ) && (deföed(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
))

518 i‡(
™Æog
.
am≥øge
 > 
powîVÆueMaxMAH
)ÖowerValueMaxMAH =ánalog.amperage;

521 #i‡
	`deföed
(
WATTS
)

522 
™Æog
.
w©ts
 = (™Æog.
am≥øge
 *á«log.
vb©
) / 100;

523 #i‡
	`deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
)

524 i‡(
™Æog
.
w©ts
 > 
w©tsMax
) wattsMax =ánalog.watts;

528 #i‡
	`deföed
(
BUZZER
)

529 
	`Æ¨mH™dÀr
();

533 i‡–(
ˇlibøtögA
>0 && 
ACC
 ) || (
ˇlibøtögG
>0) ) {

534 
LEDPIN_TOGGLE
;

536 i‡(
f
.
ACC_CALIBRATED
Ë{
LEDPIN_OFF
;}

537 i‡(
f
.
ARMED
Ë{
LEDPIN_ON
;}

540 #i‡
	`deföed
(
LED_RING
)

541 
uöt32_t
 
LEDTime
;

542 i‡–
cuºítTime
 > 
LEDTime
 ) {

543 
LEDTime
 = 
cuºítTime
 + 50000;

544 
	`i2CLedRögSèã
();

548 #i‡
	`deföed
(
LED_FLASHER
)

549 
	`auto_swôch_Àd_Êashî
();

552 i‡–
cuºítTime
 > 
ˇlibøãdAccTime
 ) {

553 i‡(! 
f
.
SMALL_ANGLES_25
) {

555 
f
.
ACC_CALIBRATED
 = 0;

556 
LEDPIN_TOGGLE
;

557 
ˇlibøãdAccTime
 = 
cuºítTime
 + 100000;

559 
f
.
ACC_CALIBRATED
 = 1;

563 #i‡!(
	`deföed
(
SERIAL_RX
Ë&& deföed(
PROMINI
))

564 
	`£rülCom
();

567 #i‡
	`deföed
(
POWERMETER
)

568 
™Æog
.
ötPowîMëîSum
 = (
pMëî
[
PMOTOR_SUM
]/
PLEVELDIV
);

569 
ötPowîTriggî1
 = 
c⁄f
.
powîTriggî1
 * 
PLEVELSCALE
;

572 #ifde‡
LCD_TELEMETRY_AUTO


573 
ãÀmëryAutoSequí˚
 [] = 
LCD_TELEMETRY_AUTO
;

574 
uöt8_t
 
ãÀmëryAutoIndex
 = 0;

575 
uöt16_t
 
ãÀmëryAutoTimî
 = 0;

576 i‡–(
ãÀmëry_auto
Ë&& (! (++
ãÀmëryAutoTimî
 % 
LCD_TELEMETRY_AUTO_FREQ
) ) ){

577 
ãÀmëry
 = 
ãÀmëryAutoSequí˚
[++
ãÀmëryAutoIndex
 % 
	`°æí
(telemetryAutoSequence)];

578 
	`LCD˛ór
();

581 #ifde‡
LCD_TELEMETRY


582 
uöt16_t
 
ãÀmëryTimî
 = 0;

583 i‡(! (++
ãÀmëryTimî
 % 
LCD_TELEMETRY_FREQ
)) {

584 #i‡(
LCD_TELEMETRY_DEBUG
+0 > 0)

585 
ãÀmëry
 = 
LCD_TELEMETRY_DEBUG
;

587 i‡(
ãÀmëry
Ë
	`lcd_ãÀmëry
();

591 #i‡
GPS
 & 
	`deföed
(
GPS_LED_INDICATOR
)

592 
uöt32_t
 
GPSLEDTime
;

593 
uöt8_t
 
bl˙t
;

594 if(
cuºítTime
 > 
GPSLEDTime
) {

595 if(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5) {

596 if(++
bl˙t
 > 2*
GPS_numS©
) blcnt = 0;

597 
GPSLEDTime
 = 
cuºítTime
 + 150000;

598 if(
bl˙t
 >10 && ((bl˙t%2Ë=0)Ë{
STABLEPIN_ON
;} {
STABLEPIN_OFF
;}

600 if((
GPS_upd©e
 =1Ë&& !
f
.
GPS_FIX
Ë{
STABLEPIN_ON
;} {
STABLEPIN_OFF
;}

601 
bl˙t
 = 0;

606 #i‡
	`deföed
(
LOG_VALUES
) && (LOG_VALUES >= 2)

607 i‡(
cy˛eTime
 > 
cy˛eTimeMax
) cycleTimeMax = cycleTime;

608 i‡(
cy˛eTime
 < 
cy˛eTimeMö
) cycleTimeMin = cycleTime;

610 i‡(
f
.
ARMED
) {

611 #i‡
	`deföed
(
LCD_TELEMETRY
Ë|| deföed(
ARMEDTIMEWARNING
Ë|| deföed(
LOG_PERMANENT
)

612 
¨medTime
 +(
uöt32_t
)
cy˛eTime
;

614 #i‡
	`deföed
(
VBAT
)

615 i‡–(
™Æog
.
vb©
 > 
NO_VBAT
Ë&& (™Æog.vb© < 
vb©Mö
) ) vbatMin =ánalog.vbat;

617 #ifde‡
LCD_TELEMETRY


618 #i‡
BARO


619 i‡–(
Æt
.
E°A…
 > 
BAROÆtMax
) ) BAROaltMax =ált.EstAlt;

621 #i‡
GPS


622 i‡–(
GPS_•ìd
 > 
GPS_•ìdMax
) ) GPS_speedMax = GPS_speed;

626 
	}
}

628 
	$£tup
() {

629 
	`SîülO≥n
(0,
SERIAL0_COM_SPEED
);

630 #i‡
	`deföed
(
PROMICRO
)

631 
	`SîülO≥n
(1,
SERIAL1_COM_SPEED
);

633 #i‡
	`deföed
(
MEGA
)

634 
	`SîülO≥n
(1,
SERIAL1_COM_SPEED
);

635 
	`SîülO≥n
(2,
SERIAL2_COM_SPEED
);

636 
	`SîülO≥n
(3,
SERIAL3_COM_SPEED
);

638 
LEDPIN_PINMODE
;

639 
POWERPIN_PINMODE
;

640 
BUZZERPIN_PINMODE
;

641 
STABLEPIN_PINMODE
;

642 
POWERPIN_OFF
;

643 
	`öôOuçut
();

644 
	`ªadGlobÆSë
();

645 #i‚de‡
NO_FLASH_CHECK


646 #i‡
	`deföed
(
MEGA
)

647 
uöt16_t
 
i
 = 65000;

649 
uöt16_t
 
i
 = 32000;

651 
uöt16_t
 
Êashsum
 = 0;

652 
uöt8_t
 
pbyt
;

653 
i
--) {

654 
pbyt
 = 
	`pgm_ªad_byã
(
i
);

655 
Êashsum
 +
pbyt
;

656 
Êashsum
 ^(
pbyt
<<8);

659 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


660 
globÆ_c⁄f
.
cuºítSë
=2;

662 
globÆ_c⁄f
.
cuºítSë
=0;

665 #i‚de‡
NO_FLASH_CHECK


666 if(
	`ªadEEPROM
()) {

667 if(
Êashsum
 !
globÆ_c⁄f
.ÊashsumË
	`upd©e_c⁄°™ts
();

670 
	`ªadEEPROM
();

672 if(
globÆ_c⁄f
.
cuºítSë
 == 0) ;

673 
globÆ_c⁄f
.
cuºítSë
--;

675 
	`ªadGlobÆSë
();

676 #i‚de‡
NO_FLASH_CHECK


677 if(
Êashsum
 !
globÆ_c⁄f
.flashsum) {

678 
globÆ_c⁄f
.
Êashsum
 = flashsum;

679 
	`wrôeGlobÆSë
(1);

682 
	`ªadEEPROM
();

683 
	`blökLED
(2,40,
globÆ_c⁄f
.
cuºítSë
+1);

685 #i‡
GPS


686 
	`ªˇŒGPSc⁄f
();

689 
	`c⁄figuªRe˚ivî
();

690 #i‡
	`deföed
 (
PILOTLAMP
)

691 
PL_INIT
;

693 #i‡
	`deföed
(
OPENLRSv2MULTI
)

694 
	`öôO≥nLRS
();

696 
	`öôSís‹s
();

697 #i‡
GPS


698 
	`GPS_£t_pids
();

700 
¥eviousTime
 = 
	`mi¸os
();

701 #i‡
	`deföed
(
GIMBAL
)

702 
ˇlibøtögA
 = 512;

704 
ˇlibøtögG
 = 512;

705 
ˇlibøtögB
 = 200;

706 #i‡
	`deföed
(
POWERMETER
)

707 
uöt8_t
 
j
=0; j<=
PMOTOR_SUM
; j++Ë
pMëî
[j]=0;

710 #i‡
GPS


711 #i‡
	`deföed
(
GPS_SERIAL
)

712 
	`GPS_SîülInô
();

714 
GPS_c⁄f
.
max_wp_numbî
 = 
	`gëMaxWPNumbî
();

717 #i‡
	`deföed
(
LCD_ETPP
Ë|| deföed(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
Ë|| deföed(
OLED_I2C_128x64
Ë|| deföed(
OLED_DIGOLE
Ë|| deföed(
LCD_TELEMETRY_STEP
)

718 
	`öôLCD
();

720 #ifde‡
LCD_TELEMETRY_DEBUG


721 
ãÀmëry_auto
 = 1;

723 #ifde‡
LCD_CONF_DEBUG


724 
	`c⁄figuøti⁄Lo›
();

726 #ifde‡
LANDING_LIGHTS_DDR


727 
	`öô_œndög_lights
();

729 #ifde‡
FASTER_ANALOG_READS


730 
ADCSRA
 |
	`_BV
(
ADPS2
Ë; ADCSRA &~_BV(
ADPS1
); ADCSRA &~_BV(
ADPS0
);

732 #i‡
	`deföed
(
LED_FLASHER
)

733 
	`öô_Àd_Êashî
();

734 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE
);

736 
f
.
SMALL_ANGLES_25
=1;

737 #ifde‡
LOG_PERMANENT


739 
	`ªadPLog
();

740 
∂og
.
li„time
 +∂og.
¨med_time
 / 1000000;

741 
∂og
.
°¨t
++;

743 #ifde‡
LOG_PERMANENT_SHOW_AT_STARTUP


744 
	`dumpPLog
(0);

746 
∂og
.
¨med_time
 = 0;

749 #ifde‡
DEBUGMSG


750 
	`debugmsg_≠≥nd_°r
("initialization completed\n");

752 
	}
}

754 
	$go_¨m
() {

755 if(
ˇlibøtögG
 == 0

756 #i‡
	`deföed
(
ONLYARMWHENFLAT
)

757 && 
f
.
ACC_CALIBRATED


759 #i‡
	`deföed
(
FAILSAFE
)

760 && 
Áûß„C¡
 < 2

762 #i‡
GPS
 && 
	`deföed
(
ONLY_ALLOW_ARM_WITH_GPS_3DFIX
)

763 && (
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5)

766 if(!
f
.
ARMED
 && !f.
BARO_MODE
) {

767 
f
.
ARMED
 = 1;

768 #i‡
	`deföed
(
HEADFREE
)

769 
hódFªeModeHﬁd
 = 
©t
.
hódög
;

771 
magHﬁd
 = 
©t
.
hódög
;

772 #i‡
	`deföed
(
VBAT
)

773 i‡(
™Æog
.
vb©
 > 
NO_VBAT
Ë
vb©Mö
 =ánalog.vbat;

775 #ifde‡
ALTITUDE_RESET_ON_ARM


776 #i‡
BARO


777 
ˇlibøtögB
 = 10;

780 #ifde‡
LCD_TELEMETRY


781 #i‡
BARO


782 
BAROÆtMax
 = 
Æt
.
E°A…
;

784 #i‡
GPS


785 
GPS_•ìdMax
 = 0;

787 #i‡
	`deföed
–
POWERMETER_HARD
 ) && (deföed(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
))

788 
powîVÆueMaxMAH
 = 0;

790 #ifde‡
WATTS


791 
w©tsMax
 = 0;

794 #ifde‡
LOG_PERMANENT


795 
∂og
.
¨m
++;

796 
∂og
.
ru¬ög
 = 1;

798 
	`wrôePLog
();

801 } if(!
f
.
ARMED
) {

802 
	`blökLED
(2,255,1);

803 
	`SET_ALARM
(
ALRM_FAC_ACC
, 
ALRM_LVL_ON
);

805 
	}
}

806 
	$go_dißrm
() {

807 i‡(
f
.
ARMED
) {

808 
f
.
ARMED
 = 0;

809 #ifde‡
LOG_PERMANENT


810 
∂og
.
dißrm
++;

811 
∂og
.
¨med_time
 = 
¨medTime
 ;

812 i‡(
Áûß„Evíts
Ë
∂og
.
Áûß„
++;

813 i‡(
i2c_îr‹s_cou¡
 > 10Ë
∂og
.
i2c
++;

814 
∂og
.
ru¬ög
 = 0;

816 
	`wrôePLog
();

819 
	}
}

822 
	$lo›
 () {

823 
uöt8_t
 
rcDñayComm™d
;

824 
uöt8_t
 
rcSticks
;

825 
uöt8_t
 
axis
,
i
;

826 
öt16_t
 
îr‹
,
îr‹AngÀ
;

827 
öt16_t
 
dñè
;

828 
öt16_t
 
PTîm
 = 0,
ITîm
 = 0,
DTîm
, 
PTîmACC
, 
ITîmACC
;

829 
öt16_t
 
œ°Gyro
[2] = {0,0};

830 
öt16_t
 
îr‹AngÀI
[2] = {0,0};

831 #i‡
PID_CONTROLLER
 == 1

832 
öt32_t
 
îr‹GyroI_YAW
;

833 
öt16_t
 
dñè1
[2],
dñè2
[2];

834 
öt16_t
 
îr‹GyroI
[2] = {0,0};

835 #ñi‡
PID_CONTROLLER
 == 2

836 
öt16_t
 
dñè1
[3],
dñè2
[3];

837 
öt32_t
 
îr‹GyroI
[3] = {0,0,0};

838 
öt16_t
 
œ°Eº‹
[3] = {0,0,0};

839 
öt16_t
 
dñèSum
;

840 
öt16_t
 
AngÀR©eTmp
, 
R©eEº‹
;

842 
uöt16_t
 
rcTime
 = 0;

843 
öt16_t
 
öôülThrŸéeHﬁd
;

844 
öt16_t
 
rc
;

845 
öt32_t
 
¥›
 = 0;

847 #i‡
	`deföed
(
SERIAL_RX
)

848 i‡(
•ekFømeFœgs
 =0x01Ë
	`ªadSîül_RX
();

850 #i‡
	`deföed
(
OPENLRSv2MULTI
)

851 
	`Ród_O≥nLRS_RC
();

854 #i‡
	`deföed
(
SERIAL_RX
)

855 i‡((
•ekFømeD⁄e
 =0x01Ë|| ((
öt16_t
)(
cuºítTime
-
rcTime
) >0 )) {

856 
•ekFømeD⁄e
 = 0x00;

858 i‡((
öt16_t
)(
cuºítTime
-
rcTime
) >0 ) {

860 
rcTime
 = 
cuºítTime
 + 20000;

861 
	`compuãRC
();

863 #i‡
	`deföed
(
FAILSAFE
)

864 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& 
f
.
ARMED
) {

865 
i
=0; i<3; i++Ë
rcD©a
[i] = 
MIDRC
;

866 
rcD©a
[
THROTTLE
] = 
c⁄f
.
Áûß„_thrŸée
;

867 i‡(
Áûß„C¡
 > 5*(
FAILSAFE_DELAY
+
FAILSAFE_OFF_DELAY
)) {

868 
	`go_dißrm
();

869 
f
.
OK_TO_ARM
 = 0;

871 
Áûß„Evíts
++;

873 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& !
f
.
ARMED
) {

874 
	`go_dißrm
();

875 
f
.
OK_TO_ARM
 = 0;

877 
Áûß„C¡
++;

883 
uöt8_t
 
°Tmp
 = 0;

884 
i
=0;i<4;i++) {

885 
°Tmp
 >>= 2;

886 if(
rcD©a
[
i
] > 
MINCHECK
Ë
°Tmp
 |= 0x80;

887 if(
rcD©a
[
i
] < 
MAXCHECK
Ë
°Tmp
 |= 0x40;

889 if(
°Tmp
 =
rcSticks
) {

890 if(
rcDñayComm™d
<250)ÑcDelayCommand++;

891 } 
rcDñayComm™d
 = 0;

892 
rcSticks
 = 
°Tmp
;

895 i‡(
rcD©a
[
THROTTLE
] <
MINCHECK
) {

896 #i‡!
	`deföed
(
FIXEDWING
)

897 
îr‹GyroI
[
ROLL
] = 0;Éº‹GyroI[
PITCH
] = 0;

898 #i‡
PID_CONTROLLER
 == 1

899 
îr‹GyroI_YAW
 = 0;

900 #ñi‡
PID_CONTROLLER
 == 2

901 
îr‹GyroI
[
YAW
] = 0;

903 
îr‹AngÀI
[
ROLL
] = 0;Éº‹AngÀI[
PITCH
] = 0;

905 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] > 0) {

906 i‡–
rcO±i⁄s
[
BOXARM
] && 
f
.
OK_TO_ARM
 ) 
	`go_¨m
(); i‡(f.
ARMED
Ë
	`go_dißrm
();

909 if(
rcDñayComm™d
 == 20) {

910 if(
f
.
ARMED
) {

911 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_YAW


912 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_CE
 + 
ROL_CE
Ë
	`go_dißrm
();

914 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_ROLL


915 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_LO
Ë
	`go_dißrm
();

918 
i
=0;

919 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_CE
) {

920 
ˇlibøtögG
=512;

921 #i‡
GPS


922 
	`GPS_ª£t_home_posôi⁄
();

924 #i‡
BARO


925 
ˇlibøtögB
=10;

928 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

929 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_HI
) {

930 i‡(
AccInÊightCÆibøti⁄MósuªmítD⁄e
){

931 
AccInÊightCÆibøti⁄MósuªmítD⁄e
 = 0;

932 
AccInÊightCÆibøti⁄SavëoEEProm
 = 1;

934 
AccInÊightCÆibøti⁄Armed
 = !AccInflightCalibrationArmed;

935 #i‡
	`deföed
(
BUZZER
)

936 i‡(
AccInÊightCÆibøti⁄Armed
Ë
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_2
);

937 
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_ELSE
);

942 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


943 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_CE
 + 
ROL_LO
Ë
i
=1;

944 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_CE
Ë
i
=2;

945 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_CE
 + 
ROL_HI
Ë
i
=3;

946 if(
i
) {

947 
globÆ_c⁄f
.
cuºítSë
 = 
i
-1;

948 
	`wrôeGlobÆSë
(0);

949 
	`ªadEEPROM
();

950 
	`blökLED
(2,40,
i
);

951 
	`SET_ALARM
(
ALRM_FAC_TOGGLE
, 
i
);

954 i‡(
rcSticks
 =
THR_LO
 + 
YAW_HI
 + 
PIT_HI
 + 
ROL_CE
) {

955 #i‡
	`deföed
(
LCD_CONF
)

956 
	`c⁄figuøti⁄Lo›
();

958 
¥eviousTime
 = 
	`mi¸os
();

960 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_YAW


961 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_HI
 + 
PIT_CE
 + 
ROL_CE
Ë
	`go_¨m
();

963 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_ROLL


964 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_HI
Ë
	`go_¨m
();

966 #ifde‡
LCD_TELEMETRY_AUTO


967 i‡(
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_HI
 + 
ROL_LO
) {

968 i‡(
ãÀmëry_auto
) {

969 
ãÀmëry_auto
 = 0;

970 
ãÀmëry
 = 0;

972 
ãÀmëry_auto
 = 1;

975 #ifde‡
LCD_TELEMETRY_STEP


976 i‡(
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_HI
 + 
ROL_HI
) {

977 
ãÀmëry
 = 
ãÀmërySãpSequí˚
[++
ãÀmërySãpIndex
 % 
	`°æí
(telemetryStepSequence)];

978 #i‡
	`deföed
–
OLED_I2C_128x64
)

979 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_öô
();

980 #ñi‡
	`deföed
(
OLED_DIGOLE
)

981 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_DIGOLE_öô
();

983 
	`LCD˛ór
();

986 #i‡
ACC


987 i‡(
rcSticks
 =
THR_HI
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_CE
Ë
ˇlibøtögA
=512;

989 #i‡
MAG


990 i‡(
rcSticks
 =
THR_HI
 + 
YAW_HI
 + 
PIT_LO
 + 
ROL_CE
Ë
f
.
CALIBRATE_MAG
 = 1;

992 
i
=0;

993 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_HI
 + 
ROL_CE
Ë{
c⁄f
.
™gÀTrim
[
PITCH
]+=2; 
i
=1;}

994 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_LO
 + 
ROL_CE
Ë{
c⁄f
.
™gÀTrim
[
PITCH
]-=2; 
i
=1;}

995 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_HI
Ë{
c⁄f
.
™gÀTrim
[
ROLL
] +=2; 
i
=1;}

996 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_LO
Ë{
c⁄f
.
™gÀTrim
[
ROLL
] -=2; 
i
=1;}

997 i‡(
i
) {

998 
	`wrôeP¨ams
(1);

999 
rcDñayComm™d
 = 0;

1000 #i‡
	`deföed
(
LED_RING
)

1001 
	`blökLedRög
();

1006 #i‡
	`deföed
(
LED_FLASHER
)

1007 
	`Àd_Êashî_auto£À˘_£quí˚
();

1010 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

1011 i‡(
AccInÊightCÆibøti⁄Armed
 && 
f
.
ARMED
 && 
rcD©a
[
THROTTLE
] > 
MINCHECK
 && !
rcO±i⁄s
[
BOXARM
] ){

1012 
InÊightˇlibøtögA
 = 50;

1013 
AccInÊightCÆibøti⁄Armed
 = 0;

1015 i‡(
rcO±i⁄s
[
BOXCALIB
]) {

1016 i‡(!
AccInÊightCÆibøti⁄A˘ive
 && !
AccInÊightCÆibøti⁄MósuªmítD⁄e
){

1017 
InÊightˇlibøtögA
 = 50;

1019 }if(
AccInÊightCÆibøti⁄MósuªmítD⁄e
 && !
f
.
ARMED
){

1020 
AccInÊightCÆibøti⁄MósuªmítD⁄e
 = 0;

1021 
AccInÊightCÆibøti⁄SavëoEEProm
 = 1;

1025 #i‡
	`deföed
(
EXTENDED_AUX_STATES
)

1026 
uöt32_t
 
auxSèã
 = 0;

1027 
i
=0;i<4;i++)

1028 
auxSèã
 |=

1029 (
uöt32_t
)(
rcD©a
[
AUX1
+
i
]<1230)<<(6*i) |

1030 (
uöt32_t
)(1231<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1360)<<(6*i+1) |

1031 (
uöt32_t
)(1361<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1490)<<(6*i+2) |

1032 (
uöt32_t
)(1491<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1620)<<(6*i+3) |

1033 (
uöt32_t
)(1621<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1749)<<(6*i+4) |

1034 (
uöt32_t
)(
rcD©a
[
AUX1
+
i
]>1750)<<(6*i+5);

1036 
uöt16_t
 
auxSèã
 = 0;

1037 
i
=0;i<4;i++)

1038 
auxSèã
 |(
rcD©a
[
AUX1
+
i
]<1300)<<(3*i) | (1300<rcData[AUX1+i] &&ÑcData[AUX1+i]<1700)<<(3*i+1) | (rcData[AUX1+i]>1700)<<(3*i+2);

1041 
i
=0;i<
CHECKBOXITEMS
;i++)

1042 
rcO±i⁄s
[
i
] = (
auxSèã
 & 
c⁄f
.
a˘iv©e
[i])>0;

1045 #i‡
ACC


1046 i‡–
rcO±i⁄s
[
BOXANGLE
] || (
Áûß„C¡
 > 5*
FAILSAFE_DELAY
) ) {

1048 i‡(!
f
.
ANGLE_MODE
) {

1049 
îr‹AngÀI
[
ROLL
] = 0;Éº‹AngÀI[
PITCH
] = 0;

1050 
f
.
ANGLE_MODE
 = 1;

1053 if(
f
.
ANGLE_MODE
){

1054 
îr‹GyroI
[
ROLL
] = 0;Éº‹GyroI[
PITCH
] = 0;

1056 
f
.
ANGLE_MODE
 = 0;

1058 i‡–
rcO±i⁄s
[
BOXHORIZON
] ) {

1059 
f
.
ANGLE_MODE
 = 0;

1060 i‡(!
f
.
HORIZON_MODE
) {

1061 
îr‹AngÀI
[
ROLL
] = 0;Éº‹AngÀI[
PITCH
] = 0;

1062 
f
.
HORIZON_MODE
 = 1;

1065 if(
f
.
HORIZON_MODE
){

1066 
îr‹GyroI
[
ROLL
] = 0;îr‹GyroI[
PITCH
] = 0;

1068 
f
.
HORIZON_MODE
 = 0;

1072 i‡(
rcO±i⁄s
[
BOXARM
] =0Ë
f
.
OK_TO_ARM
 = 1;

1073 #i‡!
	`deföed
(
GPS_LED_INDICATOR
)

1074 i‡(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
Ë{
STABLEPIN_ON
;} {
STABLEPIN_OFF
;}

1077 #i‡
BARO


1078 #i‡(!
	`deföed
(
SUPPRESS_BARO_ALTHOLD
))

1079 #i‡
GPS


1080 i‡(
GPS_c⁄f
.
èkeovî_b¨o
Ë
rcO±i⁄s
[
BOXBARO
] = (rcO±i⁄s[BOXBARO] || 
f
.
GPS_BARO_MODE
);

1082 i‡(
rcO±i⁄s
[
BOXBARO
]) {

1083 i‡(!
f
.
BARO_MODE
) {

1084 
f
.
BARO_MODE
 = 1;

1085 
A…Hﬁd
 = 
Æt
.
E°A…
;

1086 #i‡
	`deföed
(
ALT_HOLD_THROTTLE_MIDPOINT
)

1087 
öôülThrŸéeHﬁd
 = 
ALT_HOLD_THROTTLE_MIDPOINT
;

1089 
öôülThrŸéeHﬁd
 = 
rcComm™d
[
THROTTLE
];

1091 
îr‹A…ôudeI
 = 0;

1092 
B¨oPID
=0;

1095 
f
.
BARO_MODE
 = 0;

1098 #ifde‡
VARIOMETER


1099 i‡(
rcO±i⁄s
[
BOXVARIO
]) {

1100 i‡(!
f
.
VARIO_MODE
) {

1101 
f
.
VARIO_MODE
 = 1;

1104 
f
.
VARIO_MODE
 = 0;

1108 i‡(
rcO±i⁄s
[
BOXMAG
]) {

1109 i‡(!
f
.
MAG_MODE
) {

1110 
f
.
MAG_MODE
 = 1;

1111 
magHﬁd
 = 
©t
.
hódög
;

1114 
f
.
MAG_MODE
 = 0;

1116 #i‡
	`deföed
(
HEADFREE
)

1117 i‡(
rcO±i⁄s
[
BOXHEADFREE
]) {

1118 i‡(!
f
.
HEADFREE_MODE
) {

1119 
f
.
HEADFREE_MODE
 = 1;

1121 #i‡
	`deföed
(
ADVANCED_HEADFREE
)

1122 i‡((
f
.
GPS_FIX
 && 
GPS_numS©
 >5Ë&& (
GPS_di°™˚ToHome
 > 
ADV_HEADFREE_RANGE
) ) {

1123 i‡(
GPS_dúe˘i⁄ToHome
 < 180Ë{
hódFªeModeHﬁd
 = GPS_directionToHome + 180;} {headFreeModeHold = GPS_directionToHome - 180;}

1127 
f
.
HEADFREE_MODE
 = 0;

1129 i‡(
rcO±i⁄s
[
BOXHEADADJ
]) {

1130 
hódFªeModeHﬁd
 = 
©t
.
hódög
;

1134 #i‡
GPS


1140 
uöt8_t
 
gps_modes_check
 = (
rcO±i⁄s
[
BOXLAND
]<< 3Ë+ (rcO±i⁄s[
BOXGPSHOME
]<< 2Ë+ (rcO±i⁄s[
BOXGPSHOLD
]<<1Ë+ (rcO±i⁄s[
BOXGPSNAV
]);

1142 i‡(
f
.
ARMED
 ) {

1144 i‡(
f
.
GPS_FIX
) {

1145 i‡(
GPS_numS©
 >5 ) {

1146 i‡(
¥v_gps_modes
 !
gps_modes_check
) {

1147 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

1148 i‡(
rcO±i⁄s
[
BOXGPSHOME
]) {

1149 
	`öô_RTH
();

1150 } i‡(
rcO±i⁄s
[
BOXGPSHOLD
]) {

1151 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
)

1152 
NAV_∑u£d_©
 = 
missi⁄_°ï
.
numbî
;

1153 
f
.
GPS_mode
 = 
GPS_MODE_HOLD
;

1154 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1155 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], & GPS_coord[LON]);

1156 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1157 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

1158 } i‡(
rcO±i⁄s
[
BOXLAND
]) {

1159 
f
.
GPS_mode
 = 
GPS_MODE_HOLD
;

1160 
f
.
GPS_BARO_MODE
 = 
åue
;

1161 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], & GPS_coord[LON]);

1162 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1163 
NAV_°©e
 = 
NAV_STATE_LAND_START
;

1164 } i‡(
rcO±i⁄s
[
BOXGPSNAV
]) {

1165 
f
.
GPS_mode
 = 
GPS_MODE_NAV
;

1166 
f
.
GPS_BARO_MODE
 = 
åue
;

1167 
GPS_¥ev
[
LAT
] = 
GPS_co‹d
[LAT];

1168 
GPS_¥ev
[
LON
] = 
GPS_co‹d
[LON];

1169 i‡(
NAV_∑u£d_©
 != 0) {

1170 
√xt_°ï
 = 
NAV_∑u£d_©
;

1171 
NAV_∑u£d_©
 = 0;

1173 
√xt_°ï
 = 1;

1174 
jump_times
 = -10;

1176 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

1178 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1179 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1180 
f
.
THROTTLE_IGNORED
 = 
Ál£
;

1181 
f
.
LAND_IN_PROGRESS
 = 0;

1182 
f
.
THROTTLE_IGNORED
 = 0;

1183 
NAV_°©e
 = 
NAV_STATE_NONE
;

1184 
	`GPS_ª£t_«v
();

1186 
¥v_gps_modes
 = 
gps_modes_check
;

1190 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
) {

1191 
NAV_∑u£d_©
 = 
missi⁄_°ï
.
numbî
;

1192 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1193 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1194 
NAV_°©e
 = 
NAV_STATE_NONE
;

1195 
NAV_îr‹
 = 
NAV_ERROR_SPOILED_GPS
;

1196 
¥v_gps_modes
 = 0xff;

1198 i‡(
f
.
GPS_mode
 =
GPS_MODE_HOLD
 || f.GPS_modê=
GPS_MODE_RTH
) {

1199 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1200 
NAV_°©e
 = 
NAV_STATE_NONE
;

1201 
NAV_îr‹
 = 
NAV_ERROR_SPOILED_GPS
;

1202 
¥v_gps_modes
 = 0xff;

1204 
«v
[0] = 0;Çav[1] = 0;

1208 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1209 
NAV_°©e
 = 
NAV_STATE_NONE
;

1210 
NAV_∑u£d_©
 = 0;

1211 
NAV_îr‹
 = 
NAV_ERROR_GPS_FIX_LOST
;

1212 
	`GPS_ª£t_«v
();

1213 
¥v_gps_modes
 = 0xff;

1217 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1218 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1219 
f
.
THROTTLE_IGNORED
 = 
Ál£
;

1220 
NAV_°©e
 = 
NAV_STATE_NONE
;

1221 
NAV_∑u£d_©
 = 0;

1222 
NAV_îr‹
 = 
NAV_ERROR_DISARMED
;

1223 
	`GPS_ª£t_«v
();

1228 #i‡
	`deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

1229 i‡(
rcO±i⁄s
[
BOXPASSTHRU
]Ë{
f
.
PASSTHRU_MODE
 = 1;}

1230 {
f
.
PASSTHRU_MODE
 = 0;}

1234 
uöt8_t
 
èskOrdî
=0;

1235 
èskOrdî
) {

1237 
èskOrdî
++;

1238 #i‡
MAG


1239 i‡(
	`Mag_gëADC
() != 0) ;

1242 
èskOrdî
++;

1243 #i‡
BARO


1244 i‡(
	`B¨o_upd©e
() != 0) ;

1247 
èskOrdî
++;

1248 #i‡
BARO


1249 i‡(
	`gëE°im©edA…ôude
() != 0) ;

1252 
èskOrdî
++;

1253 #i‡
GPS


1254 i‡(
	`GPS_Compuã
() != 0) ;

1255 #i‡
	`deföed
(
I2C_GPS
)

1256 i‡(
	`GPS_NewD©a
() != 0) ;

1260 
èskOrdî
=0;

1261 #i‡
SONAR


1262 
	`S⁄¨_upd©e
();

1264 #ifde‡
LANDING_LIGHTS_DDR


1265 
	`auto_swôch_œndög_lights
();

1267 #ifde‡
VARIOMETER


1268 i‡(
f
.
VARIO_MODE
Ë
	`v¨io_sig«lög
();

1275 
cuºítTime
 = 
	`mi¸os
();

1276 
cy˛eTime
 = 
cuºítTime
 - 
¥eviousTime
;

1277 #i‡
	`deföed
(
LOOP_TIME
)

1278 i‡(
cy˛eTime
 >
LOOP_TIME
) ;

1283 
¥eviousTime
 = 
cuºítTime
;

1285 
	`compuãIMU
();

1290 #i‡
	`deföed
(
ACROTRAINER_MODE
)

1291 if(
f
.
ANGLE_MODE
){

1292 i‡(
	`abs
(
rcComm™d
[
ROLL
]Ë+ábs‘cComm™d[
PITCH
]Ë>
ACROTRAINER_MODE
 ) {

1293 
f
.
ANGLE_MODE
=0;

1294 
f
.
HORIZON_MODE
=0;

1295 
f
.
MAG_MODE
=0;

1296 
f
.
BARO_MODE
=0;

1297 
GPS_mode
 = 
GPS_MODE_NONE
;

1304 #i‡
GPS


1305 i‡(
GPS_c⁄f
.
ign‹e_thrŸée
 == 1) {

1306 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
 || f.GPS_modê=
GPS_MODE_RTH
) {

1310 
f
.
THROTTLE_IGNORED
 = 1;

1312 
f
.
THROTTLE_IGNORED
 = 0;

1318 i‡(
	`abs
(
rcComm™d
[
YAW
]Ë<70 && 
f
.
MAG_MODE
) {

1319 
öt16_t
 
dif
 = 
©t
.
hódög
 - 
magHﬁd
;

1320 i‡(
dif
 <= - 180) dif += 360;

1321 i‡(
dif
 >= + 180) dif -= 360;

1322 i‡(
f
.
SMALL_ANGLES_25
 || (f.
GPS_mode
 !0)Ë
rcComm™d
[
YAW
] -
dif
*
c⁄f
.
pid
[
PIDMAG
].
P8
 >> 5;

1323 } 
magHﬁd
 = 
©t
.
hódög
;

1325 #i‡
BARO
 && (!
	`deföed
(
SUPPRESS_BARO_ALTHOLD
))

1329 i‡(
f
.
BARO_MODE
) {

1330 
uöt8_t
 
isA…HﬁdCh™ged
 = 0;

1331 
öt16_t
 
A…HﬁdC‹r
 = 0;

1333 #i‡
GPS


1334 i‡(
f
.
LAND_IN_PROGRESS
) {

1335 
A…HﬁdC‹r
 -
GPS_c⁄f
.
œnd_•ìd
;

1336 if(
	`abs
(
A…HﬁdC‹r
) > 512) {

1337 
A…Hﬁd
 +
A…HﬁdC‹r
/512;

1338 
A…HﬁdC‹r
 %= 512;

1343 i‡–(
	`abs
(
rcComm™d
[
THROTTLE
]-
öôülThrŸéeHﬁd
)>
ALT_HOLD_THROTTLE_NEUTRAL_ZONE
Ë&& !
f
.
THROTTLE_IGNORED
) {

1345 
A…HﬁdC‹r
+
rcComm™d
[
THROTTLE
] - 
öôülThrŸéeHﬁd
;

1346 if(
	`abs
(
A…HﬁdC‹r
) > 512) {

1347 
A…Hﬁd
 +
A…HﬁdC‹r
/512;

1348 
A…HﬁdC‹r
 %= 512;

1350 
isA…HﬁdCh™ged
 = 1;

1351 } i‡(
isA…HﬁdCh™ged
) {

1352 
A…Hﬁd
 = 
Æt
.
E°A…
;

1353 
isA…HﬁdCh™ged
 = 0;

1355 
rcComm™d
[
THROTTLE
] = 
öôülThrŸéeHﬁd
 + 
B¨oPID
;

1361 #i‡
	`deföed
(
THROTTLE_ANGLE_CORRECTION
)

1362 if(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
) {

1363 
rcComm™d
[
THROTTLE
]+
thrŸéeAngÀC‹ª˘i⁄
;

1367 #i‡
GPS


1369 i‡(–
f
.
GPS_mode
 !
GPS_MODE_NONE
 ) && f.
GPS_FIX_HOME
 ) {

1370 
sö_yaw_y
 = 
	`sö
(
©t
.
hódög
*0.0174532925f);

1371 
cos_yaw_x
 = 
	`cos
(
©t
.
hódög
*0.0174532925f);

1372 
GPS_™gÀ
[
ROLL
] = (
«v
[
LON
]*
cos_yaw_x
 -Çav[
LAT
]*
sö_yaw_y
) /10;

1373 
GPS_™gÀ
[
PITCH
] = (
«v
[
LON
]*
sö_yaw_y
 +Çav[
LAT
]*
cos_yaw_x
) /10;

1375 
GPS_™gÀ
[
ROLL
] = 0;

1376 
GPS_™gÀ
[
PITCH
] = 0;

1380 #i‡
	`deföed
(
GPS_SIMULATOR
)

1381 
	`SîülWrôe
(2,0xa5);

1382 
	`SîülWrôe16
(2,
«v
[
LAT
]+
rcComm™d
[
PITCH
]);

1383 
	`SîülWrôe16
(2,
«v
[
LON
]+
rcComm™d
[
ROLL
]);

1384 
	`SîülWrôe16
(2,(
«v
[
LAT
]+
rcComm™d
[
PITCH
])-“av[
LON
]+rcComm™d[
ROLL
]));

1390 #i‡
PID_CONTROLLER
 == 1

1391 i‡–
f
.
HORIZON_MODE
 ) 
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),abs‘cComm™d[
ROLL
])),512);

1394 
axis
=0;axis<2;axis++) {

1395 
rc
 = 
rcComm™d
[
axis
]<<1;

1396 
îr‹
 = 
rc
 - 
imu
.
gyroD©a
[
axis
];

1397 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis]+
îr‹
,-16000,+16000);

1398 i‡(
	`abs
(
imu
.
gyroD©a
[
axis
])>640Ë
îr‹GyroI
[axis] = 0;

1400 
ITîm
 = (
îr‹GyroI
[
axis
]>>7)*
c⁄f
.
pid
[axis].
I8
>>6;

1402 
PTîm
 = 
	`mul
(
rc
,
c⁄f
.
pid
[
axis
].
P8
)>>6;

1404 i‡(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
) {

1406 
îr‹AngÀ
 = 
	`c⁄°øö
(
rc
 + 
GPS_™gÀ
[
axis
],-500,+500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

1407 
îr‹AngÀI
[
axis
] = 
	`c⁄°øö
”º‹AngÀI[axis]+
îr‹AngÀ
,-10000,+10000);

1409 
PTîmACC
 = 
	`mul
(
îr‹AngÀ
,
c⁄f
.
pid
[
PIDLEVEL
].
P8
)>>7;

1411 
öt16_t
 
limô
 = 
c⁄f
.
pid
[
PIDLEVEL
].
D8
*5;

1412 
PTîmACC
 = 
	`c⁄°øö
(PTîmACC,-
limô
,+limit);

1414 
ITîmACC
 = 
	`mul
(
îr‹AngÀI
[
axis
],
c⁄f
.
pid
[
PIDLEVEL
].
I8
)>>12;

1416 
ITîm
 = 
ITîmACC
 + ((ITîm-ITîmACC)*
¥›
>>9);

1417 
PTîm
 = 
PTîmACC
 + ((PTîm-PTîmACC)*
¥›
>>9);

1420 
PTîm
 -
	`mul
(
imu
.
gyroD©a
[
axis
],
dynP8
[axis])>>6;

1422 
dñè
 = 
imu
.
gyroD©a
[
axis
] - 
œ°Gyro
[axis];

1423 
œ°Gyro
[
axis
] = 
imu
.
gyroD©a
[axis];

1424 
DTîm
 = 
dñè1
[
axis
]+
dñè2
[axis]+
dñè
;

1425 
dñè2
[
axis
] = 
dñè1
[axis];

1426 
dñè1
[
axis
] = 
dñè
;

1428 
DTîm
 = 
	`mul
(DTîm,
dynD8
[
axis
])>>5;

1430 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 - 
DTîm
;

1434 
	#GYRO_P_MAX
 300

	)

1435 
	#GYRO_I_MAX
 250

	)

1437 
rc
 = 
	`mul
(
rcComm™d
[
YAW
] , (2*
c⁄f
.
yawR©e
 + 30)) >> 5;

1439 
îr‹
 = 
rc
 - 
imu
.
gyroD©a
[
YAW
];

1440 
îr‹GyroI_YAW
 +
	`mul
(
îr‹
,
c⁄f
.
pid
[
YAW
].
I8
);

1441 
îr‹GyroI_YAW
 = 
	`c⁄°øö
”º‹GyroI_YAW, 2-((
öt32_t
)1<<28), -2+((int32_t)1<<28));

1442 i‡(
	`abs
(
rc
Ë> 50Ë
îr‹GyroI_YAW
 = 0;

1444 
PTîm
 = 
	`mul
(
îr‹
,
c⁄f
.
pid
[
YAW
].
P8
)>>6;

1445 #i‚de‡
COPTER_WITH_SERVO


1446 
öt16_t
 
limô
 = 
GYRO_P_MAX
-
c⁄f
.
pid
[
YAW
].
D8
;

1447 
PTîm
 = 
	`c⁄°øö
(PTîm,-
limô
,+limit);

1450 
ITîm
 = 
	`c⁄°øö
((
öt16_t
)(
îr‹GyroI_YAW
>>13),-
GYRO_I_MAX
,+GYRO_I_MAX);

1452 
axisPID
[
YAW
] = 
PTîm
 + 
ITîm
;

1454 #ñi‡
PID_CONTROLLER
 == 2

1455 
	#GYRO_I_MAX
 256

	)

1456 
	#ACC_I_MAX
 256

	)

1457 
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),abs‘cComm™d[
ROLL
])),500);

1460 
axis
=0;axis<3;axis++) {

1462 i‡((
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
Ë&& 
axis
<2 ) {

1464 
îr‹AngÀ
 = 
	`c⁄°øö
((
rcComm™d
[
axis
]<<1Ë+ 
GPS_™gÀ
[axis],-500,+500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

1466 i‡(
axis
 == 2) {

1467 
AngÀR©eTmp
 = (((
öt32_t
Ë(
c⁄f
.
yawR©e
 + 27Ë* 
rcComm™d
[2]) >> 5);

1469 i‡(!
f
.
ANGLE_MODE
) {

1470 
AngÀR©eTmp
 = ((
öt32_t
Ë(
c⁄f
.
rﬁlPôchR©e
 + 27Ë* 
rcComm™d
[
axis
]) >> 4;

1471 i‡(
f
.
HORIZON_MODE
) {

1473 
AngÀR©eTmp
 +((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
I8
)>>8;

1476 
AngÀR©eTmp
 = ((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
P8
)>>4;

1484 
R©eEº‹
 = 
AngÀR©eTmp
 - 
imu
.
gyroD©a
[
axis
];

1487 
PTîm
 = ((
öt32_t
Ë
R©eEº‹
 * 
c⁄f
.
pid
[
axis
].
P8
)>>7;

1494 
îr‹GyroI
[
axis
] +(((
öt32_t
Ë
R©eEº‹
 * 
cy˛eTime
)>>11Ë* 
c⁄f
.
pid
[axis].
I8
;

1497 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis], (
öt32_t
Ë-
GYRO_I_MAX
<<13, (int32_t) +GYRO_I_MAX<<13);

1498 
ITîm
 = 
îr‹GyroI
[
axis
]>>13;

1501 
dñè
 = 
R©eEº‹
 - 
œ°Eº‹
[
axis
];

1502 
œ°Eº‹
[
axis
] = 
R©eEº‹
;

1506 
dñè
 = ((
öt32_t
Ëdñè * ((
uöt16_t
)0xFFFF / (
cy˛eTime
>>4)))>>6;

1508 
dñèSum
 = 
dñè1
[
axis
]+
dñè2
[axis]+
dñè
;

1509 
dñè2
[
axis
] = 
dñè1
[axis];

1510 
dñè1
[
axis
] = 
dñè
;

1514 
DTîm
 = ((
öt32_t
)
dñèSum
*
c⁄f
.
pid
[
axis
].
D8
)>>8;

1516 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 + 
DTîm
;

1521 
	`mixTabÀ
();

1523 #i‡
	`deföed
(
DISABLE_SERVOS_WHEN_UNARMED
)

1524 i‡(
f
.
ARMED
Ë
	`wrôeSîvos
();

1526 i‡–(
f
.
ARMED
Ë|| ((!
ˇlibøtögG
Ë&& (!
ˇlibøtögA
)ËË
	`wrôeSîvos
();

1528 
	`wrôeMŸ‹s
();

1529 
	}
}

	@MultiWii.h

1 #i‚de‡
MULTIWII_H_


2 
	#MULTIWII_H_


	)

4 
	#VERSION
 240

	)

5 
	#NAVI_VERSION
 7

6 
	~"ty≥s.h
"

	)

7 
	~"Aœrms.h
"

9 
	#MINCHECK
 1100

	)

10 
	#MAXCHECK
 1900

	)

12 vﬁ©ûê
timî0_ovîÊow_cou¡
;

14 c⁄° 
pid«mes
[];

15 c⁄° 
box«mes
[];

16 c⁄° 
uöt8_t
 
boxids
[];

18 
uöt32_t
 
cuºítTime
;

19 
uöt16_t
 
¥eviousTime
;

20 
uöt16_t
 
cy˛eTime
;

21 
uöt16_t
 
ˇlibøtögA
;

22 
uöt16_t
 
ˇlibøtögB
;

23 
uöt16_t
 
ˇlibøtögG
;

24 
öt16_t
 
magHﬁd
,
hódFªeModeHﬁd
;

25 
uöt8_t
 
vb©Mö
;

26 
uöt8_t
 
rcO±i⁄s
[
CHECKBOXITEMS
];

27 
öt32_t
 
A…Hﬁd
;

28 
öt16_t
 
s⁄¨A…
;

29 
öt16_t
 
B¨oPID
;

30 
öt16_t
 
îr‹A…ôudeI
;

32 
öt16_t
 
i2c_îr‹s_cou¡
;

33 
uöt8_t
 
Æ¨mAºay
[
ALRM_FAC_SIZE
];

34 
globÆ_c⁄f_t
 
globÆ_c⁄f
;

36 
imu_t
 
imu
;

37 
™Æog_t
 
™Æog
;

38 
Æt_t
 
Æt
;

39 
©t_t
 
©t
;

40 #ifde‡
LOG_PERMANENT


41 
∂og_t
 
∂og
;

44 
öt16_t
 
debug
[4];

46 
c⁄f_t
 
c⁄f
;

47 
öt16_t
 
™√x650_ovîrun_cou¡
;

48 
Êags_°ru˘_t
 
f
;

49 
uöt16_t
 
ötPowîTriggî1
;

51 
öt16_t
 
gyroZîo
[3];

52 
öt16_t
 
™gÀ
[2];

55 #i‡
BARO


56 
öt32_t
 
b¨oPªssuª
;

57 
öt16_t
 
b¨oTem≥øtuª
;

58 
öt32_t
 
b¨oPªssuªSum
;

61 
öt16_t
 
axisPID
[3];

62 
öt16_t
 
mŸ‹
[8];

63 
öt16_t
 
£rvo
[8];

65 
öt16_t
 
Áûß„Evíts
;

66 vﬁ©ûê
öt16_t
 
Áûß„C¡
;

68 
öt16_t
 
rcD©a
[
RC_CHANS
];

69 
öt16_t
 
rcSîül
[8];

70 
öt16_t
 
rcComm™d
[4];

71 
uöt8_t
 
rcSîülCou¡
;

72 
öt16_t
 
lookupPôchRﬁlRC
[5];

73 
uöt16_t
 
lookupThrŸéeRC
[11];

75 #i‡
deföed
(
POWERMETER
Ë|| ( deföed(
LOG_VALUES
) && (LOG_VALUES >= 3) )

76 
	#PMOTOR_SUM
 8

77 
uöt32_t
 
pMëî
[
PMOTOR_SUM
 + 1];

78 
uöt8_t
 
pMëîV
;

79 
uöt32_t
 
pAœrm
;

80 
uöt16_t
 
powîVÆue
;

82 

	)

83 #i‡
deföed
(
LCD_TELEMETRY
)

84 
uöt8_t
 
ãÀmëry
;

85 
uöt8_t
 
ãÀmëry_auto
;

87 #ifde‡
LCD_TELEMETRY_STEP


88 
ãÀmërySãpSequí˚
[];

89 
uöt8_t
 
ãÀmërySãpIndex
;

92 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
)

93 
uöt16_t
 
cy˛eTimeMax
;

94 
uöt16_t
 
cy˛eTimeMö
;

95 
öt32_t
 
BAROÆtMax
;

96 
uöt16_t
 
GPS_•ìdMax
;

97 
uöt16_t
 
powîVÆueMaxMAH
;

98 
uöt16_t
 
w©tsMax
;

100 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
Ë|| deföed(
ARMEDTIMEWARNING
Ë|| deföed(
LOG_PERMANENT
)

101 
uöt32_t
 
¨medTime
;

104 #i‡
GPS


107 
gps_c⁄f_°ru˘
 
GPS_c⁄f
;

109 
öt16_t
 
GPS_™gÀ
[2];

110 
öt32_t
 
GPS_co‹d
[2];

111 
öt32_t
 
GPS_home
[2];

112 
öt32_t
 
GPS_hﬁd
[2];

113 
öt32_t
 
GPS_¥ev
[2];

114 
öt32_t
 
GPS_poi
[2];

115 
öt32_t
 
GPS_dúe˘i⁄ToPoi
;

116 
uöt8_t
 
GPS_numS©
;

117 
uöt16_t
 
GPS_di°™˚ToHome
;

118 
öt16_t
 
GPS_dúe˘i⁄ToHome
;

119 
uöt16_t
 
GPS_Ætôude
;

120 
uöt16_t
 
GPS_•ìd
;

121 
uöt8_t
 
GPS_upd©e
;

122 
uöt16_t
 
GPS_ground_cour£
;

123 
uöt32_t
 
GPS_time
;

125 
uöt8_t
 
GPS_mode
;

127 
uöt8_t
 
NAV_îr‹
;

128 
uöt8_t
 
NAV_°©e
;

129 
uöt8_t
 
GPS_ßved_missi⁄_°©e
;

130 
uöt8_t
 
¥v_gps_modes
;

131 
uöt32_t
 
«v_timî_°›
;

132 
uöt16_t
 
«v_hﬁd_time
;

133 
uöt8_t
 
NAV_∑u£d_©
;

134 
uöt8_t
 
√xt_°ï
;

137 
	#ASCENDING
 1

	)

138 
	#DESCENDING
 -1

	)

139 
	#REACHED_ALT
 0

	)

142 
öt32_t
 
‹igöÆ_Ætôude
;

144 
öt32_t
 
èrgë_Ætôude
;

146 
öt32_t
 
Æt_to_hﬁd
;

148 
uöt32_t
 
Æt_ch™ge_timî
;

149 
öt8_t
 
Æt_ch™ge_Êag
;

150 
uöt32_t
 
Æt_ch™ge
;

151 
öt16_t
 
jump_times
;

152 
uöt8_t
 
œnd_dëe˘
;

158 
missi⁄_°ï_°ru˘
 
missi⁄_°ï
;

161 
	#MISSION_WAYPOINT
 1

162 
	#MISSION_HOLD_UNLIM
 2

163 
	#MISSION_HOLD_TIME
 3

164 
	#MISSION_RTH
 4

165 
	#MISSION_SET_POI
 5

166 
	#MISSION_JUMP
 6

167 
	#MISSION_SET_HEADING
 7

168 
	#MISSION_LAND
 8

169 

	)

171 
	#MISSION_FLAG_END
 0xA5

172 
	#MISSION_FLAG_CRC_ERROR
 0xFE

173 
	#MISSION_FLAG_HOME
 0x01

174 
	#MISSION_FLAG_HOLD
 0x02

175 
	#MISSION_FLAG_DO_LAND
 0x20

176 
	#MISSION_FLAG_NAV_IN_PROG
 0xff

177 

	)

178 
	#LAT
 0

	)

179 
	#LON
 1

	)

181 
öt16_t
 
«v
[2];

187 
	#POSHOLD_P
 .15

	)

188 
	#POSHOLD_I
 0.0

	)

189 
	#POSHOLD_IMAX
 20

190 

	)

191 
	#POSHOLD_RATE_P
 3.4

	)

192 
	#POSHOLD_RATE_I
 0.14

193 
	#POSHOLD_RATE_D
 0.053

194 
	#POSHOLD_RATE_IMAX
 20

195 

	)

197 
	#NAV_P
 2.5

	)

198 
	#NAV_I
 0.33

199 
	#NAV_D
 0.083

200 
	#NAV_IMAX
 20

201 

	)

205 vﬁ©ûê
uöt8_t
 
•ekFømeFœgs
;

206 vﬁ©ûê
uöt32_t
 
•ekTimeLa°
;

207 
uöt8_t
 
•ekFømeD⁄e
;

209 #i‡
deföed
(
OPENLRSv2MULTI
)

210 
uöt8_t
 
pŸ_P
,
pŸ_I
;

216 #i‡
deföed
(
INFLIGHT_ACC_CALIBRATION
)

217 
uöt16_t
 
InÊightˇlibøtögA
;

218 
öt16_t
 
AccInÊightCÆibøti⁄Armed
;

219 
uöt16_t
 
AccInÊightCÆibøti⁄MósuªmítD⁄e
;

220 
uöt16_t
 
AccInÊightCÆibøti⁄SavëoEEProm
;

221 
uöt16_t
 
AccInÊightCÆibøti⁄A˘ive
;

224 #i‡
deföed
(
ARMEDTIMEWARNING
)

225 
uöt32_t
 
ArmedTimeW¨nögMi¸oSec⁄ds
;

228 #i‡
deföed
(
THROTTLE_ANGLE_CORRECTION
)

229 
öt16_t
 
thrŸéeAngÀC‹ª˘i⁄
;

230 
öt8_t
 
cosZ
;

233 
™√xCode
();

234 
go_dißrm
();

	@Output.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"Aœrms.h
"

8 
öôülizeSo·PWM
();

10 #i‡
deföed
(
SERVO
)

11 
öôülizeSîvo
();

19 #i‡
deföed
(
PROMINI
)

20 
uöt8_t
 
	gPWM_PIN
[8] = {9,10,11,3,6,5,
A2
,12};

22 #i‡
deföed
(
PROMICRO
)

23 #i‡!
deföed
(
HWPWM6
)

24 #i‡
deföed
(
TEENSY20
)

25 
uöt8_t
 
	gPWM_PIN
[8] = {14,15,9,12,22,18,16,17};

26 #ñi‡
deföed
(
A32U4_4_HW_PWM_SERVOS
)

27 
uöt8_t
 
	gPWM_PIN
[8] = {6,9,10,11,5,13,
SW_PWM_P3
,
SW_PWM_P4
};

29 
uöt8_t
 
	gPWM_PIN
[8] = {9,10,5,6,4,
A2
,
SW_PWM_P3
,
SW_PWM_P4
};

32 #i‡
deföed
(
TEENSY20
)

33 
uöt8_t
 
	gPWM_PIN
[8] = {14,15,9,12,4,10,16,17};

34 #ñi‡
deföed
(
A32U4_4_HW_PWM_SERVOS
)

35 
uöt8_t
 
	gPWM_PIN
[8] = {6,9,10,11,5,13,
SW_PWM_P3
,
SW_PWM_P4
};

37 
uöt8_t
 
	gPWM_PIN
[8] = {9,10,5,6,11,13,
SW_PWM_P3
,
SW_PWM_P4
};

41 #i‡
deföed
(
MEGA
)

42 
uöt8_t
 
	gPWM_PIN
[8] = {3,5,6,2,7,8,9,10};

48 #i‡
deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
)Ë|| (deföed(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
))

49 #i‡(
NUMBER_MOTOR
 > 4)

51 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN5_lowSèã
;

52 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN5_highSèã
;

53 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN6_lowSèã
;

54 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN6_highSèã
;

56 #i‡(
NUMBER_MOTOR
 > 6)

58 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PINA2_lowSèã
;

59 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PINA2_highSèã
;

60 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN12_lowSèã
;

61 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN12_highSèã
;

64 #i‡(
NUMBER_MOTOR
 > 4)

66 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN5_lowSèã
;

67 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN5_highSèã
;

68 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN6_lowSèã
;

69 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN6_highSèã
;

71 #i‡(
NUMBER_MOTOR
 > 6)

73 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PINA2_lowSèã
;

74 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PINA2_highSèã
;

75 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN12_lowSèã
;

76 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN12_highSèã
;

80 #i‡
deföed
(
SERVO
)

81 #i‡
deföed
(
HW_PWM_SERVOS
)

83 #ñi‡
deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
))

84 #i‡
deföed
(
AIRPLANE
Ë|| deföed(
HELICOPTER
)

86 vﬁ©ûê
uöt8_t
 
	g©omicSîvo
[8] = {125,125,125,125,125,125,125,5};

88 vﬁ©ûê
uöt8_t
 
	g©omicSîvo
[8] = {125,125,125,125,125,125,125,125};

91 #i‡
deföed
(
AIRPLANE
)|| deföed(
HELICOPTER
)

93 vﬁ©ûê
uöt16_t
 
	g©omicSîvo
[8] = {8000,8000,8000,8000,8000,8000,8000,320};

95 vﬁ©ûê
uöt16_t
 
	g©omicSîvo
[8] = {8000,8000,8000,8000,8000,8000,8000,8000};

103 #i‡
deföed
(
SERVO
)

104 #i‡
deföed
(
PRI_SERVO_FROM
Ë&& deföed(
SEC_SERVO_FROM
)

105 #i‡
PRI_SERVO_FROM
 < 
SEC_SERVO_FROM


106 
	#SERVO_START
 
PRI_SERVO_FROM


	)

108 
	#SERVO_START
 
SEC_SERVO_FROM


	)

111 #i‡
deföed
(
PRI_SERVO_FROM
)

112 
	#SERVO_START
 
PRI_SERVO_FROM


	)

114 #i‡
deföed
(
SEC_SERVO_FROM
)

115 
	#SERVO_START
 
SEC_SERVO_FROM


	)

118 #i‡
deföed
(
PRI_SERVO_TO
Ë&& deföed(
SEC_SERVO_TO
)

119 #i‡
PRI_SERVO_TO
 > 
SEC_SERVO_TO


120 
	#SERVO_END
 
PRI_SERVO_TO


	)

122 
	#SERVO_END
 
SEC_SERVO_TO


	)

125 #i‡
deföed
(
PRI_SERVO_TO
)

126 
	#SERVO_END
 
PRI_SERVO_TO


	)

128 #i‡
deföed
(
SEC_SERVO_TO
)

129 
	#SERVO_END
 
SEC_SERVO_TO


	)

139 
	$wrôeSîvos
() {

140 #i‡
	`deföed
(
SERVO
)

141 #i‡
	`deföed
(
PRI_SERVO_FROM
Ë&& !deföed(
HW_PWM_SERVOS
)

142 
uöt8_t
 
i
 = (
PRI_SERVO_FROM
-1); i < 
PRI_SERVO_TO
; i++){

143 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
)Ë|| (deföed(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
))

144 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)>>2;

146 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)<<4;

150 #i‡
	`deföed
(
SEC_SERVO_FROM
Ë&& !deföed(
HW_PWM_SERVOS
)

151 #i‡(
	`deföed
(
SERVO_TILT
)|| deföed(
SERVO_MIX_TILT
)Ë&& deföed(
MMSERVOGIMBAL
)

153 
öt16_t
 
medüMobûeSîvoGimbÆADC
[3][
MMSERVOGIMBALVECTORLENGHT
];

154 
öt32_t
 
medüMobûeSîvoGimbÆADCSum
[3];

155 
uöt8_t
 
medüMobûeSîvoGimbÆIDX
;

156 
uöt8_t
 
axis
;

158 
medüMobûeSîvoGimbÆIDX
 = ++medüMobûeSîvoGimbÆIDX % 
MMSERVOGIMBALVECTORLENGHT
;

159 
axis
=(
SEC_SERVO_FROM
-1);áxi†< 
SEC_SERVO_TO
;áxis++) {

160 
medüMobûeSîvoGimbÆADCSum
[
axis
] -
medüMobûeSîvoGimbÆADC
[axis][
medüMobûeSîvoGimbÆIDX
];

161 
medüMobûeSîvoGimbÆADC
[
axis
][
medüMobûeSîvoGimbÆIDX
] = 
£rvo
[axis];

162 
medüMobûeSîvoGimbÆADCSum
[
axis
] +
medüMobûeSîvoGimbÆADC
[axis][
medüMobûeSîvoGimbÆIDX
];

163 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
))

164 
©omicSîvo
[
axis
] = (
medüMobûeSîvoGimbÆADCSum
[axis] / 
MMSERVOGIMBALVECTORLENGHT
 - 1000)>>2;

166 
©omicSîvo
[
axis
] = (
medüMobûeSîvoGimbÆADCSum
[axis] / 
MMSERVOGIMBALVECTORLENGHT
 - 1000)<<4;

170 
uöt8_t
 
i
 = (
SEC_SERVO_FROM
-1); i < 
SEC_SERVO_TO
; i++){

171 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
)Ë|| (deföed(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
))

172 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)>>2;

174 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)<<4;

180 #i‡
	`deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
)

181 #i‡(
PRI_SERVO_FROM
 =1 || 
SEC_SERVO_FROM
 == 1)

182 
OCR5C
 = 
£rvo
[0];

184 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

185 
OCR5B
 = 
£rvo
[1];

187 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

188 
OCR5A
 = 
£rvo
[2];

190 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

191 
OCR1A
 = 
£rvo
[3];

193 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

194 
OCR1B
 = 
£rvo
[4];

196 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

197 
OCR4A
 = 
£rvo
[5];

199 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

200 
OCR4B
 = 
£rvo
[6];

202 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

203 
OCR4C
 = 
£rvo
[7];

207 #i‡
	`deföed
(
PROMICRO
Ë&& deföed(
A32U4_4_HW_PWM_SERVOS
)

208 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >= 7)

209 
OCR1A
 = 
£rvo
[6];

211 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >= 5)

212 
OCR1B
 = 
£rvo
[4];

214 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >= 6)

215 
OCR3A
 = 
£rvo
[5];

217 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >= 4)

218 
OCR1C
 = 
£rvo
[3];

222 
	}
}

227 
	$wrôeMŸ‹s
() {

229 #i‡
	`deföed
(
MEGA
)

230 #i‡(
NUMBER_MOTOR
 > 0)

231 #i‚de‡
EXT_MOTOR_RANGE


232 
OCR3C
 = 
mŸ‹
[0]<<3;

234 
OCR3C
 = ((
mŸ‹
[0]<<4) - 16000);

237 #i‡(
NUMBER_MOTOR
 > 1)

238 #i‚de‡
EXT_MOTOR_RANGE


239 
OCR3A
 = 
mŸ‹
[1]<<3;

241 
OCR3A
 = ((
mŸ‹
[1]<<4) - 16000);

244 #i‡(
NUMBER_MOTOR
 > 2)

245 #i‚de‡
EXT_MOTOR_RANGE


246 
OCR4A
 = 
mŸ‹
[2]<<3;

248 
OCR4A
 = ((
mŸ‹
[2]<<4) - 16000);

251 #i‡(
NUMBER_MOTOR
 > 3)

252 #i‚de‡
EXT_MOTOR_RANGE


253 
OCR3B
 = 
mŸ‹
[3]<<3;

255 
OCR3B
 = ((
mŸ‹
[3]<<4) - 16000);

258 #i‡(
NUMBER_MOTOR
 > 4)

259 #i‚de‡
EXT_MOTOR_RANGE


260 
OCR4B
 = 
mŸ‹
[4]<<3;

261 
OCR4C
 = 
mŸ‹
[5]<<3;

263 
OCR4B
 = ((
mŸ‹
[4]<<4) - 16000);

264 
OCR4C
 = ((
mŸ‹
[5]<<4) - 16000);

267 #i‡(
NUMBER_MOTOR
 > 6)

268 #i‚de‡
EXT_MOTOR_RANGE


269 
OCR2B
 = 
mŸ‹
[6]>>3;

270 
OCR2A
 = 
mŸ‹
[7]>>3;

272 
OCR2B
 = (
mŸ‹
[6]>>2) - 250;

273 
OCR2A
 = (
mŸ‹
[7]>>2) - 250;

279 #i‡
	`deföed
(
PROMICRO
)

280 
uöt16_t
 
Temp2
;

281 
Temp2
 = 
mŸ‹
[3] - 1000;

282 #i‡(
NUMBER_MOTOR
 > 0)

283 #i‡
	`deföed
(
A32U4_4_HW_PWM_SERVOS
)

286 #i‚de‡
EXT_MOTOR_RANGE


287 
TC4H
 = 
mŸ‹
[0]>>8; 
OCR4D
 = (motor[0]&0xFF);

289 
TC4H
 = (((
mŸ‹
[0]-1000)<<1)+16)>>8; 
OCR4D
 = ((((motor[0]-1000)<<1)+16)&0xFF);

293 #ifde‡
EXT_MOTOR_RANGE


294 
OCR1A
 = ((
mŸ‹
[0]<<4) - 16000) + 128;

295 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

296 
OCR1A
 = (
mŸ‹
[0] - 1000) >> 2;

297 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

298 
OCR1A
 = (
mŸ‹
[0] - 1000) >> 1;

299 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

300 
OCR1A
 = 
mŸ‹
[0] - 1000;

301 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

302 
OCR1A
 = (
mŸ‹
[0]-1000) << 1;

304 
OCR1A
 = 
mŸ‹
[0]<<3;

308 #i‡(
NUMBER_MOTOR
 > 1)

309 #ifde‡
EXT_MOTOR_RANGE


310 
OCR1B
 = ((
mŸ‹
[1]<<4) - 16000) + 128;

311 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

312 
OCR1B
 = (
mŸ‹
[1] - 1000) >> 2;

313 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

314 
OCR1B
 = (
mŸ‹
[1] - 1000) >> 1;

315 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

316 
OCR1B
 = 
mŸ‹
[1] - 1000;

317 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

318 
OCR1B
 = (
mŸ‹
[1]-1000) << 1;

320 
OCR1B
 = 
mŸ‹
[1]<<3;

323 #i‡(
NUMBER_MOTOR
 > 2)

324 #i‡!
	`deföed
(
HWPWM6
)

326 #i‚de‡
EXT_MOTOR_RANGE


327 
TC4H
 = (2047-
mŸ‹
[2])>>8; 
OCR4A
 = ((2047-motor[2])&0xFF);

329 
TC4H
 = 2047-(((
mŸ‹
[2]-1000)<<1)+16)>>8; 
OCR4A
 = (2047-(((motor[2]-1000)<<1)+16)&0xFF);

332 #ifde‡
EXT_MOTOR_RANGE


333 
OCR3A
 = ((
mŸ‹
[2]<<4) - 16000) + 128;

334 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

335 
OCR3A
 = (
mŸ‹
[2] - 1000) >> 2;

336 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

337 
OCR3A
 = (
mŸ‹
[2] - 1000) >> 1;

338 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

339 
OCR3A
 = 
mŸ‹
[2] - 1000;

340 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

341 
OCR3A
 = (
mŸ‹
[2]-1000) << 1;

343 
OCR3A
 = 
mŸ‹
[2]<<3;

347 #i‡(
NUMBER_MOTOR
 > 3)

348 #ifde‡
EXT_MOTOR_RANGE


349 
TC4H
 = (((
mŸ‹
[3]-1000)<<1)+16)>>8; 
OCR4D
 = ((((motor[3]-1000)<<1)+16)&0xFF);

350 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

351 
Temp2
 = Temp2 >> 2;

352 
TC4H
 = 
Temp2
 >> 8;

353 
OCR4D
 = 
Temp2
 & 0xFF;

354 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

355 
Temp2
 = Temp2 >> 1;

356 
TC4H
 = 
Temp2
 >> 8;

357 
OCR4D
 = 
Temp2
 & 0xFF;

358 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

359 
TC4H
 = 
Temp2
 >> 8;

360 
OCR4D
 = 
Temp2
 & 0xFF;

361 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

362 
TC4H
 = 
Temp2
 >> 8;

363 
OCR4D
 = 
Temp2
 & 0xFF;

365 
TC4H
 = 
mŸ‹
[3]>>8; 
OCR4D
 = (motor[3]&0xFF);

368 #i‡(
NUMBER_MOTOR
 > 4)

369 #i‡!
	`deföed
(
HWPWM6
)

370 #i‡(
NUMBER_MOTOR
 =6Ë&& !
	`deföed
(
SERVO
)

371 
©omicPWM_PIN5_highSèã
 = 
mŸ‹
[4]<<3;

372 
©omicPWM_PIN5_lowSèã
 = 16383-
©omicPWM_PIN5_highSèã
;

373 
©omicPWM_PIN6_highSèã
 = 
mŸ‹
[5]<<3;

374 
©omicPWM_PIN6_lowSèã
 = 16383-
©omicPWM_PIN6_highSèã
;

376 
©omicPWM_PIN5_highSèã
 = ((
mŸ‹
[4]-1000)<<4)+320;

377 
©omicPWM_PIN5_lowSèã
 = 15743-
©omicPWM_PIN5_highSèã
;

378 
©omicPWM_PIN6_highSèã
 = ((
mŸ‹
[5]-1000)<<4)+320;

379 
©omicPWM_PIN6_lowSèã
 = 15743-
©omicPWM_PIN6_highSèã
;

382 #i‚de‡
EXT_MOTOR_RANGE


383 
OCR1C
 = 
mŸ‹
[4]<<3;

384 
TC4H
 = 
mŸ‹
[5]>>8; 
OCR4A
 = (motor[5]&0xFF);

386 
OCR1C
 = ((
mŸ‹
[4]<<4) - 16000) + 128;

387 
TC4H
 = (((
mŸ‹
[5]-1000)<<1)+16)>>8; 
OCR4A
 = ((((motor[5]-1000)<<1)+16)&0xFF);

391 #i‡(
NUMBER_MOTOR
 > 6)

392 #i‡!
	`deföed
(
HWPWM6
)

393 
©omicPWM_PINA2_highSèã
 = ((
mŸ‹
[6]-1000)<<4)+320;

394 
©omicPWM_PINA2_lowSèã
 = 15743-
©omicPWM_PINA2_highSèã
;

395 
©omicPWM_PIN12_highSèã
 = ((
mŸ‹
[7]-1000)<<4)+320;

396 
©omicPWM_PIN12_lowSèã
 = 15743-
©omicPWM_PIN12_highSèã
;

398 
©omicPWM_PINA2_highSèã
 = ((
mŸ‹
[6]-1000)>>2)+5;

399 
©omicPWM_PINA2_lowSèã
 = 245-
©omicPWM_PINA2_highSèã
;

400 
©omicPWM_PIN12_highSèã
 = ((
mŸ‹
[7]-1000)>>2)+5;

401 
©omicPWM_PIN12_lowSèã
 = 245-
©omicPWM_PIN12_highSèã
;

407 #i‡
	`deföed
(
PROMINI
)

408 #i‡(
NUMBER_MOTOR
 > 0)

409 #ifde‡
EXT_MOTOR_RANGE


410 
OCR1A
 = ((
mŸ‹
[0]>>2) - 250);

411 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

412 
OCR1A
 = (
mŸ‹
[0] - 1000) >> 2;

413 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

414 
OCR1A
 = (
mŸ‹
[0] - 1000) << 1;

415 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

416 
OCR1A
 = (
mŸ‹
[0] - 1000) << 3;

418 
OCR1A
 = 
mŸ‹
[0]>>3;

421 #i‡(
NUMBER_MOTOR
 > 1)

422 #ifde‡
EXT_MOTOR_RANGE


423 
OCR1B
 = ((
mŸ‹
[1]>>2) - 250);

424 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

425 
OCR1B
 = (
mŸ‹
[1] - 1000) >> 2;

426 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

427 
OCR1B
 = (
mŸ‹
[1] - 1000) << 1;

428 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

429 
OCR1B
 = (
mŸ‹
[1] - 1000) << 3;

431 
OCR1B
 = 
mŸ‹
[1]>>3;

434 #i‡(
NUMBER_MOTOR
 > 2)

435 #ifde‡
EXT_MOTOR_RANGE


436 
OCR2A
 = ((
mŸ‹
[2]>>2) - 250);

437 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

438 
OCR2A
 = (
mŸ‹
[2] - 1000) >> 2;

439 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

440 
OCR2A
 = (
mŸ‹
[2] - 1000) >> 2;

441 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

442 
OCR2A
 = (
mŸ‹
[2] - 1000) >> 2;

444 
OCR2A
 = 
mŸ‹
[2]>>3;

447 #i‡(
NUMBER_MOTOR
 > 3)

448 #ifde‡
EXT_MOTOR_RANGE


449 
OCR2B
 = ((
mŸ‹
[3]>>2) - 250);

450 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

451 
OCR2B
 = (
mŸ‹
[3] - 1000) >> 2;

452 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

453 
OCR2B
 = (
mŸ‹
[3] - 1000) >> 2;

454 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

455 
OCR2B
 = (
mŸ‹
[3] - 1000) >> 2;

457 
OCR2B
 = 
mŸ‹
[3]>>3;

460 #i‡(
NUMBER_MOTOR
 > 4)

461 #i‡(
NUMBER_MOTOR
 =6Ë&& !
	`deföed
(
SERVO
)

462 #i‚de‡
EXT_MOTOR_RANGE


463 
©omicPWM_PIN6_highSèã
 = 
mŸ‹
[4]>>3;

464 
©omicPWM_PIN5_highSèã
 = 
mŸ‹
[5]>>3;

466 
©omicPWM_PIN6_highSèã
 = (
mŸ‹
[4]>>2) - 250;

467 
©omicPWM_PIN5_highSèã
 = (
mŸ‹
[5]>>2) - 250;

469 
©omicPWM_PIN6_lowSèã
 = 255-
©omicPWM_PIN6_highSèã
;

470 
©omicPWM_PIN5_lowSèã
 = 255-
©omicPWM_PIN5_highSèã
;

472 
©omicPWM_PIN6_highSèã
 = ((
mŸ‹
[4]-1000)>>2)+5;

473 
©omicPWM_PIN6_lowSèã
 = 245-
©omicPWM_PIN6_highSèã
;

474 
©omicPWM_PIN5_highSèã
 = ((
mŸ‹
[5]-1000)>>2)+5;

475 
©omicPWM_PIN5_lowSèã
 = 245-
©omicPWM_PIN5_highSèã
;

478 #i‡(
NUMBER_MOTOR
 > 6)

479 
©omicPWM_PINA2_highSèã
 = ((
mŸ‹
[6]-1000)>>2)+5;

480 
©omicPWM_PINA2_lowSèã
 = 245-
©omicPWM_PINA2_highSèã
;

481 
©omicPWM_PIN12_highSèã
 = ((
mŸ‹
[7]-1000)>>2)+5;

482 
©omicPWM_PIN12_lowSèã
 = 245-
©omicPWM_PIN12_highSèã
;

485 
	}
}

490 
	$wrôeAŒMŸ‹s
(
öt16_t
 
mc
) {

491 
uöt8_t
 
i
 =0;i<
NUMBER_MOTOR
;i++) {

492 
mŸ‹
[
i
]=
mc
;

494 
	`wrôeMŸ‹s
();

495 
	}
}

500 
	$öôOuçut
() {

502 
uöt8_t
 
i
=0;i<
NUMBER_MOTOR
;i++) {

503 
	`pöMode
(
PWM_PIN
[
i
],
OUTPUT
);

507 #i‡
	`deföed
(
MEGA
)

508 #i‡(
NUMBER_MOTOR
 > 0)

510 
TCCR3A
 |(1<<
WGM31
);

511 
TCCR3A
 &~(1<<
WGM30
);

512 
TCCR3B
 |(1<<
WGM33
);

513 
TCCR3B
 &~(1<<
CS31
);

514 
ICR3
 |= 0x3FFF;

516 
TCCR3A
 |
	`_BV
(
COM3C1
);

518 #i‡(
NUMBER_MOTOR
 > 1)

519 
TCCR3A
 |
	`_BV
(
COM3A1
);

521 #i‡(
NUMBER_MOTOR
 > 2)

523 
TCCR4A
 |(1<<
WGM41
);

524 
TCCR4A
 &~(1<<
WGM40
);

525 
TCCR4B
 |(1<<
WGM43
);

526 
TCCR4B
 &~(1<<
CS41
);

527 
ICR4
 |= 0x3FFF;

529 
TCCR4A
 |
	`_BV
(
COM4A1
);

531 #i‡(
NUMBER_MOTOR
 > 3)

532 
TCCR3A
 |
	`_BV
(
COM3B1
);

534 #i‡(
NUMBER_MOTOR
 > 4)

535 
TCCR4A
 |
	`_BV
(
COM4B1
);

536 
TCCR4A
 |
	`_BV
(
COM4C1
);

538 #i‡(
NUMBER_MOTOR
 > 6)

540 
TCCR2A
 |
	`_BV
(
COM2B1
);

541 
TCCR2A
 |
	`_BV
(
COM2A1
);

546 #i‡
	`deföed
(
PROMICRO
)

547 #i‡
	`deföed
(
EXT_MOTOR_64KHZ
Ë|| deföed(
EXT_MOTOR_32KHZ
Ë|| deföed(
EXT_MOTOR_16KHZ
Ë|| deföed(
EXT_MOTOR_8KHZ
)

548 
TCCR1A
 = (1<<
WGM11
);

549 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
WGM12
Ë| (1<<
CS10
);

550 
TCCR3A
 = (1<<
WGM31
);

551 
TCCR3B
 = (1<<
WGM33
Ë| (1<<
WGM32
Ë| (1<<
CS30
);

552 #i‡
	`deföed
(
EXT_MOTOR_64KHZ
)

553 
ICR1
 = 0x00FF;

554 
ICR3
 = 0x00FF;

555 
TC4H
 = 0x00;

556 
OCR4C
 = 0xFF;

557 
TCCR4B
 = (1<<
CS40
);

558 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

559 
ICR1
 = 0x01FF;

560 
ICR3
 = 0x01FF;

561 
TC4H
 = 0x01;

562 
OCR4C
 = 0xFF;

563 
TCCR4B
 = (1<<
CS40
);

564 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

565 
ICR1
 = 0x03FF;

566 
ICR3
 = 0x03FF;

567 
TC4H
 = 0x03;

568 
OCR4C
 = 0xFF;

569 
TCCR4B
 = (1<<
CS40
);

570 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

571 
ICR1
 = 0x07FF;

572 
ICR3
 = 0x07FF;

573 
TC4H
 = 0x3;

574 
OCR4C
 = 0xFF;

575 
TCCR4B
 = (1<<
CS41
);

577 
TCCR1A
 |
	`_BV
(
COM1A1
);

578 
TCCR1A
 |
	`_BV
(
COM1B1
);

579 
TCCR3A
 |
	`_BV
(
COM3A1
);

580 
TCCR4D
 = 0;

581 
TCCR4C
 |(1<<
COM4D1
)|(1<<
PWM4D
);

583 #i‡(
NUMBER_MOTOR
 > 0Ë&& ( !
	`deföed
(
A32U4_4_HW_PWM_SERVOS
) )

584 
TCCR1A
 |(1<<
WGM11
);

585 
TCCR1A
 &~(1<<
WGM10
);

586 
TCCR1B
 &~(1<<
WGM12
Ë& ~(1<<
CS11
Ë& ~(1<<
CS12
);

587 
TCCR1B
 |(1<<
WGM13
Ë| (1<<
CS10
);

588 
ICR1
 |= 0x3FFF;

589 
TCCR1A
 |
	`_BV
(
COM1A1
);

591 #i‡(
NUMBER_MOTOR
 > 1)

592 
TCCR1A
 |
	`_BV
(
COM1B1
);

594 #i‡(
NUMBER_MOTOR
 > 2)

595 #i‡!
	`deföed
(
HWPWM6
)

596 
TCCR4E
 |(1<<
ENHC4
);

597 
TCCR4B
 &~(1<<
CS41
); TCCR4B |(1<<
CS42
)|(1<<
CS40
);

598 
TCCR4D
 |(1<<
WGM40
); 
TC4H
 = 0x3; 
OCR4C
 = 0xFF;

599 
TCCR4A
 |(1<<
COM4A0
)|(1<<
PWM4A
);

601 
TCCR3A
 |(1<<
WGM31
);

602 
TCCR3A
 &~(1<<
WGM30
);

603 
TCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS31
Ë& ~(1<<
CS32
);

604 
TCCR3B
 |(1<<
WGM33
Ë| (1<<
CS30
);

605 
ICR3
 |= 0x3FFF;

606 
TCCR3A
 |
	`_BV
(
COM3A1
);

609 #i‡(
NUMBER_MOTOR
 > 3Ë|| ( (NUMBER_MOTOR > 0Ë&& 
	`deföed
(
A32U4_4_HW_PWM_SERVOS
) )

610 #i‡
	`deföed
(
HWPWM6
)

611 
TCCR4E
 |(1<<
ENHC4
);

612 
TCCR4B
 &~(1<<
CS41
); TCCR4B |(1<<
CS42
)|(1<<
CS40
);

613 
TCCR4D
 |(1<<
WGM40
); 
TC4H
 = 0x3; 
OCR4C
 = 0xFF;

615 
TCCR4C
 |(1<<
COM4D1
)|(1<<
PWM4D
);

617 #i‡(
NUMBER_MOTOR
 > 4)

618 #i‡
	`deföed
(
HWPWM6
)

619 
TCCR1A
 |
	`_BV
(
COM1C1
);

620 
TCCR4A
 |(1<<
COM4A1
)|(1<<
PWM4A
);

622 
	`öôülizeSo·PWM
();

625 #i‡(
NUMBER_MOTOR
 > 6)

626 #i‡
	`deföed
(
HWPWM6
)

627 
	`öôülizeSo·PWM
();

634 #i‡
	`deföed
(
PROMINI
)

635 #i‡
	`deföed
(
EXT_MOTOR_32KHZ
)

636 
TCCR1A
 = (1<<
WGM11
);

637 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
CS10
);

638 
ICR1
 = 0x00FF;

639 
TCCR2B
 = (1<<
CS20
);

640 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

641 
TCCR1A
 = (1<<
WGM11
);

642 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
CS10
);

643 
ICR1
 = 0x07F8;

644 
TCCR2B
 = (1<<
CS21
);

645 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

646 
TCCR1A
 = (1<<
WGM11
);

647 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
CS10
);

648 
ICR1
 = 0x1FE0;

649 
TCCR2B
 = (1<<
CS20
Ë| (1<<
CS21
);

652 #i‡(
NUMBER_MOTOR
 > 0)

653 
TCCR1A
 |
	`_BV
(
COM1A1
);

655 #i‡(
NUMBER_MOTOR
 > 1)

656 
TCCR1A
 |
	`_BV
(
COM1B1
);

658 #i‡(
NUMBER_MOTOR
 > 2)

659 
TCCR2A
 |
	`_BV
(
COM2A1
);

661 #i‡(
NUMBER_MOTOR
 > 3)

662 
TCCR2A
 |
	`_BV
(
COM2B1
);

664 #i‡(
NUMBER_MOTOR
 > 4)

665 
	`öôülizeSo·PWM
();

666 #i‡
	`deföed
(
A0_A1_PIN_HEX
Ë|| (
NUMBER_MOTOR
 > 6)

667 
	`pöMode
(5,
INPUT
);pinMode(6,INPUT);

668 
	`pöMode
(
A0
,
OUTPUT
);pöMode(
A1
,OUTPUT);

674 #i‡
	`deföed
(
ESC_CALIB_CANNOT_FLY
)

675 
	`wrôeAŒMŸ‹s
(
ESC_CALIB_HIGH
);

676 
	`blökLED
(2,20, 2);

677 
	`dñay
(4000);

678 
	`wrôeAŒMŸ‹s
(
ESC_CALIB_LOW
);

679 
	`blökLED
(3,20, 2);

681 
	`dñay
(5000);

682 
	`blökLED
(4,20, 2);

683 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_2
);

685 
exô
;

688 
	`wrôeAŒMŸ‹s
(
MINCOMMAND
);

689 
	`dñay
(300);

690 #i‡
	`deföed
(
SERVO
)

691 
	`öôülizeSîvo
();

693 
	}
}

696 #i‡
deföed
(
SERVO
)

700 
	$öôülizeSîvo
() {

701 #i‡!
	`deföed
(
HW_PWM_SERVOS
)

703 #i‡(
PRI_SERVO_FROM
 =1Ë|| (
SEC_SERVO_FROM
 == 1)

704 
SERVO_1_PINMODE
;

706 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

707 
SERVO_2_PINMODE
;

709 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

710 
SERVO_3_PINMODE
;

712 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

713 
SERVO_4_PINMODE
;

715 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

716 
SERVO_5_PINMODE
;

718 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

719 
SERVO_6_PINMODE
;

721 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

722 
SERVO_7_PINMODE
;

724 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

725 
SERVO_8_PINMODE
;

729 #i‡
	`deföed
(
SERVO_1_HIGH
)

730 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
))

731 
TCCR0A
 = 0;

732 
TIMSK0
 |(1<<
OCIE0A
);

733 
	#SERVO_ISR
 
TIMER0_COMPA_ve˘


	)

734 
	#SERVO_CHANNEL
 
OCR0A


	)

735 
	#SERVO_1K_US
 250

	)

737 #i‡(
	`deföed
(
PROMICRO
Ë&& !deföed(
HWPWM6
))

738 
TCCR3A
 &~(1<<
WGM30
Ë& ~(1<<
WGM31
);

739 
TCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS31
Ë& ~(1<<
CS32
Ë& ~(1<<
WGM33
);

740 
TCCR3B
 |(1<<
CS30
);

741 
TIMSK3
 |(1<<
OCIE3A
);

742 
	#SERVO_ISR
 
TIMER3_COMPA_ve˘


	)

743 
	#SERVO_CHANNEL
 
OCR3A


	)

744 
	#SERVO_1K_US
 16000

	)

746 #i‡
	`deföed
(
MEGA
)

747 
TCCR5A
 &~(1<<
WGM50
Ë& ~(1<<
WGM51
);

748 
TCCR5B
 &~(1<<
WGM52
Ë& ~(1<<
CS51
Ë& ~(1<<
CS52
Ë& ~(1<<
WGM53
);

749 
TCCR5B
 |(1<<
CS50
);

750 
TIMSK5
 |(1<<
OCIE5A
);

751 
	#SERVO_ISR
 
TIMER5_COMPA_ve˘


	)

752 
	#SERVO_CHANNEL
 
OCR5A


	)

753 
	#SERVO_1K_US
 16000

	)

757 #i‡
	`deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
)

758 #i‡
	`deföed
(
SERVO_RFR_RATE
)

759 #i‡(
SERVO_RFR_RATE
 < 20)

760 
	#SERVO_RFR_RATE
 20

	)

762 #i‡(
SERVO_RFR_RATE
 > 400)

763 
	#SERVO_RFR_RATE
 400

	)

766 #i‡
	`deföed
(
SERVO_RFR_50HZ
)

767 
	#SERVO_RFR_RATE
 50

	)

768 #ñi‡
	`deföed
(
SERVO_RFR_160HZ
)

769 
	#SERVO_RFR_RATE
 160

	)

770 #ñi‡
	`deföed
(
SERVO_RFR_300HZ
)

771 
	#SERVO_RFR_RATE
 300

	)

774 
	#SERVO_TOP_VAL
 (
uöt16_t
)(1000000L / 
SERVO_RFR_RATE
)

	)

776 
TIMSK5
 &~(1<<
OCIE5A
);

777 #i‡(
PRI_SERVO_TO
 >1Ë|| (
SEC_SERVO_TO
 >= 1)

778 
TCCR5A
 |(1<<
WGM51
);

779 
TCCR5A
 &~(1<<
WGM50
);

780 
TCCR5B
 &~(1<<
WGM52
Ë& ~(1<<
CS50
Ë& ~(1<<
CS52
);

781 
TCCR5B
 |(1<<
WGM53
Ë| (1<<
CS51
);

782 
ICR5
 = 
SERVO_TOP_VAL
;

783 #i‡(
PRI_SERVO_FROM
 =1 || 
SEC_SERVO_FROM
 == 1)

784 
	`pöMode
(44,
OUTPUT
);

785 
TCCR5A
 |(1<<
COM5C1
);

787 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

788 
	`pöMode
(45,
OUTPUT
);

789 
TCCR5A
 |(1<<
COM5B1
);

791 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

792 
	`pöMode
(46,
OUTPUT
);

793 
TCCR5A
 |(1<<
COM5A1
);

796 #i‡(
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_TO
 >= 4)

797 
TCCR1A
 |(1<<
WGM11
);

798 
TCCR1A
 &~(1<<
WGM10
);

799 
TCCR1B
 &~(1<<
WGM12
Ë& ~(1<<
CS10
Ë& ~(1<<
CS12
);

800 
TCCR1B
 |(1<<
WGM13
Ë| (1<<
CS11
);

801 
ICR1
 = 
SERVO_TOP_VAL
;

802 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

803 
	`pöMode
(11, 
OUTPUT
);

804 
TCCR1A
 |(1<<
COM1A1
);

806 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

807 
	`pöMode
(12,
OUTPUT
);

808 
TCCR1A
 |(1<<
COM1B1
);

811 #i‡(
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_TO
 >= 6)

813 
TCCR4A
 |(1<<
WGM41
);

814 
TCCR4A
 &~(1<<
WGM40
);

815 
TCCR4B
 &~(1<<
WGM42
Ë& ~(1<<
CS40
Ë& ~(1<<
CS42
);

816 
TCCR4B
 |(1<<
WGM43
Ë| (1<<
CS41
);

817 
ICR4
 = 
SERVO_TOP_VAL
;

818 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

819 
	`pöMode
(6,
OUTPUT
);

820 
TCCR4A
 |
	`_BV
(
COM4A1
);

822 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

823 
	`pöMode
(7,
OUTPUT
);

824 
TCCR4A
 |
	`_BV
(
COM4B1
);

826 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

827 #i‡
	`deföed
(
AIRPLANE
Ë|| deföed(
HELICOPTER
)

828 
£rvo
[7] = 
MINCOMMAND
;

829 
OCR4C
 = 
MINCOMMAND
;

831 
	`pöMode
(8,
OUTPUT
);

832 
TCCR4A
 |
	`_BV
(
COM4C1
);

837 #i‡
	`deföed
(
PROMICRO
Ë&& deföed(
A32U4_4_HW_PWM_SERVOS
)

839 
TIMSK1
 &~(1<<
OCIE1A
Ë& ~(1<<
OCIE1B
Ë& ~(1<<
OCIE1C
);

840 
TCCR1A
 |(1<<
WGM11
);

841 
TCCR1A
 &~(1<<
WGM10
);

842 
TCCR1B
 &~(1<<
WGM12
Ë& ~(1<<
CS10
Ë& ~(1<<
CS12
);

843 
TCCR1B
 |(1<<
WGM13
Ë| (1<<
CS11
);

844 
	`pöMode
(9,
OUTPUT
);

845 
TCCR1A
 |(1<<
COM1A1
);

846 
	`pöMode
(10,
OUTPUT
);

847 
TCCR1A
 |(1<<
COM1B1
);

848 
	`pöMode
(11,
OUTPUT
);

849 
TCCR1A
 |(1<<
COM1C1
);

851 
TCCR3A
 |(1<<
WGM31
);

852 
TCCR3A
 &~(1<<
WGM30
);

853 
TCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS30
Ë& ~(1<<
CS32
);

854 
TCCR3B
 |(1<<
WGM33
Ë| (1<<
CS31
);

855 
	`pöMode
(5,
OUTPUT
);

856 
TCCR3A
 |(1<<
COM3A1
);

857 #i‡
	`deföed
(
SERVO_RFR_RATE
)

858 #i‡(
SERVO_RFR_RATE
 < 50) || (SERVO_RFR_RATE > 400)

861 
	#SERVO_TOP_VAL
 (
uöt16_t
)(1000000L / 
SERVO_RFR_RATE
)

	)

862 #ñi‡
	`deföed
(
SERVO_RFR_50HZ
)

863 
	#SERVO_TOP_VAL
 16700

	)

864 #ñi‡
	`deföed
(
SERVO_RFR_160HZ
)

865 
	#SERVO_TOP_VAL
 6200

	)

866 #ñi‡
	`deföed
(
SERVO_RFR_300HZ
)

867 
	#SERVO_TOP_VAL
 3300

	)

871 #i‡
	`deföed
(
SERVO_PIN5_RFR_RATE
)

872 #i‡(
SERVO_PIN5_RFR_RATE
 < 50) || (SERVO_PIN5_RFR_RATE > 400)

875 
	#SERVO_PIN5_TOP_VAL
 (
uöt16_t
)(1000000L / 
SERVO_PIN5_RFR_RATE
)

	)

877 
	#SERVO_PIN5_TOP_VAL
 
SERVO_TOP_VAL


	)

879 
ICR1
 = 
SERVO_TOP_VAL
;

880 
ICR3
 = 
SERVO_PIN5_TOP_VAL
;

882 
	}
}

894 #i‡
deföed
(
SERVO_1_HIGH
Ë&& !deföed(
A32U4_4_HW_PWM_SERVOS
)

895 
	#SERVO_PULSE
(
PIN_HIGH
,
ACT_STATE
,
SERVO_NUM
,
LAST_PIN_LOW
) \

896 }if(
°©e
 =
ACT_STATE
){ \

897 
LAST_PIN_LOW
; \

898 
PIN_HIGH
; \

899 
SERVO_CHANNEL
+=
SERVO_1K_US
; \

900 
°©e
++; \

901 }if(
°©e
 =
ACT_STATE
+1){ \

902 
SERVO_CHANNEL
+=
©omicSîvo
[
SERVO_NUM
]; \

903 
°©e
++; \

904 

	)

905 
ISR
(
SERVO_ISR
) {

906 
uöt8_t
 
	g°©e
 = 0;

907 if(
	g°©e
 == 0){

908 
SERVO_1_HIGH
;

909 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

910 
	g°©e
++;

911 }if(
	g°©e
==1){

912 
SERVO_CHANNEL
+=
©omicSîvo
[
SERVO_1_ARR_POS
];

913 
	g°©e
++;

914 #i‡
deföed
(
SERVO_2_HIGH
)

915 
SERVO_PULSE
(
SERVO_2_HIGH
,2,
SERVO_2_ARR_POS
,
SERVO_1_LOW
);

917 #i‡
deföed
(
SERVO_3_HIGH
)

918 
SERVO_PULSE
(
SERVO_3_HIGH
,4,
SERVO_3_ARR_POS
,
SERVO_2_LOW
);

920 #i‡
deföed
(
SERVO_4_HIGH
)

921 
SERVO_PULSE
(
SERVO_4_HIGH
,6,
SERVO_4_ARR_POS
,
SERVO_3_LOW
);

923 #i‡
deföed
(
SERVO_5_HIGH
)

924 
SERVO_PULSE
(
SERVO_5_HIGH
,8,
SERVO_5_ARR_POS
,
SERVO_4_LOW
);

926 #i‡
deföed
(
SERVO_6_HIGH
)

927 
SERVO_PULSE
(
SERVO_6_HIGH
,10,
SERVO_6_ARR_POS
,
SERVO_5_LOW
);

929 #i‡
deföed
(
SERVO_7_HIGH
)

930 
SERVO_PULSE
(
SERVO_7_HIGH
,12,
SERVO_7_ARR_POS
,
SERVO_6_LOW
);

932 #i‡
deföed
(
SERVO_8_HIGH
)

933 
SERVO_PULSE
(
SERVO_8_HIGH
,14,
SERVO_8_ARR_POS
,
SERVO_7_LOW
);

936 
	gLAST_LOW
;

937 #i‡
deföed
(
SERVO_RFR_300HZ
)

938 #i‡
deföed
(
SERVO_3_HIGH
)

939 
	gSERVO_CHANNEL
+=(
SERVO_1K_US
>>3);

940 
	g°©e
=0;

942 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

943 if(
	g°©e
<4){

944 
	g°©e
+=2;

946 
	g°©e
=0;

950 #i‡
deföed
(
SERVO_RFR_160HZ
)

951 #i‡
deföed
(
SERVO_4_HIGH
)

952 
	gSERVO_CHANNEL
+=(
SERVO_1K_US
>>3);

953 
	g°©e
=0;

955 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

956 if(
	g°©e
<8){

957 
	g°©e
+=2;

959 
	g°©e
=0;

963 #i‡
deföed
(
SERVO_RFR_50HZ
)

964 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

965 if(
	g°©e
<30){

966 
	g°©e
+=2;

968 
	g°©e
=0;

981 #i‡(
NUMBER_MOTOR
 > 4Ë&& (
deföed
(
PROMINI
Ë|| deföed(
PROMICRO
))

984 #i‡!
deföed
(
PROMICRO
)

985 
	#SOFT_PWM_ISR1
 
TIMER0_COMPB_ve˘


	)

986 
	#SOFT_PWM_ISR2
 
TIMER0_COMPA_ve˘


	)

987 
	#SOFT_PWM_CHANNEL1
 
OCR0B


	)

988 
	#SOFT_PWM_CHANNEL2
 
OCR0A


	)

989 #ñi‡!
deföed
(
HWPWM6
)

990 
	#SOFT_PWM_ISR1
 
TIMER3_COMPB_ve˘


	)

991 
	#SOFT_PWM_ISR2
 
TIMER3_COMPC_ve˘


	)

992 
	#SOFT_PWM_CHANNEL1
 
OCR3B


	)

993 
	#SOFT_PWM_CHANNEL2
 
OCR3C


	)

995 
	#SOFT_PWM_ISR2
 
TIMER0_COMPB_ve˘


	)

996 
	#SOFT_PWM_CHANNEL2
 
OCR0B


	)

1000 
öôülizeSo·PWM
() {

1001 #i‡!
deföed
(
PROMICRO
)

1002 
	gTCCR0A
 = 0;

1003 #i‡(
NUMBER_MOTOR
 > 4Ë&& !
deföed
(
HWPWM6
)

1004 
	gTIMSK0
 |(1<<
OCIE0B
);

1006 #i‡(
NUMBER_MOTOR
 > 6Ë|| ((NUMBER_MOTOR =6Ë&& !
deföed
(
SERVO
))

1007 
	gTIMSK0
 |(1<<
OCIE0A
);

1010 #i‡!
deföed
(
HWPWM6
)

1011 
	gTCCR3A
 &~(1<<
WGM30
Ë& ~(1<<
WGM31
);

1012 
	gTCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS31
Ë& ~(1<<
CS32
Ë& ~(1<<
WGM33
);

1013 
	gTCCR3B
 |(1<<
CS30
);

1014 
	gTIMSK3
 |(1<<
OCIE3B
);

1015 #i‡(
NUMBER_MOTOR
 > 6Ë|| ((NUMBER_MOTOR =6Ë&& !
deföed
(
SERVO
))

1016 
	gTIMSK3
 |(1<<
OCIE3C
);

1019 
	gTCCR0A
 = 0;

1020 
	gTIMSK0
 |(1<<
OCIE0B
);

1028 #i‡(
NUMBER_MOTOR
 =6Ë&& (!
deföed
(
SERVO
Ë&& !deföed(
HWPWM6
))

1029 
ISR
(
SOFT_PWM_ISR1
) {

1030 
uöt8_t
 
	g°©e
 = 0;

1031 if(
	g°©e
 == 0){

1032 i‡(
©omicPWM_PIN5_highSèã
>0Ë
SOFT_PWM_1_PIN_HIGH
;

1033 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_highSèã
;

1034 
	g°©e
 = 1;

1035 }if(
	g°©e
 == 1){

1036 
SOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_highSèã
;

1037 
	g°©e
 = 2;

1038 }if(
	g°©e
 == 2){

1039 
SOFT_PWM_1_PIN_LOW
;

1040 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_lowSèã
;

1041 
	g°©e
 = 3;

1042 }if(
	g°©e
 == 3){

1043 
SOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_lowSèã
;

1044 
	g°©e
 = 0;

1047 
ISR
(
SOFT_PWM_ISR2
) {

1048 
uöt8_t
 
	g°©e
 = 0;

1049 if(
	g°©e
 == 0){

1050 i‡(
©omicPWM_PIN6_highSèã
>0Ë
SOFT_PWM_2_PIN_HIGH
;

1051 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_highSèã
;

1052 
	g°©e
 = 1;

1053 }if(
	g°©e
 == 1){

1054 
SOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_highSèã
;

1055 
	g°©e
 = 2;

1056 }if(
	g°©e
 == 2){

1057 
SOFT_PWM_2_PIN_LOW
;

1058 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_lowSèã
;

1059 
	g°©e
 = 3;

1060 }if(
	g°©e
 == 3){

1061 
SOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_lowSèã
;

1062 
	g°©e
 = 0;

1066 #i‡(
NUMBER_MOTOR
 > 4Ë&& !
deföed
(
HWPWM6
)

1068 
ISR
(
SOFT_PWM_ISR1
) {

1069 
uöt8_t
 
	g°©e
 = 0;

1070 if(
	g°©e
 == 0){

1071 
SOFT_PWM_1_PIN_HIGH
;

1072 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_highSèã
;

1073 
	g°©e
 = 1;

1074 }if(
	g°©e
 == 1){

1075 
SOFT_PWM_2_PIN_LOW
;

1076 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN6_lowSèã
;

1077 
	g°©e
 = 2;

1078 }if(
	g°©e
 == 2){

1079 
SOFT_PWM_2_PIN_HIGH
;

1080 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN6_highSèã
;

1081 
	g°©e
 = 3;

1082 }if(
	g°©e
 == 3){

1083 
SOFT_PWM_1_PIN_LOW
;

1084 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_lowSèã
;

1085 
	g°©e
 = 0;

1090 #i‡(
NUMBER_MOTOR
 > 6)

1091 
ISR
(
SOFT_PWM_ISR2
) {

1092 
uöt8_t
 
	g°©e
 = 0;

1093 if(
	g°©e
 == 0){

1094 
SOFT_PWM_3_PIN_HIGH
;

1095 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PINA2_highSèã
;

1096 
	g°©e
 = 1;

1097 }if(
	g°©e
 == 1){

1098 
SOFT_PWM_4_PIN_LOW
;

1099 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN12_lowSèã
;

1100 
	g°©e
 = 2;

1101 }if(
	g°©e
 == 2){

1102 
SOFT_PWM_4_PIN_HIGH
;

1103 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN12_highSèã
;

1104 
	g°©e
 = 3;

1105 }if(
	g°©e
 == 3){

1106 
SOFT_PWM_3_PIN_LOW
;

1107 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PINA2_lowSèã
;

1108 
	g°©e
 = 0;

1120 
öt16_t
 
gë_middÀ
(
uöt8_t
 
ƒ
) {

1121  (
	gc⁄f
.
	g£rvoC⁄f
[
ƒ
].
	gmiddÀ
 < 
	gRC_CHANS
Ë? 
	grcD©a
[
c⁄f
.
£rvoC⁄f
[ƒ].middÀ] : c⁄f.£rvoC⁄f[ƒ].
middÀ
;

1126 
mixTabÀ
() {

1127 
öt16_t
 
	gmaxMŸ‹
;

1128 
uöt8_t
 
	gi
;

1129 #i‡
deföed
(
DYNBALANCE
)

1132 
	#PIDMIX
(
X
,
Y
,
Z
Ë
rcComm™d
[
THROTTLE
] + 
axisPID
[
ROLL
]*X +áxisPID[
PITCH
]*Y + 
YAW_DIRECTION
 *áxisPID[
YAW
]*
	)
Z

1133 
	#SERVODIR
(
n
,
b
Ë((
c⁄f
.
£rvoC⁄f
[n].
øã
 & bË? -1 : 1)

	)

1136 #i‡
deföed
–
MY_PRIVATE_MIXING
 )

1137 #ö˛udê
MY_PRIVATE_MIXING


1138 #ñi‡
deföed
–
BI
 )

1139 
	gmŸ‹
[0] = 
PIDMIX
(+1, 0, 0);

1140 
	gmŸ‹
[1] = 
PIDMIX
(-1, 0, 0);

1141 
	g£rvo
[4] = (
SERVODIR
(4,2Ë* 
	gaxisPID
[
YAW
]Ë+ (SERVODIR(4,1Ë*áxisPID[
PITCH
]Ë+ 
gë_middÀ
(4);

1142 
	g£rvo
[5] = (
SERVODIR
(5,2Ë* 
	gaxisPID
[
YAW
]Ë+ (SERVODIR(5,1Ë*áxisPID[
PITCH
]Ë+ 
gë_middÀ
(5);

1143 #ñi‡
deföed
–
TRI
 )

1144 
	gmŸ‹
[0] = 
PIDMIX
( 0,+4/3, 0);

1145 
	gmŸ‹
[1] = 
PIDMIX
(-1,-2/3, 0);

1146 
	gmŸ‹
[2] = 
PIDMIX
(+1,-2/3, 0);

1147 
	g£rvo
[5] = (
SERVODIR
(5, 1Ë* 
	gaxisPID
[
YAW
]Ë+ 
gë_middÀ
(5);

1148 #ñi‡
deföed
–
QUADP
 )

1149 
	gmŸ‹
[0] = 
PIDMIX
( 0,+1,-1);

1150 
	gmŸ‹
[1] = 
PIDMIX
(-1, 0,+1);

1151 
	gmŸ‹
[2] = 
PIDMIX
(+1, 0,+1);

1152 
	gmŸ‹
[3] = 
PIDMIX
( 0,-1,-1);

1153 #ñi‡
deföed
–
QUADX
 )

1154 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1155 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1156 
	gmŸ‹
[2] = 
PIDMIX
(+1,+1,+1);

1157 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1,-1);

1158 #ñi‡
deföed
–
Y4
 )

1159 
	gmŸ‹
[0] = 
PIDMIX
(+0,+1,-1);

1160 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1, 0);

1161 
	gmŸ‹
[2] = 
PIDMIX
(+0,+1,+1);

1162 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1, 0);

1163 #ñi‡
deföed
–
Y6
 )

1164 
	gmŸ‹
[0] = 
PIDMIX
(+0,+4/3,+1);

1165 
	gmŸ‹
[1] = 
PIDMIX
(-1,-2/3,-1);

1166 
	gmŸ‹
[2] = 
PIDMIX
(+1,-2/3,-1);

1167 
	gmŸ‹
[3] = 
PIDMIX
(+0,+4/3,-1);

1168 
	gmŸ‹
[4] = 
PIDMIX
(-1,-2/3,+1);

1169 
	gmŸ‹
[5] = 
PIDMIX
(+1,-2/3,+1);

1170 #ñi‡
deföed
–
HEX6
 )

1171 
	gmŸ‹
[0] = 
PIDMIX
(-7/8,+1/2,+1);

1172 
	gmŸ‹
[1] = 
PIDMIX
(-7/8,-1/2,-1);

1173 
	gmŸ‹
[2] = 
PIDMIX
(+7/8,+1/2,+1);

1174 
	gmŸ‹
[3] = 
PIDMIX
(+7/8,-1/2,-1);

1175 
	gmŸ‹
[4] = 
PIDMIX
(+0 ,-1 ,+1);

1176 
	gmŸ‹
[5] = 
PIDMIX
(+0 ,+1 ,-1);

1177 #ñi‡
deföed
–
HEX6X
 )

1178 
	gmŸ‹
[0] = 
PIDMIX
(-1/2,+7/8,+1);

1179 
	gmŸ‹
[1] = 
PIDMIX
(-1/2,-7/8,+1);

1180 
	gmŸ‹
[2] = 
PIDMIX
(+1/2,+7/8,-1);

1181 
	gmŸ‹
[3] = 
PIDMIX
(+1/2,-7/8,-1);

1182 
	gmŸ‹
[4] = 
PIDMIX
(-1 ,+0 ,-1);

1183 
	gmŸ‹
[5] = 
PIDMIX
(+1 ,+0 ,+1);

1184 #ñi‡
deföed
–
HEX6H
 )

1185 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1186 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1187 
	gmŸ‹
[2] = 
PIDMIX
(+ 1,+1,+1);

1188 
	gmŸ‹
[3] = 
PIDMIX
(+ 1,-1,-1);

1189 
	gmŸ‹
[4] = 
PIDMIX
(0 ,0 ,0);

1190 
	gmŸ‹
[5] = 
PIDMIX
(0 ,0 ,0);

1191 #ñi‡
deföed
–
OCTOX8
 )

1192 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1193 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1194 
	gmŸ‹
[2] = 
PIDMIX
(+1,+1,+1);

1195 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1,-1);

1196 
	gmŸ‹
[4] = 
PIDMIX
(-1,+1,+1);

1197 
	gmŸ‹
[5] = 
PIDMIX
(-1,-1,-1);

1198 
	gmŸ‹
[6] = 
PIDMIX
(+1,+1,-1);

1199 
	gmŸ‹
[7] = 
PIDMIX
(+1,-1,+1);

1200 #ñi‡
deföed
–
OCTOFLATP
 )

1201 
	gmŸ‹
[0] = 
PIDMIX
(+7/10,-7/10,+1);

1202 
	gmŸ‹
[1] = 
PIDMIX
(-7/10,-7/10,+1);

1203 
	gmŸ‹
[2] = 
PIDMIX
(-7/10,+7/10,+1);

1204 
	gmŸ‹
[3] = 
PIDMIX
(+7/10,+7/10,+1);

1205 
	gmŸ‹
[4] = 
PIDMIX
(+0 ,-1 ,-1);

1206 
	gmŸ‹
[5] = 
PIDMIX
(-1 ,+0 ,-1);

1207 
	gmŸ‹
[6] = 
PIDMIX
(+0 ,+1 ,-1);

1208 
	gmŸ‹
[7] = 
PIDMIX
(+1 ,+0 ,-1);

1209 #ñi‡
deföed
–
OCTOFLATX
 )

1210 
	gmŸ‹
[0] = 
PIDMIX
(+1 ,-1/2,+1);

1211 
	gmŸ‹
[1] = 
PIDMIX
(-1/2,-1 ,+1);

1212 
	gmŸ‹
[2] = 
PIDMIX
(-1 ,+1/2,+1);

1213 
	gmŸ‹
[3] = 
PIDMIX
(+1/2,+1 ,+1);

1214 
	gmŸ‹
[4] = 
PIDMIX
(+1/2,-1 ,-1);

1215 
	gmŸ‹
[5] = 
PIDMIX
(-1 ,-1/2,-1);

1216 
	gmŸ‹
[6] = 
PIDMIX
(-1/2,+1 ,-1);

1217 
	gmŸ‹
[7] = 
PIDMIX
(+1 ,+1/2,-1);

1218 #ñi‡
deföed
–
VTAIL4
 )

1219 
	gmŸ‹
[0] = 
PIDMIX
(+0,+1, +1);

1220 
	gmŸ‹
[1] = 
PIDMIX
(-1, -1, +0);

1221 
	gmŸ‹
[2] = 
PIDMIX
(+0,+1, -1);

1222 
	gmŸ‹
[3] = 
PIDMIX
(+1, -1, -0);

1223 #ñi‡
deföed
–
FLYING_WING
 )

1225 i‡(!
	gf
.
	gARMED
) {

1226 
	g£rvo
[7] = 
MINCOMMAND
;

1228 
	g£rvo
[7] = 
c⁄°øö
(
rcComm™d
[
THROTTLE
], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1230 
	gmŸ‹
[0] = 
£rvo
[7];

1231 i‡(
	gf
.
	gPASSTHRU_MODE
) {

1232 
	g£rvo
[3] = (
SERVODIR
(3,1Ë* 
	grcComm™d
[
PITCH
]Ë+ (SERVODIR(3,2Ë*ÑcComm™d[
ROLL
]);

1233 
	g£rvo
[4] = (
SERVODIR
(4,1Ë* 
	grcComm™d
[
PITCH
]Ë+ (SERVODIR(4,2Ë*ÑcComm™d[
ROLL
]);

1235 
	g£rvo
[3] = (
SERVODIR
(3,1Ë* 
	gaxisPID
[
PITCH
]Ë+ (SERVODIR(3,2Ë*áxisPID[
ROLL
]);

1236 
	g£rvo
[4] = (
SERVODIR
(4,1Ë* 
	gaxisPID
[
PITCH
]Ë+ (SERVODIR(4,2Ë*áxisPID[
ROLL
]);

1238 
	g£rvo
[3] +
gë_middÀ
(3);

1239 
	g£rvo
[4] +
gë_middÀ
(4);

1240 #ñi‡
deföed
–
AIRPLANE
 )

1245 i‡(!
	gf
.
	gARMED
) {

1246 
	g£rvo
[7] = 
MINCOMMAND
;

1248 
	g£rvo
[7] = 
c⁄°øö
(
rcComm™d
[
THROTTLE
], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1250 
	gmŸ‹
[0] = 
£rvo
[7];

1253 
öt16_t
 
	gÊ≠≥r⁄s
[2]={0,0};

1254 #i‡ 
deföed
(
FLAPPERONS
Ë&& deföed(
FLAPPERON_EP
)

1255 
öt8_t
 
	gÊ≠öv
[2] = 
FLAPPERON_INVERT
;

1256 
öt16_t
 
	gF_Endpoöt
[2] = 
FLAPPERON_EP
;

1257 
öt16_t
 
	gÊ≠
 =
MIDRC
-
c⁄°øö
(
rcD©a
[
FLAPPERONS
],
F_Endpoöt
[0],F_Endpoint[1]);

1258 
öt16_t
 
	g¶owFœps

Ê≠
;

1259 #i‡
deföed
(
FLAPSPEED
)

1260 i‡(
	g¶owFœps
 < 
	gÊ≠
 ){¶owFœps+=
FLAPSPEED
;}if(slowFlaps > flap){slowFlaps-=FLAPSPEED;}

1262 
	g¶owFœps
 = 
Ê≠
;

1264 
	gÊ≠
 = 
MIDRC
-(
c⁄°øö
(MIDRC-
¶owFœps
,
F_Endpoöt
[0],F_Endpoint[1]));

1265 
	gi
=0; i<2; i++){
	gÊ≠≥r⁄s
[
i
] = 
Ê≠
 * 
Ê≠öv
[i] ;}

1269 #i‡
deföed
(
FLAPS
)

1272 
öt16_t
 
	glFœp
 = 
gë_middÀ
(2);

1273 
	glFœp
 = 
c⁄°øö
(
lFœp
, 
c⁄f
.
£rvoC⁄f
[2].
mö
, c⁄f.£rvoC⁄f[2].
max
);

1274 
	glFœp
 = 
MIDRC
 - 
lFœp
;

1275 
öt16_t
 
	g¶ow_LFœps

lFœp
;

1276 #i‡
deföed
(
FLAPSPEED
)

1277 i‡(
	g¶ow_LFœps
 < 
	glFœp
 ){¶ow_LFœps+=
FLAPSPEED
;} if(slow_LFlaps >ÜFlap){slow_LFlaps-=FLAPSPEED;}

1279 
	g¶ow_LFœps
 = 
lFœp
;

1281 
	g£rvo
[2] = ((
öt32_t
)
c⁄f
.
£rvoC⁄f
[2].
øã
 * 
¶ow_LFœps
)/100L;

1282 
	g£rvo
[2] +
MIDRC
;

1285 if(
	gf
.
	gPASSTHRU_MODE
){

1286 
	g£rvo
[3] = 
rcComm™d
[
ROLL
] + 
Ê≠≥r⁄s
[0];

1287 
	g£rvo
[4] = 
rcComm™d
[
ROLL
] + 
Ê≠≥r⁄s
[1];

1288 
	g£rvo
[5] = 
rcComm™d
[
YAW
];

1289 
	g£rvo
[6] = 
rcComm™d
[
PITCH
];

1292 
	g£rvo
[3] = 
axisPID
[
ROLL
] + 
Ê≠≥r⁄s
[0];

1293 
	g£rvo
[4] = 
axisPID
[
ROLL
] + 
Ê≠≥r⁄s
[1];

1294 
	g£rvo
[5] = 
axisPID
[
YAW
];

1295 
	g£rvo
[6] = 
axisPID
[
PITCH
];

1297 
	gi
=3;i<7;i++) {

1298 
	g£rvo
[
i
] = ((
öt32_t
)
c⁄f
.
£rvoC⁄f
[i].
øã
 * 
£rvo
[i])/100L;

1299 
	g£rvo
[
i
] +
gë_middÀ
(i);

1301 #ñi‡
deföed
–
SINGLECOPTER
 )

1311 
	gi
=3;i<7;i++) {

1312 
	g£rvo
[
i
] = (
axisPID
[
YAW
] * 
SERVODIR
(i,2)Ë+ (
	gaxisPID
[(6-i)>>1] * SERVODIR(i,1));

1313 
	g£rvo
[
i
] +
gë_middÀ
(i);

1315 
	gmŸ‹
[0] = 
rcComm™d
[
THROTTLE
];

1316 #ñi‡
deföed
–
DUALCOPTER
 )

1323 
	gi
=4;i<6;i++) {

1324 
	g£rvo
[
i
] = 
axisPID
[5-i] * 
SERVODIR
(i,1);

1325 
	g£rvo
[
i
] +
gë_middÀ
(i);

1327 
	gmŸ‹
[0] = 
PIDMIX
(0,0,-1);

1328 
	gmŸ‹
[1] = 
PIDMIX
(0,0,+1);

1330 #ñi‡
deföed
–
HELICOPTER
 )

1333 
öt16_t
 
	ghñiRﬁl
,
	ghñiNick
;

1334 
öt16_t
 
	gcﬁlR™ge
[3] = 
COLLECTIVE_RANGE
;

1335 
öt16_t
 
	gcﬁÀ˘ive
;

1336 #ifde‡
GOVERNOR_P


1337 
öt16_t
 
	gœ°_cﬁÀ˘ive
 = 0, 
	gdñè_cﬁÀ˘ive
 = 0, 
	ggovîn‹ThrŸée
 = 0;

1344 
öt16_t
 
	gcﬁÀ˘
 = 
rcD©a
[
COLLECTIVE_PITCH
] - (1500 + 
cﬁlR™ge
[1]);

1345 i‡(
	gcﬁÀ˘
>0) {

1346 
	gcﬁÀ˘ive
 = 
cﬁÀ˘
 * (
cﬁlR™ge
[2]*0.01);

1348 
	gcﬁÀ˘ive
 = 
cﬁÀ˘
 * (
cﬁlR™ge
[0]*0.01);

1355 #ifde‡
GOVERNOR_P


1356 
	gdñè_cﬁÀ˘ive
 = 
cﬁÀ˘ive
 - 
œ°_cﬁÀ˘ive
;

1357 
	gœ°_cﬁÀ˘ive
 = 
cﬁÀ˘ive
;

1358 i‡(! 
	gf
.
	gARMED
 || ! 
	grcO±i⁄s
[
BOXGOV
] || (
	grcComm™d
[
THROTTLE
] < 
	gc⁄f
.
	gmöthrŸée
) )

1359 
	ggovîn‹ThrŸée
 = 0;

1360 i‡(
	gdñè_cﬁÀ˘ive
 > 0) {

1361 
	ggovîn‹ThrŸée
 +
dñè_cﬁÀ˘ive
 * 
c⁄f
.
govîn‹P
;

1363 i‡(
	grcComm™d
[
THROTTLE
] + 
	ggovîn‹ThrŸée
 > 
	gMAXTHROTTLE
Ëgovîn‹ThrŸéê
MAXTHROTTLE
 - 
rcComm™d
[THROTTLE];

1365 
uöt8_t
 
	gd
 = 0;

1366 i‡(! (++
	gd
 % 
	gc⁄f
.
	ggovîn‹D
)Ë
	ggovîn‹ThrŸée
 -= 10;

1368 i‡(
	ggovîn‹ThrŸée
 < 0) governorThrottle = 0;

1371 if(
	gf
.
	gPASSTHRU_MODE
){

1372 
	ghñiRﬁl
 = 
rcComm™d
[
ROLL
] ;

1373 
	ghñiNick
 = 
rcComm™d
[
PITCH
];

1375 
	ghñiRﬁl
 = 
axisPID
[
ROLL
];

1376 
	ghñiNick
 = 
axisPID
[
PITCH
];

1380 
öt16_t
 
	gcR™ge
[2] = 
CONTROL_RANGE
;

1381 
	ghñiRﬁl
*
cR™ge
[0]*0.01;

1382 
	ghñiNick
*
cR™ge
[1]*0.01;

1389 
öt16_t
 
	gacmd
 = 
abs
(
cﬁÀ˘ive
Ë- 
c⁄f
.
yawCﬁlPªcompDódb™d
;

1390 i‡(
	gacmd
 > 0 ){

1391 
	g£rvo
[5] = (
axisPID
[
YAW
] * 
SERVODIR
(5,1)Ë+ 
	gc⁄f
.
	g£rvoC⁄f
[5].
	gmiddÀ
 + (
acmd
 * c⁄f.
	gyawCﬁlPªcomp
)/10;

1393 
	g£rvo
[5] = (
axisPID
[
YAW
] * 
SERVODIR
(5,1)Ë+ 
	gc⁄f
.
	g£rvoC⁄f
[5].
	gmiddÀ
;

1395 #i‡
YAWMOTOR


1396 
	g£rvo
[5] = 
c⁄°øö
(
£rvo
[5], 
c⁄f
.
£rvoC⁄f
[5].
mö
, c⁄f.£rvoC⁄f[5].
max
);

1397 i‡(
	grcComm™d
[
THROTTLE
]<
	gc⁄f
.
	gmöthrŸée
 || !
	gf
.
	gARMED
Ë{
	g£rvo
[5] = 
MINCOMMAND
;}

1399 i‡(!
	gf
.
	gARMED
){

1400 
	g£rvo
[7] = 
MINCOMMAND
;

1402 
	g£rvo
[7] = 
rcComm™d
[
THROTTLE
];

1403 #ifde‡
GOVERNOR_P


1404 
	g£rvo
[7] +
govîn‹ThrŸée
;

1406 
	g£rvo
[7] = 
c⁄°øö
(
£rvo
[7], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1408 #i‚de‡
HELI_USE_SERVO_FOR_THROTTLE


1409 
	gmŸ‹
[0] = 
£rvo
[7];

1410 #i‡
YAWMOTOR


1411 
	gmŸ‹
[1] = 
£rvo
[5];

1417 
	#HñiXPIDMIX
(
Z
,
Y
,
X
Ë–(
cﬁlR™ge
[1] + 
cﬁÀ˘ive
)*Z + 
hñiNick
*Y + 
hñiRﬁl
*X)/10

	)

1418 #ifde‡
HELI_120_CCPM


1419 
öt8_t
 
	gnickMix
[3] = 
SERVO_NICK
;

1420 
öt8_t
 
	gÀ·Mix
[3] = 
SERVO_LEFT
;

1421 
öt8_t
 
	grightMix
[3]
SERVO_RIGHT
;

1423 
	g£rvo
[3] = 
HñiXPIDMIX
––
SERVODIR
(3,4Ë* 
nickMix
[0]), SERVODIR(3,2) *ÇickMix[1], SERVODIR(3,1) *ÇickMix[2]);

1424 
	g£rvo
[4] = 
HñiXPIDMIX
––
SERVODIR
(4,4Ë* 
À·Mix
[0]), SERVODIR(4,2) *ÜeftMix[1], SERVODIR(4,1) *ÜeftMix[2]);

1425 
	g£rvo
[6] = 
HñiXPIDMIX
––
SERVODIR
(6,4Ë* 
rightMix
[0]),SERVODIR(6,2) *ÑightMix[1],SERVODIR(6,1) *ÑightMix[2]);

1428 #ifde‡
HELI_90_DEG


1429 
	g£rvo
[3] = 
HñiXPIDMIX
–+0, (
c⁄f
.
£rvoC⁄f
[3].
øã
/10), -0);

1430 
	g£rvo
[4] = 
HñiXPIDMIX
–+0, +0, (
c⁄f
.
£rvoC⁄f
[4].
øã
/10));

1431 
	g£rvo
[6] = 
HñiXPIDMIX
–(
c⁄f
.
£rvoC⁄f
[6].
øã
/10), +0, +0);

1433 
	g£rvo
[3] +
gë_middÀ
(3);

1434 
	g£rvo
[4] +
gë_middÀ
(4);

1435 
	g£rvo
[6] +
gë_middÀ
(6);

1436 #ñi‡
deföed
–
GIMBAL
 )

1437 
	gi
=0;i<2;i++) {

1438 
	g£rvo
[
i
] = ((
öt32_t
)
c⁄f
.
£rvoC⁄f
[i].
øã
 * 
©t
.
™gÀ
[1-i]) /50L;

1439 
	g£rvo
[
i
] +
gë_middÀ
(i);

1448 #i‡
deföed
(
SERVO_TILT
)

1449 
	g£rvo
[0] = 
gë_middÀ
(0);

1450 
	g£rvo
[1] = 
gë_middÀ
(1);

1451 i‡(
	grcO±i⁄s
[
BOXCAMSTAB
]) {

1452 
	g£rvo
[0] +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[0].
øã
 * 
©t
.
™gÀ
[
PITCH
]) /50L;

1453 
	g£rvo
[1] +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[1].
øã
 * 
©t
.
™gÀ
[
ROLL
]) /50L;

1457 #ifde‡
SERVO_MIX_TILT


1458 
öt16_t
 
	g™gÀP
 = 
gë_middÀ
(0Ë- 
MIDRC
;

1459 
öt16_t
 
	g™gÀR
 = 
gë_middÀ
(1Ë- 
MIDRC
;

1460 i‡(
	grcO±i⁄s
[
BOXCAMSTAB
]) {

1461 
	g™gÀP
 +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[0].
øã
 * 
©t
.
™gÀ
[
PITCH
]) /50L;

1462 
	g™gÀR
 +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[1].
øã
 * 
©t
.
™gÀ
[
ROLL
]) /50L;

1464 
	g£rvo
[0] = 
MIDRC
+
™gÀP
-
™gÀR
;

1465 
	g£rvo
[1] = 
MIDRC
-
™gÀP
-
™gÀR
;

1469 #i‡
deföed
(
CAMTRIG
)

1471 
	#CAM_TIME_LOW
 
c⁄f
.
£rvoC⁄f
[2].
middÀ


	)

1472 
uöt8_t
 
	gˇmCy˛e
 = 0;

1473 
uöt8_t
 
	gˇmSèã
 = 0;

1474 
uöt32_t
 
	gˇmTime
 = 0;

1475 
uöt32_t
 
	g˘Low
;

1476 i‡(
	gˇmCy˛e
==1) {

1477 i‡(
ˇmSèã
 == 0) {

1478 
ˇmSèã
 = 1;

1479 
	gˇmTime
 = 
mûlis
();

1480 } i‡(
	gˇmSèã
 == 1) {

1481 i‡–(
mûlis
(Ë- 
ˇmTime
Ë> 
CAM_TIME_HIGH
 ) {

1482 
ˇmSèã
 = 2;

1483 
	gˇmTime
 = 
mûlis
();

1484 if(
	gCAM_TIME_LOW
 < 
	gRC_CHANS
) {

1485 
	g˘Low
 = 
c⁄°øö
((
rcD©a
[
CAM_TIME_LOW
]-1000)/4, 30, 250);

1486 
	g˘Low
 *
˘Low
;

1487 } 
	g˘Low
 = 
CAM_TIME_LOW
;

1490 i‡(((
mûlis
(Ë- 
	gˇmTime
Ë> 
	g˘Low
Ë|| !
	grcO±i⁄s
[
BOXCAMTRIG
] ) {

1491 
	gˇmSèã
 = 0;

1492 
	gˇmCy˛e
 = 0;

1496 i‡(
	grcO±i⁄s
[
BOXCAMTRIG
]Ë
	gˇmCy˛e
=1;

1497 
	g£rvo
[2] =(
ˇmSèã
==1Ë? 
c⁄f
.
£rvoC⁄f
[2].
max
 : c⁄f.£rvoC⁄f[2].
mö
;

1498 
	g£rvo
[2] = (
£rvo
[2]-1500)*
SERVODIR
(2,1)+1500;

1504 #i‡
deföed
(
SERVO
)

1505 
	gi
=
SERVO_START
-1; i<
	gSERVO_END
; i++) {

1506 if(
	gi
 < 2) {

1507 
	g£rvo
[
i
] = 
m≠
(
£rvo
[i], 1020,2000, 
c⁄f
.
£rvoC⁄f
[i].
mö
, c⁄f.£rvoC⁄f[i].
max
);

1509 #i‡
deföed
(
HELICOPTER
Ë&& (
YAWMOTOR
)

1510 if(
	gi
 != 5)

1512 
£rvo
[
i
] = 
c⁄°øö
(£rvo[i], 
c⁄f
.
£rvoC⁄f
[i].
mö
, c⁄f.£rvoC⁄f[i].
max
);

1514 #i‡
deföed
(
A0_A1_PIN_HEX
Ë&& (
NUMBER_MOTOR
 =6Ë&& deföed(
PROMINI
)

1515 
	g£rvo
[3] = 
£rvo
[0];

1516 
	g£rvo
[4] = 
£rvo
[1];

1518 #i‡
deföed
(
TRI
Ë&& deföed(
MEGA_HW_PWM_SERVOS
Ë&& deföed(
MEGA
)

1519 
	g£rvo
[5] = 
c⁄°øö
(
£rvo
[5], 
c⁄f
.
£rvoC⁄f
[5].
mö
, c⁄f.£rvoC⁄f[5].
max
);

1520 
	g£rvo
[3] = 
£rvo
[5];

1525 #ifde‡
VOLTAGEDROP_COMPENSATION


1527 #i‡(
VBATNOMINAL
 == 84)

1528 
	#GOV_R_NUM
 24

	)

1529 
öt8_t
 
	gg
[] = { 0,4,8,12,17,21,25,30,34,39,44,49,54,59,65,70,76,81,87,93,99,106,112,119,126 };

1530 #ñi‡(
VBATNOMINAL
 == 126)

1531 
	#GOV_R_NUM
 36

	)

1532 
öt8_t
 
	gg
[] = { 0,3,5,8,11,14,17,19,22,25,28,31,34,38,41,44,47,51,54,58,61,65,68,72,76,79,83,87,91,95,99,104,108,112,117,121,126 };

1533 #ñi‡(
VBATNOMINAL
 == 252)

1534 
	#GOV_R_NUM
 72

	)

1535 
öt8_t
 
	gg
[] = { 0,1,3,4,5,7,8,9,11,12,14,15,17,18,19,21,22,24,25,27,28,30,31,33,34,36,38,39,41,

1538 #ñi‡(
VBATNOMINAL
 == 255)

1539 
	#GOV_R_NUM
 73

	)

1540 
öt8_t
 
	gg
[] = { 0,1,3,4,5,7,8,9,11,12,14,15,16,18,19,21,22,24,25,26,28,29,31,33,34,36,37,39,40,

1543 #ñi‡(
VBATNOMINAL
 == 129)

1544 
	#GOV_R_NUM
 37

	)

1545 
öt8_t
 
	gg
[] = { 0,3,5,8,11,13,16,19,22,25,28,31,34,37,40,43,46,49,53,56,59,63,66,70,74,77,81,85,

1547 #ñi‡(
VBATNOMINAL
 == 168)

1548 
	#GOV_R_NUM
 48

	)

1549 
öt8_t
 
	gg
[] = { 0,2,4,6,8,10,12,14,17,19,21,23,25,28,30,32,34,37,39,42,44,47,49,52,54,57,59,62,

1554 
uöt8_t
 
	gv
 = 
c⁄°øö
–
VBATNOMINAL
 - c⁄°øö(
™Æog
.
vb©
, 
c⁄f
.
vb©Àvñ_¸ô
, VBATNOMINAL), 0, 
GOV_R_NUM
);

1555 
	gi
 = 0; i < 
	gNUMBER_MOTOR
; i++) {

1556 
	gmŸ‹
[
i
] +––(
öt32_t
)(
mŸ‹
[i]-1000Ë* (öt32_t)
g
[
v
] ) )/ 500;

1561 
	gmaxMŸ‹
=
mŸ‹
[0];

1562 
	gi
=1; i< 
	gNUMBER_MOTOR
; i++)

1563 i‡(
	gmŸ‹
[
i
]>
	gmaxMŸ‹
ËmaxMŸ‹=
mŸ‹
[i];

1564 
	gi
=0; i< 
	gNUMBER_MOTOR
; i++) {

1565 i‡(
	gmaxMŸ‹
 > 
	gMAXTHROTTLE
)

1566 
	gmŸ‹
[
i
] -
maxMŸ‹
 - 
MAXTHROTTLE
;

1567 
	gmŸ‹
[
i
] = 
c⁄°øö
(
mŸ‹
[i], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1568 i‡((
	grcD©a
[
THROTTLE
] < 
	gMINCHECK
Ë&& !
	gf
.
	gBARO_MODE
)

1569 #i‚de‡
MOTOR_STOP


1570 
	gmŸ‹
[
i
] = 
c⁄f
.
möthrŸée
;

1572 
	gmŸ‹
[
i
] = 
MINCOMMAND
;

1574 i‡(!
	gf
.
	gARMED
)

1575 
	gmŸ‹
[
i
] = 
MINCOMMAND
;

1579 #i‡(
LOG_VALUES
 >3Ë|| 
deföed
(
POWERMETER_SOFT
)

1581 
uöt32_t
 
	gœ°Ród
 = 
cuºítTime
;

1582 
uöt16_t
 
	gamp
;

1583 
uöt32_t
 
	gampsum
, 
	gampus
;

1589 
uöt16_t
 
	gam≥ªs
[64] = { 0, 2, 6, 15, 30, 52, 82,123,

1598 i‡(
	g™Æog
.
	gvb©
 > 
	gNO_VBAT
) {

1599 
	gampsum
 = 0;

1600 
	gi
 =0;i<
	gNUMBER_MOTOR
;i++) {

1601 
	gamp
 = 
am≥ªs
[ ((
mŸ‹
[
i
] - 1000)>>4Ë] / 
™Æog
.
vb©
;

1602 
	gampus
 = ( (
cuºítTime
-
œ°Ród
Ë* (
uöt32_t
)
amp
 * (uöt32_t)
c⁄f
.
pöt2ma
 ) / 
PLEVELDIVSOFT
;

1603 #i‡(
LOG_VALUES
 >= 3)

1604 
	gpMëî
[
i
]+
ampus
;

1606 #i‡
deföed
(
POWERMETER_SOFT
)

1607 
	gampsum
 +
ampus
;

1610 #i‡
deföed
(
POWERMETER_SOFT
)

1611 
	gpMëî
[
PMOTOR_SUM
]+
ampsum
 / 
NUMBER_MOTOR
;

1614 
	gœ°Ród
 = 
cuºítTime
;

	@Output.h

1 #i‚de‡
OUTPUT_H_


2 
	#OUTPUT_H_


	)

4 
uöt8_t
 
PWM_PIN
[8];

6 
öôOuçut
();

7 
mixTabÀ
();

8 
wrôeSîvos
();

9 
wrôeMŸ‹s
();

	@Protocol.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"EEPROM.h
"

6 
	~"LCD.h
"

7 
	~"Ouçut.h
"

8 
	~"GPS.h
"

9 
	~"Mu…iWii.h
"

10 
	~"Sîül.h
"

11 
	~"PrŸocﬁ.h
"

12 
	~"RX.h
"

16 
	#MSP_VERSION
 0

	)

21 
	#MSP_PRIVATE
 1

22 

	)

23 
	#MSP_IDENT
 100

24 
	#MSP_STATUS
 101

25 
	#MSP_RAW_IMU
 102

26 
	#MSP_SERVO
 103

27 
	#MSP_MOTOR
 104

28 
	#MSP_RC
 105

29 
	#MSP_RAW_GPS
 106

30 
	#MSP_COMP_GPS
 107

31 
	#MSP_ATTITUDE
 108

32 
	#MSP_ALTITUDE
 109

33 
	#MSP_ANALOG
 110

34 
	#MSP_RC_TUNING
 111

35 
	#MSP_PID
 112

36 
	#MSP_BOX
 113

37 
	#MSP_MISC
 114

38 
	#MSP_MOTOR_PINS
 115

39 
	#MSP_BOXNAMES
 116

40 
	#MSP_PIDNAMES
 117

41 
	#MSP_WP
 118

42 
	#MSP_BOXIDS
 119

43 
	#MSP_SERVO_CONF
 120

44 

	)

45 
	#MSP_NAV_STATUS
 121

46 
	#MSP_NAV_CONFIG
 122

47 

	)

48 
	#MSP_CELLS
 130

49 

	)

50 
	#MSP_SET_RAW_RC
 200

51 
	#MSP_SET_RAW_GPS
 201

52 
	#MSP_SET_PID
 202

53 
	#MSP_SET_BOX
 203

54 
	#MSP_SET_RC_TUNING
 204

55 
	#MSP_ACC_CALIBRATION
 205

56 
	#MSP_MAG_CALIBRATION
 206

57 
	#MSP_SET_MISC
 207

58 
	#MSP_RESET_CONF
 208

59 
	#MSP_SET_WP
 209

60 
	#MSP_SELECT_SETTING
 210

61 
	#MSP_SET_HEAD
 211

62 
	#MSP_SET_SERVO_CONF
 212

63 
	#MSP_SET_MOTOR
 214

64 
	#MSP_SET_NAV_CONFIG
 215

65 

	)

66 
	#MSP_SET_ACC_TRIM
 239

67 
	#MSP_ACC_TRIM
 240

68 
	#MSP_BIND
 241

69 

	)

70 
	#MSP_EEPROM_WRITE
 250

71 

	)

72 
	#MSP_DEBUGMSG
 253

73 
	#MSP_DEBUG
 254

74 

	)

75 #ifde‡
DEBUGMSG


76 
	#DEBUG_MSG_BUFFER_SIZE
 128

	)

77 
	gdebug_buf
[
DEBUG_MSG_BUFFER_SIZE
];

78 
uöt8_t
 
	ghód_debug
;

79 
uöt8_t
 
	gèû_debug
;

80 
uöt8_t
 
debugmsg_avaûabÀ
();

81 
debugmsg_£rülize
(
uöt8_t
 
l
);

84 
uöt8_t
 
	gCURRENTPORT
=0;

86 
	#INBUF_SIZE
 64

	)

87 
uöt8_t
 
	göBuf
[
INBUF_SIZE
][
UART_NUMBER
];

88 
uöt8_t
 
	gchecksum
[
UART_NUMBER
];

89 
uöt8_t
 
	gödRX
[
UART_NUMBER
];

90 
uöt8_t
 
	gcmdMSP
[
UART_NUMBER
];

92 
evÆu©eOthîD©a
(
uöt8_t
 
§
);

93 
evÆu©eComm™d
(
uöt8_t
 
c
);

95 
uöt8_t
 
	$ªad8
() {

96  
öBuf
[
ödRX
[
CURRENTPORT
]++][CURRENTPORT]&0xff;

97 
	}
}

98 
uöt16_t
 
	$ªad16
() {

99 
uöt16_t
 
t
 = 
	`ªad8
();

100 
t
+(
uöt16_t
)
	`ªad8
()<<8;

101  
t
;

102 
	}
}

103 
uöt32_t
 
	$ªad32
() {

104 
uöt32_t
 
t
 = 
	`ªad16
();

105 
t
+(
uöt32_t
)
	`ªad16
()<<16;

106  
t
;

107 
	}
}

109 
	$£rülize8
(
uöt8_t
 
a
) {

110 
	`SîülSîülize
(
CURRENTPORT
,
a
);

111 
checksum
[
CURRENTPORT
] ^
a
;

112 
	}
}

113 
	$£rülize16
(
öt16_t
 
a
) {

114 
	`£rülize8
((
a
 ) & 0xFF);

115 
	`£rülize8
((
a
>>8) & 0xFF);

116 
	}
}

117 
	$£rülize32
(
uöt32_t
 
a
) {

118 
	`£rülize8
((
a
 ) & 0xFF);

119 
	`£rülize8
((
a
>> 8) & 0xFF);

120 
	`£rülize8
((
a
>>16) & 0xFF);

121 
	`£rülize8
((
a
>>24) & 0xFF);

122 
	}
}

124 
	$hódSîülRe•⁄£
(
uöt8_t
 
îr
, uöt8_à
s
) {

125 
	`£rülize8
('$');

126 
	`£rülize8
('M');

127 
	`£rülize8
(
îr
 ? '!' : '>');

128 
checksum
[
CURRENTPORT
] = 0;

129 
	`£rülize8
(
s
);

130 
	`£rülize8
(
cmdMSP
[
CURRENTPORT
]);

131 
	}
}

133 
	$hódSîülRïly
(
uöt8_t
 
s
) {

134 
	`hódSîülRe•⁄£
(0, 
s
);

135 
	}
}

137 
	$hódSîülEº‹
() {

138 
	`hódSîülRe•⁄£
(1,0);

139 
	}
}

141 
	$èûSîülRïly
() {

142 
	`£rülize8
(
checksum
[
CURRENTPORT
]);
	`U¨tSídD©a
(CURRENTPORT);

143 
	}
}

145 
	$£rülizeNames
(
PGM_P
 
s
) {

146 
	`hódSîülRïly
(
	`°æí_P
(
s
));

147 
PGM_P
 
c
 = 
s
; 
	`pgm_ªad_byã
(c); c++)

148 
	`£rülize8
(
	`pgm_ªad_byã
(
c
));

149 
	`èûSîülRïly
();

150 
	}
}

152 
__©åibuã__
 ((
noölöe
)Ë
	$s_°ru˘_w
(
uöt8_t
 *
cb
,uöt8_à
siz
) {

153 
siz
--Ë*
cb
++ = 
	`ªad8
();

154 
	}
}

156 
	$s_°ru˘_∑πül
(
uöt8_t
 *
cb
,uöt8_à
siz
) {

157 
siz
--Ë
	`£rülize8
(*
cb
++);

158 
	}
}

160 
	$s_°ru˘
(
uöt8_t
 *
cb
,uöt8_à
siz
) {

161 
	`hódSîülRïly
(
siz
);

162 
	`s_°ru˘_∑πül
(
cb
,
siz
);

163 
	`èûSîülRïly
();

164 
	}
}

166 
	$m•Ack
() {

167 
	`hódSîülRïly
(0);
	`èûSîülRïly
();

168 
	}
}

170 
	eMSP_¥Ÿocﬁ_byãs
 {

171 
	mIDLE
,

172 
	mHEADER_START
,

173 
	mHEADER_M
,

174 
	mHEADER_ARROW
,

175 
	mHEADER_SIZE
,

176 
	mHEADER_CMD


179 
	$£rülCom
() {

180 
uöt8_t
 
c
,
cc
,
p‹t
,
°©e
,
byãsTXBuff
;

181 
uöt8_t
 
off£t
[
UART_NUMBER
];

182 
uöt8_t
 
d©aSize
[
UART_NUMBER
];

183 
uöt8_t
 
c_°©e
[
UART_NUMBER
];

184 
uöt32_t
 
timeMax
;

186 
timeMax
 = 
	`mi¸os
();

187 
p‹t
=0;p‹t<
UART_NUMBER
;port++) {

188 
CURRENTPORT
=
p‹t
;

189 
	#RX_COND


	)

190 #i‡
	`deföed
(
SERIAL_RX
Ë&& (
UART_NUMBER
 > 1)

191 
	#RX_COND
 && (
RX_SERIAL_PORT
 !
p‹t
)

	)

193 
cc
 = 
	`SîülAvaûabÀ
(
p‹t
);

194 
cc
-- 
RX_COND
) {

195 
byãsTXBuff
 = 
	`SîülU£dTXBuff
(
p‹t
);

196 i‡(
byãsTXBuff
 > 
TX_BUFFER_SIZE
 - 50 ) ;

197 
c
 = 
	`SîülRód
(
p‹t
);

198 #ifde‡
SUPPRESS_ALL_SERIAL_MSP


199 
	`evÆu©eOthîD©a
(
c
);

201 
°©e
 = 
c_°©e
[
p‹t
];

203 i‡(
°©e
 =
IDLE
) {

204 i‡(
c
=='$'Ë
°©e
 = 
HEADER_START
;

205 
	`evÆu©eOthîD©a
(
c
);

206 } i‡(
°©e
 =
HEADER_START
) {

207 
°©e
 = (
c
=='M'Ë? 
HEADER_M
 : 
IDLE
;

208 } i‡(
°©e
 =
HEADER_M
) {

209 
°©e
 = (
c
=='<'Ë? 
HEADER_ARROW
 : 
IDLE
;

210 } i‡(
°©e
 =
HEADER_ARROW
) {

211 i‡(
c
 > 
INBUF_SIZE
) {

212 
°©e
 = 
IDLE
;

215 
d©aSize
[
p‹t
] = 
c
;

216 
checksum
[
p‹t
] = 
c
;

217 
off£t
[
p‹t
] = 0;

218 
ödRX
[
p‹t
] = 0;

219 
°©e
 = 
HEADER_SIZE
;

220 } i‡(
°©e
 =
HEADER_SIZE
) {

221 
cmdMSP
[
p‹t
] = 
c
;

222 
checksum
[
p‹t
] ^
c
;

223 
°©e
 = 
HEADER_CMD
;

224 } i‡(
°©e
 =
HEADER_CMD
) {

225 i‡(
off£t
[
p‹t
] < 
d©aSize
[port]) {

226 
checksum
[
p‹t
] ^
c
;

227 
öBuf
[
off£t
[
p‹t
]++][p‹t] = 
c
;

229 i‡(
checksum
[
p‹t
] =
c
)

230 
	`evÆu©eComm™d
(
cmdMSP
[
p‹t
]);

231 
°©e
 = 
IDLE
;

232 
cc
 = 0;

235 
c_°©e
[
p‹t
] = 
°©e
;

238 #i‡
	`deföed
(
GPS_SERIAL
)

239 i‡(
GPS_SERIAL
 =
p‹t
) {

240 
uöt32_t
 
GPS_œ°_‰ame_£í
;

241 i‡(
	`GPS_√wFøme
(
c
)) {

243 i‡(
GPS_upd©e
 == 1) GPS_update = 0; GPS_update = 1;

244 
GPS_œ°_‰ame_£í
 = 
timeMax
;

245 
GPS_Føme
 = 1;

249 i‡((
timeMax
 - 
GPS_œ°_‰ame_£í
) > 1200000) {

251 
f
.
GPS_FIX
 = 0;

252 
GPS_numS©
 = 0;

255 i‡(
	`mi¸os
()-
timeMax
>250) ;

260 
	}
}

262 
	$evÆu©eComm™d
(
uöt8_t
 
c
) {

263 
uöt32_t
 
tmp
=0;

265 
c
) {

270 
MSP_SET_RAW_RC
:

271 
	`s_°ru˘_w
((
uöt8_t
*)&
rcSîül
,16);

272 
rcSîülCou¡
 = 50;

274 
MSP_SET_PID
:

275 
	`m•Ack
();

276 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
pid
[0].
P8
,3*
PIDITEMS
);

278 
MSP_SET_BOX
:

279 
	`m•Ack
();

280 #i‡
EXTAUX


281 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],
CHECKBOXITEMS
*4);

283 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],
CHECKBOXITEMS
*2);

286 
MSP_SET_RC_TUNING
:

287 
	`m•Ack
();

288 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
rcR©e8
,7);

290 #i‡!
	`deföed
(
DISABLE_SETTINGS_TAB
)

291 
MSP_SET_MISC
:

293 
uöt16_t
 
a
,
b
,
c
,
d
,
e
,
f
;

294 
uöt32_t
 
g
;

295 
uöt16_t
 
h
;

296 
uöt8_t
 
i
,
j
,
k
,
l
;

297 } 
£t_misc
;

298 
	`m•Ack
();

299 
	`s_°ru˘_w
((
uöt8_t
*)&
£t_misc
,22);

300 #i‡
	`deföed
(
POWERMETER
)

301 
c⁄f
.
powîTriggî1
 = 
£t_misc
.
a
 / 
PLEVELSCALE
;

303 
c⁄f
.
möthrŸée
 = 
£t_misc
.
b
;

304 #ifde‡
FAILSAFE


305 
c⁄f
.
Áûß„_thrŸée
 = 
£t_misc
.
e
;

307 #i‡
MAG


308 
c⁄f
.
mag_de˛ö©i⁄
 = 
£t_misc
.
h
;

310 #i‡
	`deföed
(
VBAT
)

311 
c⁄f
.
vb©sˇÀ
 = 
£t_misc
.
i
;

312 
c⁄f
.
vb©Àvñ_w¨n1
 = 
£t_misc
.
j
;

313 
c⁄f
.
vb©Àvñ_w¨n2
 = 
£t_misc
.
k
;

314 
c⁄f
.
vb©Àvñ_¸ô
 = 
£t_misc
.
l
;

317 
MSP_MISC
:

319 
uöt16_t
 
a
,
b
,
c
,
d
,
e
,
f
;

320 
uöt32_t
 
g
;

321 
uöt16_t
 
h
;

322 
uöt8_t
 
i
,
j
,
k
,
l
;

323 } 
misc
;

324 
misc
.
a
 = 
ötPowîTriggî1
;

325 
misc
.
b
 = 
c⁄f
.
möthrŸée
;

326 
misc
.
c
 = 
MAXTHROTTLE
;

327 
misc
.
d
 = 
MINCOMMAND
;

328 #ifde‡
FAILSAFE


329 
misc
.
e
 = 
c⁄f
.
Áûß„_thrŸée
;

331 
misc
.
e
 = 0;

333 #ifde‡
LOG_PERMANENT


334 
misc
.
f
 = 
∂og
.
¨m
;

335 
misc
.
g
 = 
∂og
.
li„time
 + (∂og.
¨med_time
 / 1000000);

337 
misc
.
f
 = 0; misc.
g
 =0;

339 #i‡
MAG


340 
misc
.
h
 = 
c⁄f
.
mag_de˛ö©i⁄
;

342 
misc
.
h
 = 0;

344 #ifde‡
VBAT


345 
misc
.
i
 = 
c⁄f
.
vb©sˇÀ
;

346 
misc
.
j
 = 
c⁄f
.
vb©Àvñ_w¨n1
;

347 
misc
.
k
 = 
c⁄f
.
vb©Àvñ_w¨n2
;

348 
misc
.
l
 = 
c⁄f
.
vb©Àvñ_¸ô
;

350 
misc
.
i
 = 0;misc.
j
 = 0;misc.
k
 = 0;misc.
l
 = 0;

352 
	`s_°ru˘
((
uöt8_t
*)&
misc
,22);

355 #i‡
	`deföed
 (
DYNBALANCE
)

356 
MSP_SET_MOTOR
:

357 
	`m•Ack
();

358 
	`s_°ru˘_w
((
uöt8_t
*)&
mŸ‹
,16);

361 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


362 
MSP_SELECT_SETTING
:

363 if(!
f
.
ARMED
) {

364 
globÆ_c⁄f
.
cuºítSë
 = 
	`ªad8
();

365 if(
globÆ_c⁄f
.
cuºítSë
>2) global_conf.currentSet = 0;

366 
	`wrôeGlobÆSë
(0);

367 
	`ªadEEPROM
();

369 
	`m•Ack
();

372 
MSP_SET_HEAD
:

373 
	`m•Ack
();

374 
	`s_°ru˘_w
((
uöt8_t
*)&
magHﬁd
,2);

376 
MSP_IDENT
:

378 
uöt8_t
 
v
,
t
,
m•_v
;

379 
uöt32_t
 
ˇp
;

380 } 
id
;

381 
id
.
v
 = 
VERSION
;

382 
id
.
t
 = 
MULTITYPE
;

383 
id
.
m•_v
 = 
MSP_VERSION
;

384 
id
.
ˇp
 = (0+
BIND_CAPABLE
)|
DYNBAL
<<2|
FLAP
<<3|
NAVCAP
<<4|
EXTAUX
<<5|((
uöt32_t
)
NAVI_VERSION
<<28);

385 
	`s_°ru˘
((
uöt8_t
*)&
id
,7);

387 
MSP_STATUS
:

389 
uöt16_t
 
cy˛eTime
,
i2c_îr‹s_cou¡
,
£ns‹
;

390 
uöt32_t
 
Êag
;

391 
uöt8_t
 
£t
;

392 } 
°
;

393 
°
.
cy˛eTime
 = cycleTime;

394 
°
.
i2c_îr‹s_cou¡
 = i2c_errors_count;

395 
°
.
£ns‹
 = 
ACC
|
BARO
<<1|
MAG
<<2|
GPS
<<3|
SONAR
<<4;

396 #i‡
ACC


397 if(
f
.
ANGLE_MODE
Ë
tmp
 |1<<
BOXANGLE
;

398 if(
f
.
HORIZON_MODE
Ë
tmp
 |1<<
BOXHORIZON
;

400 #i‡
BARO
 && (!
	`deföed
(
SUPPRESS_BARO_ALTHOLD
))

401 if(
f
.
BARO_MODE
Ë
tmp
 |1<<
BOXBARO
;

403 if(
f
.
MAG_MODE
Ë
tmp
 |1<<
BOXMAG
;

404 #i‡!
	`deföed
(
FIXEDWING
)

405 #i‡
	`deföed
(
HEADFREE
)

406 if(
f
.
HEADFREE_MODE
Ë
tmp
 |1<<
BOXHEADFREE
;

407 if(
rcO±i⁄s
[
BOXHEADADJ
]Ë
tmp
 |= 1<<BOXHEADADJ;

410 #i‡
	`deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

411 if(
rcO±i⁄s
[
BOXCAMSTAB
]Ë
tmp
 |= 1<<BOXCAMSTAB;

413 #i‡
	`deföed
(
CAMTRIG
)

414 if(
rcO±i⁄s
[
BOXCAMTRIG
]Ë
tmp
 |= 1<<BOXCAMTRIG;

416 #i‡
GPS


417 
f
.
GPS_mode
) {

418 
GPS_MODE_HOLD
:

419 
tmp
 |1<<
BOXGPSHOLD
;

421 
GPS_MODE_RTH
:

422 
tmp
 |1<<
BOXGPSHOME
;

424 
GPS_MODE_NAV
:

425 
tmp
 |1<<
BOXGPSNAV
;

429 #i‡
	`deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

430 if(
f
.
PASSTHRU_MODE
Ë
tmp
 |1<<
BOXPASSTHRU
;

432 #i‡
	`deföed
(
BUZZER
)

433 if(
rcO±i⁄s
[
BOXBEEPERON
]Ë
tmp
 |= 1<<BOXBEEPERON;

435 #i‡
	`deföed
(
LED_FLASHER
)

436 if(
rcO±i⁄s
[
BOXLEDMAX
]Ë
tmp
 |= 1<<BOXLEDMAX;

437 if(
rcO±i⁄s
[
BOXLEDLOW
]Ë
tmp
 |= 1<<BOXLEDLOW;

439 #i‡
	`deföed
(
LANDING_LIGHTS_DDR
)

440 if(
rcO±i⁄s
[
BOXLLIGHTS
]Ë
tmp
 |= 1<<BOXLLIGHTS;

442 #i‡
	`deföed
(
VARIOMETER
)

443 if(
rcO±i⁄s
[
BOXVARIO
]Ë
tmp
 |= 1<<BOXVARIO;

445 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

446 if(
rcO±i⁄s
[
BOXCALIB
]Ë
tmp
 |= 1<<BOXCALIB;

448 #i‡
	`deföed
(
GOVERNOR_P
)

449 if(
rcO±i⁄s
[
BOXGOV
]Ë
tmp
 |= 1<<BOXGOV;

451 #i‡
	`deföed
(
OSD_SWITCH
)

452 if(
rcO±i⁄s
[
BOXOSD
]Ë
tmp
 |= 1<<BOXOSD;

454 if(
f
.
ARMED
Ë
tmp
 |1<<
BOXARM
;

455 
°
.
Êag
 = 
tmp
;

456 
°
.
£t
 = 
globÆ_c⁄f
.
cuºítSë
;

457 
	`s_°ru˘
((
uöt8_t
*)&
°
,11);

459 
MSP_RAW_IMU
:

460 #i‡
	`deföed
(
DYNBALANCE
)

461 
uöt8_t
 
axis
=0;axis<3;axis++Ë{
imu
.
gyroD©a
[axis]=imu.
gyroADC
[axis];imu.
accSmoŸh
[axis]imu.
accADC
[axis];}

463 
	`s_°ru˘
((
uöt8_t
*)&
imu
,18);

465 
MSP_SERVO
:

466 
	`s_°ru˘
((
uöt8_t
*)&
£rvo
,16);

468 
MSP_SERVO_CONF
:

469 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
£rvoC⁄f
[0].
mö
,56);

471 
MSP_SET_SERVO_CONF
:

472 
	`m•Ack
();

473 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
£rvoC⁄f
[0].
mö
,56);

475 
MSP_MOTOR
:

476 
	`s_°ru˘
((
uöt8_t
*)&
mŸ‹
,16);

478 
MSP_ACC_TRIM
:

479 
	`hódSîülRïly
(4);

480 
	`s_°ru˘_∑πül
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
PITCH
],2);

481 
	`s_°ru˘_∑πül
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
ROLL
],2);

482 
	`èûSîülRïly
();

484 
MSP_SET_ACC_TRIM
:

485 
	`m•Ack
();

486 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
PITCH
],2);

487 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
ROLL
],2);

489 
MSP_RC
:

490 
	`s_°ru˘
((
uöt8_t
*)&
rcD©a
,
RC_CHANS
*2);

492 #i‡
GPS


493 
MSP_SET_RAW_GPS
:

495 
uöt8_t
 
a
,
b
;

496 
öt32_t
 
c
,
d
;

497 
öt16_t
 
e
;

498 
uöt16_t
 
f
;

499 } 
£t_£t_øw_gps
;

500 
	`m•Ack
();

501 
	`s_°ru˘_w
((
uöt8_t
*)&
£t_£t_øw_gps
,14);

502 
f
.
GPS_FIX
 = 
£t_£t_øw_gps
.
a
;

503 
GPS_numS©
 = 
£t_£t_øw_gps
.
b
;

504 
GPS_co‹d
[
LAT
] = 
£t_£t_øw_gps
.
c
;

505 
GPS_co‹d
[
LON
] = 
£t_£t_øw_gps
.
d
;

506 
GPS_Ætôude
 = 
£t_£t_øw_gps
.
e
;

507 
GPS_•ìd
 = 
£t_£t_øw_gps
.
f
;

508 
GPS_upd©e
 |= 2;

510 
MSP_RAW_GPS
:

512 
uöt8_t
 
a
,
b
;

513 
öt32_t
 
c
,
d
;

514 
öt16_t
 
e
;

515 
uöt16_t
 
f
,
g
;

516 } 
m•_øw_gps
;

517 
m•_øw_gps
.
a
 = 
f
.
GPS_FIX
;

518 
m•_øw_gps
.
b
 = 
GPS_numS©
;

519 
m•_øw_gps
.
c
 = 
GPS_co‹d
[
LAT
];

520 
m•_øw_gps
.
d
 = 
GPS_co‹d
[
LON
];

521 
m•_øw_gps
.
e
 = 
GPS_Ætôude
;

522 
m•_øw_gps
.
f
 = 
GPS_•ìd
;

523 
m•_øw_gps
.
g
 = 
GPS_ground_cour£
;

524 
	`s_°ru˘
((
uöt8_t
*)&
m•_øw_gps
,16);

526 
MSP_COMP_GPS
:

528 
uöt16_t
 
a
;

529 
öt16_t
 
b
;

530 
uöt8_t
 
c
;

531 } 
m•_comp_gps
;

532 
m•_comp_gps
.
a
 = 
GPS_di°™˚ToHome
;

533 
m•_comp_gps
.
b
 = 
GPS_dúe˘i⁄ToHome
;

534 
m•_comp_gps
.
c
 = 
GPS_upd©e
 & 1;

535 
	`s_°ru˘
((
uöt8_t
*)&
m•_comp_gps
,5);

537 #i‡
	`deföed
(
USE_MSP_WP
)

538 
MSP_SET_NAV_CONFIG
:

539 
	`m•Ack
();

540 
	`s_°ru˘_w
((
uöt8_t
*)&
GPS_c⁄f
,(GPS_conf));

542 
MSP_NAV_CONFIG
:

543 
	`s_°ru˘
((
uöt8_t
*)&
GPS_c⁄f
,(GPS_conf));

545 
MSP_NAV_STATUS
:

546 
	`hódSîülRïly
(7);

547 
	`£rülize8
(
f
.
GPS_mode
);

548 
	`£rülize8
(
NAV_°©e
);

549 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

550 
	`£rülize8
(
missi⁄_°ï
.
numbî
);

551 
	`£rülize8
(
NAV_îr‹
);

552 
	`£rülize16
–(
öt16_t
)(
èrgë_bórög
/100));

554 
	`èûSîülRïly
();

556 
MSP_WP
:

558 
uöt8_t
 
wp_no
;

559 
uöt8_t
 
Êag
;

560 
boﬁ
 
suc˚ss
;

562 
wp_no
 = 
	`ªad8
();

563 
	`hódSîülRïly
(21);

564 i‡(
wp_no
 == 0) {

565 
	`£rülize8
(
wp_no
);

566 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

567 
	`£rülize32
(
GPS_home
[
LAT
]);

568 
	`£rülize32
(
GPS_home
[
LON
]);

569 
Êag
 = 
MISSION_FLAG_HOME
;

571 i‡(
wp_no
 == 255) {

572 
	`£rülize8
(
wp_no
);

573 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

574 
	`£rülize32
(
GPS_hﬁd
[
LAT
]);

575 
	`£rülize32
(
GPS_hﬁd
[
LON
]);

576 
Êag
 = 
MISSION_FLAG_HOLD
;

578 i‡((
wp_no
>0) && (wp_no<255)) {

579 i‡(
NAV_°©e
 =
NAV_STATE_NONE
) {

580 
suc˚ss
 = 
	`ªˇŒWP
(
wp_no
);

581 
	`£rülize8
(
wp_no
);

582 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

583 
	`£rülize32
(
missi⁄_°ï
.
pos
[
LAT
]);

584 
	`£rülize32
(
missi⁄_°ï
.
pos
[
LON
]);

585 i‡(
suc˚ss
 =
åue
Ë
Êag
 = 
missi⁄_°ï
.flag;

586 
Êag
 = 
MISSION_FLAG_CRC_ERROR
;

588 
	`£rülize8
(
wp_no
);

589 
	`£rülize8
(0);

590 
	`£rülize32
(
GPS_home
[
LAT
]);

591 
	`£rülize32
(
GPS_home
[
LON
]);

592 
Êag
 = 
MISSION_FLAG_NAV_IN_PROG
;

595 
	`£rülize32
(
missi⁄_°ï
.
Ætôude
);

596 
	`£rülize16
(
missi⁄_°ï
.
∑ømëî1
);

597 
	`£rülize16
(
missi⁄_°ï
.
∑ømëî2
);

598 
	`£rülize16
(
missi⁄_°ï
.
∑ømëî3
);

599 
	`£rülize8
(
Êag
);

600 
	`èûSîülRïly
();

603 
MSP_SET_WP
:

605 
uöt8_t
 
wp_no
 = 
	`ªad8
();

607 i‡(
NAV_°©e
 =
NAV_STATE_HOLD_INFINIT
 && 
wp_no
 == 255) {

608 
missi⁄_°ï
.
numbî
 = 
wp_no
;

609 
missi⁄_°ï
.
a˘i⁄
 = 
MISSION_HOLD_UNLIM
;

610 
uöt8_t
 
ãmp
 = 
	`ªad8
();

611 
missi⁄_°ï
.
pos
[
LAT
] = 
	`ªad32
();

612 
missi⁄_°ï
.
pos
[
LON
] = 
	`ªad32
();

613 
missi⁄_°ï
.
Ætôude
 = 
	`ªad32
();

614 
missi⁄_°ï
.
∑ømëî1
 = 
	`ªad16
();

615 
missi⁄_°ï
.
∑ømëî2
 = 
	`ªad16
();

616 
missi⁄_°ï
.
∑ømëî3
 = 
	`ªad16
();

617 
missi⁄_°ï
.
Êag
 = 
	`ªad8
();

618 i‡(
missi⁄_°ï
.
Ætôude
 !0Ë
	`£t_√w_Ætôude
(mission_step.altitude);

619 
	`GPS_£t_√xt_wp
(&
missi⁄_°ï
.
pos
[
LAT
], &missi⁄_°ï.pos[
LON
], &
GPS_co‹d
[LAT], &GPS_coord[LON]);

620 i‡((
wp_di°™˚
/100Ë>
GPS_c⁄f
.
ß„_wp_di°™˚
Ë
NAV_°©e
 = 
NAV_STATE_NONE
;

621 
NAV_°©e
 = 
NAV_STATE_WP_ENROUTE
;

624 i‡(
NAV_°©e
 =
NAV_STATE_NONE
) {

625 
missi⁄_°ï
.
numbî
 = 
wp_no
;

626 
missi⁄_°ï
.
a˘i⁄
 = 
	`ªad8
();

627 
missi⁄_°ï
.
pos
[
LAT
] = 
	`ªad32
();

628 
missi⁄_°ï
.
pos
[
LON
] = 
	`ªad32
();

629 
missi⁄_°ï
.
Ætôude
 = 
	`ªad32
();

630 
missi⁄_°ï
.
∑ømëî1
 = 
	`ªad16
();

631 
missi⁄_°ï
.
∑ømëî2
 = 
	`ªad16
();

632 
missi⁄_°ï
.
∑ømëî3
 = 
	`ªad16
();

633 
missi⁄_°ï
.
Êag
 = 
	`ªad8
();

643 i‡(
missi⁄_°ï
.
numbî
 == 0) {

644 
GPS_home
[
LAT
] = 
missi⁄_°ï
.
pos
[LAT];

645 
GPS_home
[
LON
] = 
missi⁄_°ï
.
pos
[LON];

647 i‡(
missi⁄_°ï
.
numbî
 >0 && mission_step.number<255)

648 i‡(
missi⁄_°ï
.
numbî
 <
	`gëMaxWPNumbî
())

649 
	`°‹eWP
();

650 
	`m•Ack
();

656 
MSP_ATTITUDE
:

657 
	`s_°ru˘
((
uöt8_t
*)&
©t
,6);

659 
MSP_ALTITUDE
:

660 
	`s_°ru˘
((
uöt8_t
*)&
Æt
,6);

662 
MSP_ANALOG
:

663 
	`s_°ru˘
((
uöt8_t
*)&
™Æog
,7);

665 
MSP_RC_TUNING
:

666 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
rcR©e8
,7);

668 
MSP_PID
:

669 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
pid
[0].
P8
,3*
PIDITEMS
);

671 
MSP_PIDNAMES
:

672 
	`£rülizeNames
(
pid«mes
);

674 
MSP_BOX
:

675 #i‡
EXTAUX


676 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],4*
CHECKBOXITEMS
);

678 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],2*
CHECKBOXITEMS
);

681 
MSP_BOXNAMES
:

682 
	`£rülizeNames
(
box«mes
);

684 
MSP_BOXIDS
:

685 
	`hódSîülRïly
(
CHECKBOXITEMS
);

686 
uöt8_t
 
i
=0;i<
CHECKBOXITEMS
;i++)

687 
	`£rülize8
(
	`pgm_ªad_byã
(&(
boxids
[
i
])));

688 
	`èûSîülRïly
();

690 
MSP_MOTOR_PINS
:

691 
	`s_°ru˘
((
uöt8_t
*)&
PWM_PIN
,8);

693 
MSP_RESET_CONF
:

694 if(!
f
.
ARMED
Ë
	`LﬂdDeÁu…s
();

695 
	`m•Ack
();

697 
MSP_ACC_CALIBRATION
:

698 if(!
f
.
ARMED
Ë
ˇlibøtögA
=512;

699 
	`m•Ack
();

701 #i‡
MAG


702 
MSP_MAG_CALIBRATION
:

703 if(!
f
.
ARMED
Ëf.
CALIBRATE_MAG
 = 1;

704 
	`m•Ack
();

707 #i‡
	`deföed
(
SPEK_BIND
)

708 
MSP_BIND
:

709 
	`•ekBöd
();

710 
	`m•Ack
();

713 
MSP_EEPROM_WRITE
:

714 
	`wrôeP¨ams
(0);

715 
	`m•Ack
();

717 
MSP_DEBUG
:

718 
	`s_°ru˘
((
uöt8_t
*)&
debug
,8);

720 #ifde‡
DEBUGMSG


721 
MSP_DEBUGMSG
:

723 
uöt8_t
 
size
 = 
	`debugmsg_avaûabÀ
();

724 i‡(
size
 > 16) size = 16;

725 
	`hódSîülRïly
(
size
);

726 
	`debugmsg_£rülize
(
size
);

727 
	`èûSîülRïly
();

732 
	`hódSîülEº‹
();
	`èûSîülRïly
();

735 
	}
}

738 
	$evÆu©eOthîD©a
(
uöt8_t
 
§
) {

739 #i‚de‡
SUPPRESS_OTHER_SERIAL_COMMANDS


740 #i‡
GPS


741 #i‡!
	`deföed
(
I2C_GPS
)

745 i‡(
CURRENTPORT
 =
GPS_SERIAL
) ;

748 
§
) {

752 #ifde‡
LCD_CONF


755 i‡(!
f
.
ARMED
Ë
	`c⁄figuøti⁄Lo›
();

758 #ifde‡
LOG_PERMANENT_SHOW_AT_L


760 i‡(!
f
.
ARMED
Ë
	`dumpPLog
(1);

763 #i‡
	`deföed
(
LCD_TELEMETRY
Ë&& deföed(
LCD_TEXTSTAR
)

765 
	`toggÀ_ãÀmëry
(1);

768 
	`toggÀ_ãÀmëry
(2);

771 
	`toggÀ_ãÀmëry
(3);

774 
	`toggÀ_ãÀmëry
(4);

782 #ifde‡
LCD_TELEMETRY


793 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_R


796 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

799 
	`toggÀ_ãÀmëry
(
§
);

804 
	}
}

806 
	$SîülWrôe16
(
uöt8_t
 
p‹t
, 
öt16_t
 
vÆ
)

808 
CURRENTPORT
=
p‹t
;

809 
	`£rülize16
(
vÆ
);
	`U¨tSídD©a
(
p‹t
);

810 
	}
}

813 #ifde‡
DEBUGMSG


814 
	$debugmsg_≠≥nd_°r
(c⁄° *
°r
) {

815 *
°r
) {

816 
debug_buf
[
hód_debug
++] = *
°r
++;

817 i‡(
hód_debug
 =
DEBUG_MSG_BUFFER_SIZE
) {

818 
hód_debug
 = 0;

821 
	}
}

823 
uöt8_t
 
	$debugmsg_avaûabÀ
() {

824 i‡(
hód_debug
 >
èû_debug
) {

825  
hód_debug
-
èû_debug
;

827  
hód_debug
 + (
DEBUG_MSG_BUFFER_SIZE
-
èû_debug
);

829 
	}
}

831 
	$debugmsg_£rülize
(
uöt8_t
 
l
) {

832 
uöt8_t
 
i
=0; i<
l
; i++) {

833 i‡(
hód_debug
 !
èû_debug
) {

834 
	`£rülize8
(
debug_buf
[
èû_debug
++]);

835 i‡(
èû_debug
 =
DEBUG_MSG_BUFFER_SIZE
) {

836 
èû_debug
 = 0;

839 
	`£rülize8
('\0');

842 
	}
}

844 
	$debugmsg_≠≥nd_°r
(c⁄° *
°r
Ë{
	}
};

	@Protocol.h

1 #i‚de‡
PROTOCOL_H_


2 
	#PROTOCOL_H_


	)

4 
£rülCom
();

5 
debugmsg_≠≥nd_°r
(c⁄° *
°r
);

	@RX.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Sîül.h
"

6 
	~"PrŸocﬁ.h
"

7 
	~"Mu…iWii.h
"

8 
	~"Aœrms.h
"

14 #i‡
deföed
(
SPEKTRUM
)

15 
	~<wúög.c
>

19 #i‡
deföed
(
SBUS
)

20 vﬁ©ûê
uöt16_t
 
	grcVÆue
[
RC_CHANS
] = {1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500};

21 #ñi‡
deföed
(
SPEKTRUM
Ë|| deföed(
SERIAL_SUM_PPM
)

22 vﬁ©ûê
uöt16_t
 
	grcVÆue
[
RC_CHANS
] = {1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502};

24 vﬁ©ûê
uöt16_t
 
	grcVÆue
[
RC_CHANS
] = {1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502};

27 #i‡
deföed
(
SERIAL_SUM_PPM
)

28 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
SERIAL_SUM_PPM
};

29 #ñi‡
deföed
(
SBUS
)

31 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
SBUS
};

32 #ñi‡
deföed
(
SUMD
)

33 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
PITCH
,
YAW
,
THROTTLE
,
ROLL
,
AUX1
,
AUX2
,
AUX3
,
AUX4
};

34 #ñi‡
deföed
(
SPEKTRUM
)

35 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
PITCH
,
YAW
,
THROTTLE
,
ROLL
,
AUX1
,
AUX2
,
AUX3
,
AUX4
,8,9,10,11};

37 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
ROLLPIN
, 
PITCHPIN
, 
YAWPIN
, 
THROTTLEPIN
, 
AUX1PIN
,
AUX2PIN
,
AUX3PIN
,
AUX4PIN
};

38 
uöt8_t
 
	gPCI¡_RX_Pös
[
PCINT_PIN_COUNT
] = {
PCINT_RX_BITS
};

41 
rxI¡
();

46 
	$c⁄figuªRe˚ivî
() {

48 #i‡
	`deföed
(
STANDARD_RX
)

49 #i‡
	`deföed
(
MEGA
)

50 
DDRK
 = 0;

53 
uöt8_t
 
i
 = 0; i < 
PCINT_PIN_COUNT
; i++){

54 
PCINT_RX_PORT
 |
PCI¡_RX_Pös
[
i
];

55 
PCINT_RX_MASK
 |
PCI¡_RX_Pös
[
i
];

57 
PCICR
 = 
PCIR_PORT_BIT
;

60 #i‡
	`deföed
(
PROMINI
)

61 #i‡
	`deföed
(
RCAUXPIN
)

62 
PCICR
 |= (1 << 0) ;

63 #i‡
	`deföed
(
RCAUXPIN8
)

64 
PCMSK0
 = (1 << 0);

66 #i‡
	`deföed
(
RCAUXPIN12
)

67 
PCMSK0
 = (1 << 4);

73 #i‡
	`deföed
(
PROMICRO
)

75 
DDRE
 &= ~(1 << 6);

76 
PORTE
 |= (1 << 6);

77 
EICRB
 |(1 << 
ISC60
);

78 
EIMSK
 |(1 << 
INT6
);

80 #i‡
	`deföed
(
RCAUX2PIND17
)

81 
DDRB
 &= ~(1 << 0);

84 #i‡
	`deföed
(
RCAUX2PINRXO
)

85 
DDRD
 &= ~(1 << 2);

86 
PORTD
 |= (1 << 2);

87 
EICRA
 |(1 << 
ISC20
);

88 
EIMSK
 |(1 << 
INT2
);

94 #i‡
	`deföed
(
SERIAL_SUM_PPM
)

95 
PPM_PIN_INTERRUPT
;

97 #i‡
	`deföed
 (
SPEKTRUM
Ë|| deföed(
SUMD
)

98 
	`SîülO≥n
(
RX_SERIAL_PORT
,115200);

100 #i‡
	`deföed
(
SBUS
)

101 
	`SîülO≥n
(
RX_SERIAL_PORT
,100000);

102 
RX_SERIAL_PORT
) {

103 #i‡
	`deföed
(
MEGA
)

104 0: 
UCSR0C
 |(1<<
UPM01
)|(1<<
USBS0
); ;

105 1: 
UCSR1C
 |(1<<
UPM11
)|(1<<
USBS1
); ;

106 2: 
UCSR2C
 |(1<<
UPM21
)|(1<<
USBS2
); ;

107 3: 
UCSR3C
 |(1<<
UPM31
)|(1<<
USBS3
); ;

111 
	}
}

116 #i‡
deföed
(
STANDARD_RX
)

118 #i‡
deföed
(
FAILSAFE
Ë&& !deföed(
PROMICRO
)

120 
	#RX_PIN_CHECK
(
pö_pos
, 
rc_vÆue_pos
) \

121 i‡(
mask
 & 
PCI¡_RX_Pös
[
pö_pos
]) { \

122 i‡(!(
pö
 & 
PCI¡_RX_Pös
[
pö_pos
])) { \

123 
dTime
 = 
cTime
-
edgeTime
[
pö_pos
]; \

124 i‡(900<
dTime
 && dTime<2200) { \

125 
rcVÆue
[
rc_vÆue_pos
] = 
dTime
; \

126 if((
rc_vÆue_pos
==
THROTTLEPIN
 ||Ñc_vÆue_pos==
YAWPIN
 || \

127 
rc_vÆue_pos
==
PITCHPIN
 ||Ñc_vÆue_pos==
ROLLPIN
) \

128 && 
dTime
>
FAILSAFE_DETECT_TRESHOLD
) \

129 
GoodPul£s
 |(1<<
rc_vÆue_pos
); \

131 } 
edgeTime
[
pö_pos
] = 
cTime
; \

132 }

	)

135 
	#RX_PIN_CHECK
(
pö_pos
, 
rc_vÆue_pos
) \

136 i‡(
mask
 & 
PCI¡_RX_Pös
[
pö_pos
]) { \

137 i‡(!(
pö
 & 
PCI¡_RX_Pös
[
pö_pos
])) { \

138 
dTime
 = 
cTime
-
edgeTime
[
pö_pos
]; \

139 i‡(900<
dTime
 && dTime<2200) { \

140 
rcVÆue
[
rc_vÆue_pos
] = 
dTime
; \

142 } 
edgeTime
[
pö_pos
] = 
cTime
; \

143 }

	)

147 
	$ISR
(
RX_PC_INTERRUPT
) {

148 
uöt8_t
 
mask
;

149 
uöt8_t
 
pö
;

150 
uöt16_t
 
cTime
,
dTime
;

151 
uöt16_t
 
edgeTime
[8];

152 
uöt8_t
 
PCötLa°
;

153 #i‡
	`deföed
(
FAILSAFE
Ë&& !deföed(
PROMICRO
)

154 
uöt8_t
 
GoodPul£s
;

157 
pö
 = 
RX_PCINT_PIN_PORT
;

159 
mask
 = 
pö
 ^ 
PCötLa°
;

160 
cTime
 = 
	`mi¸os
();

161 
	`£i
();

162 
PCötLa°
 = 
pö
;

164 #i‡(
PCINT_PIN_COUNT
 > 0)

165 
	`RX_PIN_CHECK
(0,2);

167 #i‡(
PCINT_PIN_COUNT
 > 1)

168 
	`RX_PIN_CHECK
(1,4);

170 #i‡(
PCINT_PIN_COUNT
 > 2)

171 
	`RX_PIN_CHECK
(2,5);

173 #i‡(
PCINT_PIN_COUNT
 > 3)

174 
	`RX_PIN_CHECK
(3,6);

176 #i‡(
PCINT_PIN_COUNT
 > 4)

177 
	`RX_PIN_CHECK
(4,7);

179 #i‡(
PCINT_PIN_COUNT
 > 5)

180 
	`RX_PIN_CHECK
(5,0);

182 #i‡(
PCINT_PIN_COUNT
 > 6)

183 
	`RX_PIN_CHECK
(6,1);

185 #i‡(
PCINT_PIN_COUNT
 > 7)

186 
	`RX_PIN_CHECK
(7,3);

189 #i‡
	`deföed
(
FAILSAFE
Ë&& !deföed(
PROMICRO
)

190 i‡(
GoodPul£s
==(1<<
THROTTLEPIN
)+(1<<
YAWPIN
)+(1<<
ROLLPIN
)+(1<<
PITCHPIN
)) {

191 
GoodPul£s
 = 0;

192 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

195 
	}
}

197 #i‡
deföed
(
PROMINI
)

198 #i‡
deföed
(
RCAUXPIN
)

204 
	$ISR
(
PCINT0_ve˘
) {

205 
uöt8_t
 
pö
;

206 
uöt16_t
 
cTime
,
dTime
;

207 
uöt16_t
 
edgeTime
;

209 
pö
 = 
PINB
;

210 
cTime
 = 
	`mi¸os
();

211 
	`£i
();

212 #i‡
	`deföed
(
RCAUXPIN8
)

213 i‡(!(
pö
 & 1<<0)) {

215 #i‡
	`deföed
(
RCAUXPIN12
)

216 i‡(!(
pö
 & 1<<4)) {

218 
dTime
 = 
cTime
-
edgeTime
; i‡(900<dTimê&& dTime<2200Ë
rcVÆue
[0] = dTime;

219 } 
edgeTime
 = 
cTime
;

220 
	}
}

225 #i‡
deföed
(
PROMICRO
)

227 
	$ISR
(
INT6_ve˘
){

228 
uöt16_t
 
now
,
diff
;

229 
uöt16_t
 
œ°
 = 0;

230 
now
 = 
	`mi¸os
();

231 if(!(
PINE
 & (1<<6))){

232 
diff
 = 
now
 - 
œ°
;

233 if(900<
diff
 && diff<2200){

234 
rcVÆue
[3] = 
diff
;

235 #i‡
	`deföed
(
FAILSAFE
)

236 if(
diff
>
FAILSAFE_DETECT_TRESHOLD
) {

237 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

241 }
œ°
 = 
now
;

242 
	}
}

244 #i‡
deföed
(
RCAUX2PINRXO
)

245 
	$ISR
(
INT2_ve˘
){

246 
uöt16_t
 
now
,
diff
;

247 
uöt16_t
 
œ°
 = 0;

248 
now
 = 
	`mi¸os
();

249 if(!(
PIND
 & (1<<2))){

250 
diff
 = 
now
 - 
œ°
;

251 if(900<
diff
 && diff<2200Ë
rcVÆue
[7] = diff;

252 }
œ°
 = 
now
;

253 
	}
}

263 #i‡
deföed
(
PROMICRO
Ë&& deföed(
SERIAL_SUM_PPM
)

264 
	$ISR
(
INT6_ve˘
){
	`rxI¡
();
	}
}

268 #i‡
deföed
(
PPM_ON_THROTTLE
Ë&& deföed(
MEGA
Ë&& deföed(
SERIAL_SUM_PPM
)

269 
	$ISR
(
PCINT2_ve˘
Ë{ if(
PINK
 & (1<<0)Ë
	`rxI¡
(); 
	}
}

273 #i‡
deföed
(
SERIAL_SUM_PPM
)

274 
	$rxI¡
() {

275 
uöt16_t
 
now
,
diff
;

276 
uöt16_t
 
œ°
 = 0;

277 
uöt8_t
 
ch™
 = 0;

278 #i‡
	`deföed
(
FAILSAFE
)

279 
uöt8_t
 
GoodPul£s
;

282 
now
 = 
	`mi¸os
();

283 
	`£i
();

284 
diff
 = 
now
 - 
œ°
;

285 
œ°
 = 
now
;

286 if(
diff
>3000Ë
ch™
 = 0;

288 if(900<
diff
 && diff<2200 && 
ch™
<
RC_CHANS
 ) {

289 
rcVÆue
[
ch™
] = 
diff
;

290 #i‡
	`deföed
(
FAILSAFE
)

291 if(
ch™
<4 && 
diff
>
FAILSAFE_DETECT_TRESHOLD
Ë
GoodPul£s
 |= (1<<chan);

292 if(
GoodPul£s
==0x0F) {

293 
GoodPul£s
 = 0;

294 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

298 
ch™
++;

300 
	}
}

306 #i‡
deföed
(
SBUS
)

308 
	#SBUS_SYNCBYTE
 0x0F

309 
uöt16_t
 
sbusIndex
=0;

	)

310 
uöt16_t
 
	gsbus
[25]={0};

312 
	$ªadSîül_RX
(){

313 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
)){

314 
vÆ
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

315 if(
sbusIndex
==0 && 
vÆ
 !
SBUS_SYNCBYTE
)

317 
sbus
[
sbusIndex
++] = 
vÆ
;

318 if(
sbusIndex
==25){

319 
sbusIndex
=0;

320 
•ekFømeFœgs
 = 0x00;

321 
rcVÆue
[0] = ((
sbus
[1]|sbus[2]<< 8Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

322 
rcVÆue
[1] = ((
sbus
[2]>>3|sbus[3]<<5Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

323 
rcVÆue
[2] = ((
sbus
[3]>>6|sbus[4]<<2|sbus[5]<<10Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

324 
rcVÆue
[3] = ((
sbus
[5]>>1|sbus[6]<<7Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

325 
rcVÆue
[4] = ((
sbus
[6]>>4|sbus[7]<<4Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

326 
rcVÆue
[5] = ((
sbus
[7]>>7|sbus[8]<<1|sbus[9]<<9Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

327 
rcVÆue
[6] = ((
sbus
[9]>>2|sbus[10]<<6Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

328 
rcVÆue
[7] = ((
sbus
[10]>>5|sbus[11]<<3Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

330 
rcVÆue
[8] = ((
sbus
[12]|sbus[13]<< 8Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

331 
rcVÆue
[9] = ((
sbus
[13]>>3|sbus[14]<<5Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

332 
rcVÆue
[10] = ((
sbus
[14]>>6|sbus[15]<<2|sbus[16]<<10Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

333 
rcVÆue
[11] = ((
sbus
[16]>>1|sbus[17]<<7Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

334 
rcVÆue
[12] = ((
sbus
[17]>>4|sbus[18]<<4Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

335 
rcVÆue
[13] = ((
sbus
[18]>>7|sbus[19]<<1|sbus[20]<<9Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

336 
rcVÆue
[14] = ((
sbus
[20]>>2|sbus[21]<<6Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

337 
rcVÆue
[15] = ((
sbus
[21]>>5|sbus[22]<<3Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

339 i‡((
sbus
[23]Ë& 0x0001Ë
rcVÆue
[16] = 2000; rcValue[16] = 1000;

340 i‡((
sbus
[23] >> 1Ë& 0x0001Ë
rcVÆue
[17] = 2000; rcValue[17] = 1000;

341 
•ekFømeD⁄e
 = 0x01;

344 #i‡
	`deföed
(
FAILSAFE
)

345 i‡(!((
sbus
[23] >> 3) & 0x0001))

346 {if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;}

351 
uöt8_t
 
adj_ödex
;

352 
adj_ödex
=0;ádj_index<16;ádj_index++) {

353 i‡(
rcVÆue
[
adj_ödex
] < 
MIDRC
)

354 
rcVÆue
[
adj_ödex
] -(
MIDRC
 -ÑcValue[adj_index]) >> 2;

356 
rcVÆue
[
adj_ödex
] +‘cVÆue[adj_ödex] - 
MIDRC
) >> 2;

360 
	}
}

367 #i‡
deföed
(
SUMD
)

368 
	#SUMD_SYNCBYTE
 0xA8

	)

369 
	#SUMD_MAXCHAN
 8

	)

370 
	#SUMD_BUFFSIZE
 
SUMD_MAXCHAN
*2 + 5

371 
uöt8_t
 
sumdIndex
=0;

	)

372 
uöt8_t
 
	gsumdSize
=0;

373 
uöt8_t
 
	gsumd
[
SUMD_BUFFSIZE
]={0};

375 
	$ªadSîül_RX
() {

376 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
)) {

377 
vÆ
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

378 if(
sumdIndex
 =0 && 
vÆ
 !
SUMD_SYNCBYTE
) ;

379 if(
sumdIndex
 =2Ë
sumdSize
 = 
vÆ
;

380 if(
sumdIndex
 < 
SUMD_BUFFSIZE
Ë
sumd
[sumdIndex] = 
vÆ
;

381 
sumdIndex
++;

383 if(
sumdIndex
 =
sumdSize
*2+5) {

384 
sumdIndex
 = 0;

385 
•ekFømeFœgs
 = 0x00;

386 
debug
[1] = 
sumd
[1];

387 i‡(
sumdSize
 > 
SUMD_MAXCHAN
) sumdSize = SUMD_MAXCHAN;

388 
uöt8_t
 
b
 = 0; b < 
sumdSize
; b++)

389 
rcVÆue
[
b
] = ((
sumd
[2*b+3]<<8) | sumd[2*b+4])>>3;

390 
•ekFømeD⁄e
 = 0x01;

392 #i‡
	`deföed
(
FAILSAFE
)

393 i‡(
sumd
[1] == 0x01)

394 {if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;}

398 
	}
}

404 #i‡
deföed
(
SPEKTRUM
)

405 
	$ªadSîül_RX
() {

406 i‡((!
f
.
ARMED
) &&

407 #i‡
	`deföed
(
FAILSAFE
Ë|| (
RX_SERIAL_PORT
 != 0)

408 (
Áûß„C¡
 > 5) &&

410 –
	`SîülPìk
(
RX_SERIAL_PORT
) == '$')) {

411 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
)) {

412 
	`£rülCom
();

413 
	`dñay
 (10);

417 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
Ë> 
SPEK_FRAME_SIZE
) {

418 
uöt8_t
 
i
 = 0; i < 
SPEK_FRAME_SIZE
; i++Ë{
	`SîülRód
(
RX_SERIAL_PORT
);}

420 i‡(
•ekFømeFœgs
 == 0x01) {

421 i‡(
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
Ë=
SPEK_FRAME_SIZE
) {

422 
	`SîülRód
(
RX_SERIAL_PORT
); SerialRead(RX_SERIAL_PORT);

423 
uöt8_t
 
b
 = 2; b < 
SPEK_FRAME_SIZE
; b += 2) {

424 
uöt8_t
 
bh
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

425 
uöt8_t
 
bl
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

426 
uöt8_t
 
•ekCh™√l
 = 0x0F & (
bh
 >> 
SPEK_CHAN_SHIFT
);

427 i‡(
•ekCh™√l
 < 
RC_CHANS
Ë
rcVÆue
[•ekCh™√l] = 988 + ((((
uöt16_t
)(
bh
 & 
SPEK_CHAN_MASK
Ë<< 8Ë+ 
bl
Ë
SPEK_DATA_SHIFT
);

429 
•ekFømeFœgs
 = 0x00;

430 
•ekFømeD⁄e
 = 0x01;

431 #i‡
	`deföed
(
FAILSAFE
)

432 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

435 
uöt32_t
 
•ekI¡îvÆ
 = (
timî0_ovîÊow_cou¡
 << 8Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
()Ë- 
•ekTimeLa°
;

436 i‡(
•ekI¡îvÆ
 > 2500Ë{
•ekFømeFœgs
 = 0;}

439 
	}
}

442 
uöt16_t
 
	$ªadRawRC
(
uöt8_t
 
ch™
) {

443 
uöt16_t
 
d©a
;

444 #i‡
	`deföed
(
SPEKTRUM
Ë|| deföed(
SBUS
Ë|| deföed(
SUMD
)

445 i‡(
ch™
 < 
RC_CHANS
) {

446 
d©a
 = 
rcVÆue
[
rcCh™√l
[
ch™
]];

447 } 
d©a
 = 1500;

449 
uöt8_t
 
ﬁdSREG
;

450 
ﬁdSREG
 = 
SREG
; 
	`˛i
();

451 
d©a
 = 
rcVÆue
[
rcCh™√l
[
ch™
]];

452 
SREG
 = 
ﬁdSREG
;

454  
d©a
;

455 
	}
}

460 
	#AVERAGING_ARRAY_LENGTH
 4

	)

461 
	$compuãRC
() {

462 
uöt16_t
 
rcD©a4VÆues
[
RC_CHANS
][
AVERAGING_ARRAY_LENGTH
-1];

463 
uöt16_t
 
rcD©aMón
,
rcD©aTmp
;

464 
uöt8_t
 
rc4VÆuesIndex
 = 0;

465 
uöt8_t
 
ch™
,
a
;

466 
uöt8_t
 
Áûß„GoodC⁄dôi⁄
 = 1;

468 #i‡!
	`deföed
(
OPENLRSv2MULTI
)

469 
rc4VÆuesIndex
++;

470 i‡(
rc4VÆuesIndex
 =
AVERAGING_ARRAY_LENGTH
-1)Ñc4ValuesIndex = 0;

471 
ch™
 = 0; ch™ < 
RC_CHANS
; chan++) {

472 
rcD©aTmp
 = 
	`ªadRawRC
(
ch™
);

473 #i‡
	`deföed
(
FAILSAFE
)

474 
Áûß„GoodC⁄dôi⁄
 = 
rcD©aTmp
>
FAILSAFE_DETECT_TRESHOLD
 || 
ch™
 > 3 || !
f
.
ARMED
;

476 #i‡
	`deföed
(
SPEKTRUM
Ë|| deföed(
SBUS
Ë|| deföed(
SUMD
)

477 if(
Áûß„GoodC⁄dôi⁄
Ë
rcD©a
[
ch™
] = 
rcD©aTmp
;

479 if(
Áûß„GoodC⁄dôi⁄
) {

480 
rcD©aMón
 = 
rcD©aTmp
;

481 
a
=0;a<
AVERAGING_ARRAY_LENGTH
-1;a++Ë
rcD©aMón
 +
rcD©a4VÆues
[
ch™
][a];

482 
rcD©aMón
 = (rcD©aMón+(
AVERAGING_ARRAY_LENGTH
/2))/AVERAGING_ARRAY_LENGTH;

483 i‡–
rcD©aMón
 < (
uöt16_t
)
rcD©a
[
ch™
] -3)ÑcData[chan] =ÑcDataMean+2;

484 i‡–
rcD©aMón
 > (
uöt16_t
)
rcD©a
[
ch™
] +3)ÑcData[chan] =ÑcDataMean-2;

485 
rcD©a4VÆues
[
ch™
][
rc4VÆuesIndex
] = 
rcD©aTmp
;

488 i‡(
ch™
<8 && 
rcSîülCou¡
 > 0) {

489 
rcSîülCou¡
 --;

490 #i‡
	`deföed
(
FAILSAFE
)

491 
Áûß„C¡
 = 0;

493 i‡(
rcSîül
[
ch™
] >900Ë{
rcD©a
[chan] =ÑcSerial[chan];}

497 
	}
}

506 #i‡
deföed
(
OPENLRSv2MULTI
)

526 
	#CARRIER_FREQUENCY
 435000

527 
	#FREQUENCY_HOPPING
 1

528 

	)

533 
uöt8_t
 
	gh›_li°
[3] = {13,54,23};

537 
uöt8_t
 
	gRF_Hódî
[4] = {'O','L','R','S'};

541 
uöt32_t
 
	gœ°_h›pög_time
;

542 
uöt8_t
 
	gRF_Rx_Buf„r
[17];

543 
uöt16_t
 
	gãmp_öt
;

544 
uöt16_t
 
	gSîvo_Buf„r
[10] = {3000,3000,3000,3000,3000,3000,3000,3000};

545 
uöt8_t
 
	gh›pög_ch™√l
 = 1;

560 
	gItSètus1
, 
	gItSètus2
;

563 
	$Wrôe0
( ) {

564 
SCK_off
;

565 
	`NOP
();

566 
SDI_off
;

567 
	`NOP
();

568 
SCK_⁄
;

569 
	`NOP
();

570 
	}
}

572 
	$Wrôe1
( ) {

573 
SCK_off
;

574 
	`NOP
();

575 
SDI_⁄
;

576 
	`NOP
();

577 
SCK_⁄
;

578 
	`NOP
();

579 
	}
}

581 
	$Wrôe8bôcomm™d
(
uöt8_t
 
comm™d
) {

582 
uöt8_t
 
n
=8;

583 
nSEL_⁄
;

584 
SCK_off
;

585 
nSEL_off
;

586 
n
--) {

587 if(
comm™d
&0x80)

588 
	`Wrôe1
();

590 
	`Wrôe0
();

591 
comm™d
 = command << 1;

593 
SCK_off
;

594 
	}
}

597 
	$£nd_ªad_addªss
(
uöt8_t
 
i
) {

598 
i
 &= 0x7f;

599 
	`Wrôe8bôcomm™d
(
i
);

600 
	}
}

603 
	$£nd_8bô_d©a
(
uöt8_t
 
i
) {

604 
uöt8_t
 
n
 = 8;

605 
SCK_off
;

606 
n
--) {

607 if(
i
&0x80)

608 
	`Wrôe1
();

610 
	`Wrôe0
();

611 
i
 = i << 1;

613 
SCK_off
;

614 
	}
}

617 
uöt8_t
 
	$ªad_8bô_d©a
() {

618 
uöt8_t
 
Resu…
, 
i
;

620 
SCK_off
;

621 
Resu…
=0;

622 
i
=0;i<8;i++) {

623 
Resu…
=Result<<1;

624 
SCK_⁄
;

625 
	`NOP
();

626 if(
SDO_1
) {

627 
Resu…
|=1;

629 
SCK_off
;

630 
	`NOP
();

632 (
Resu…
);

633 
	}
}

636 
uöt8_t
 
	$_•i_ªad
(
uöt8_t
 
addªss
) {

637 
uöt8_t
 
ªsu…
;

638 
	`£nd_ªad_addªss
(
addªss
);

639 
ªsu…
 = 
	`ªad_8bô_d©a
();

640 
nSEL_⁄
;

641 (
ªsu…
);

642 
	}
}

645 
	$_•i_wrôe
(
uöt8_t
 
addªss
, uöt8_à
d©a
) {

646 
addªss
 |= 0x80;

647 
	`Wrôe8bôcomm™d
(
addªss
);

648 
	`£nd_8bô_d©a
(
d©a
);

649 
nSEL_⁄
;

650 
	}
}

653 
	$RF22B_öô_∑ømëî
() {

654 
ItSètus1
 = 
	`_•i_ªad
(0x03);

655 
ItSètus2
 = 
	`_•i_ªad
(0x04);

656 
	`_•i_wrôe
(0x06, 0x00);

657 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

658 
	`_•i_wrôe
(0x09, 0x7f);

659 
	`_•i_wrôe
(0x0a, 0x05);

660 
	`_•i_wrôe
(0x0b, 0x12);

661 
	`_•i_wrôe
(0x0c, 0x15);

662 
	`_•i_wrôe
(0x0d, 0xfd);

663 
	`_•i_wrôe
(0x0e, 0x00);

664 
	`_•i_wrôe
(0x70, 0x00);

667 
	`_•i_wrôe
(0x1c, 0x05);

668 
	`_•i_wrôe
(0x20, 0x45);

669 
	`_•i_wrôe
(0x21, 0x01);

670 
	`_•i_wrôe
(0x22, 0xD7);

671 
	`_•i_wrôe
(0x23, 0xDC);

672 
	`_•i_wrôe
(0x24, 0x03);

673 
	`_•i_wrôe
(0x25, 0xB8);

674 
	`_•i_wrôe
(0x2a, 0x1e);

676 
	`_•i_wrôe
(0x6e, 0x0E);

677 
	`_•i_wrôe
(0x6f, 0xBF);

679 
	`_•i_wrôe
(0x30, 0x8c);

681 
	`_•i_wrôe
(0x32, 0xf3);

682 
	`_•i_wrôe
(0x33, 0x42);

683 
	`_•i_wrôe
(0x34, 0x07);

684 
	`_•i_wrôe
(0x36, 0x2d);

685 
	`_•i_wrôe
(0x37, 0xd4);

686 
	`_•i_wrôe
(0x38, 0x00);

687 
	`_•i_wrôe
(0x39, 0x00);

688 
	`_•i_wrôe
(0x3a, 
RF_Hódî
[0]);

689 
	`_•i_wrôe
(0x3b, 
RF_Hódî
[1]);

690 
	`_•i_wrôe
(0x3c, 
RF_Hódî
[2]);

691 
	`_•i_wrôe
(0x3d, 
RF_Hódî
[3]);

692 
	`_•i_wrôe
(0x3e, 17);

695 
	`_•i_wrôe
(0x3f, 
RF_Hódî
[0]);

696 
	`_•i_wrôe
(0x40, 
RF_Hódî
[1]);

697 
	`_•i_wrôe
(0x41, 
RF_Hódî
[2]);

698 
	`_•i_wrôe
(0x42, 
RF_Hódî
[3]);

699 
	`_•i_wrôe
(0x43, 0xff);

700 
	`_•i_wrôe
(0x44, 0xff);

701 
	`_•i_wrôe
(0x45, 0xff);

702 
	`_•i_wrôe
(0x46, 0xff);

704 
	`_•i_wrôe
(0x6d, 0x07);

705 
	`_•i_wrôe
(0x79, 0x00);

706 
	`_•i_wrôe
(0x7a, 0x06);

708 
	`_•i_wrôe
(0x71, 0x23);

710 
	`_•i_wrôe
(0x72, 0x2E);

711 
	`_•i_wrôe
(0x73, 0x00);

712 
	`_•i_wrôe
(0x74, 0x00);

715 
	`_•i_wrôe
(0x75, 0x53);

716 
	`_•i_wrôe
(0x76, 0x7D);

717 
	`_•i_wrôe
(0x77, 0x00);

718 
	}
}

721 
	$checkPŸs
() {

723 
pŸ_P
 = 
	`™ÆogRód
(7);

724 
pŸ_I
 = 
	`™ÆogRód
(6);

726 
pŸ_P
 =Öot_P - 512;

727 
pŸ_I
 =Öot_I - 512;

729 
pŸ_P
 =Öot_P / 25;

730 
pŸ_I
 =Öot_I / 25;

731 
	}
}

733 
	$öôO≥nLRS
() {

734 
	`pöMode
(
GREEN_LED_pö
, 
OUTPUT
);

735 
	`pöMode
(
RED_LED_pö
, 
OUTPUT
);

738 
	`pöMode
(
SDO_pö
, 
INPUT
);

739 
	`pöMode
(
SDI_pö
, 
OUTPUT
);

740 
	`pöMode
(
SCLK_pö
, 
OUTPUT
);

741 
	`pöMode
(
IRQ_pö
, 
INPUT
);

742 
	`pöMode
(
nSñ_pö
, 
OUTPUT
);

743 
	`checkPŸs
();

744 
	}
}

747 
	$rx_ª£t
() {

748 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

749 
	`_•i_wrôe
(0x7e, 36);

750 
	`_•i_wrôe
(0x08, 0x03);

751 
	`_•i_wrôe
(0x08, 0x00);

752 
	`_•i_wrôe
(0x07,
RF22B_PWRSTATE_RX
 );

753 
	`_•i_wrôe
(0x05, 
RF22B_Rx_∑ckë_ª˚ived_öãºu±
);

754 
ItSètus1
 = 
	`_•i_ªad
(0x03);

755 
ItSètus2
 = 
	`_•i_ªad
(0x04);

756 
	}
}

760 
	$to_ªady_mode
() {

761 
ItSètus1
 = 
	`_•i_ªad
(0x03);

762 
ItSètus2
 = 
	`_•i_ªad
(0x04);

763 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

764 
	}
}

766 
	$to_rx_mode
() {

767 
	`to_ªady_mode
();

768 
	`dñay
(50);

769 
	`rx_ª£t
();

770 
	`NOP
();

771 
	}
}

774 
	$to_¶ìp_mode
() {

777 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

779 
ItSètus1
 = 
	`_•i_ªad
(0x03);

780 
ItSètus2
 = 
	`_•i_ªad
(0x04);

781 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_POWERDOWN
);

782 
	}
}

785 
	$‰equícy_c⁄figuøt‹
(
uöt32_t
 
‰equícy
) {

788 
‰equícy
 = frequency / 10;

789 
‰equícy
 = frequency - 24000;

790 
‰equícy
 = frequency - 19000;

791 
‰equícy
 = frequency * 64;

793 
uöt8_t
 
byã0
 = (uöt8_tË
‰equícy
;

794 
uöt8_t
 
byã1
 = (uöt8_tË(
‰equícy
 >> 8);

796 
	`_•i_wrôe
(0x76, 
byã1
);

797 
	`_•i_wrôe
(0x77, 
byã0
);

798 
	}
}

801 #i‡(
FREQUENCY_HOPPING
==1)

802 
	$H›pög
() {

803 
h›pög_ch™√l
++;

804 i‡(
h›pög_ch™√l
>2) hopping_channel = 0;

805 
	`_•i_wrôe
(0x79, 
h›_li°
[
h›pög_ch™√l
]);

806 
	}
}

809 
	$C⁄fig_O≥nLRS
() {

810 
	`RF22B_öô_∑ømëî
();

811 
	`‰equícy_c⁄figuøt‹
(
CARRIER_FREQUENCY
);

812 
	`to_rx_mode
();

813 #i‡(
FREQUENCY_HOPPING
==1)

814 
	`H›pög
();

816 
	}
}

819 
	$Ród_O≥nLRS_RC
() {

820 
uöt8_t
 
i
,
tx_d©a_Àngth
;

821 
uöt8_t
 
fú°_d©a
 = 0;

823 i‡(
	`_•i_ªad
(0x0C)==0Ë{
	`RF22B_öô_∑ømëî
(); 
	`to_rx_mode
(); }

824 i‡((
cuºítTime
-
œ°_h›pög_time
 > 25000)) {

825 
Red_LED_ON
;

826 
œ°_h›pög_time
 = 
cuºítTime
;

827 #i‡(
FREQUENCY_HOPPING
==1)

828 
	`H›pög
();

831 if(
nIRQ_0
) {

832 
Red_LED_ON
;

833 
	`£nd_ªad_addªss
(0x7f);

834 
i
 = 0; i<17; i++) {

835 
RF_Rx_Buf„r
[
i
] = 
	`ªad_8bô_d©a
();

837 
	`rx_ª£t
();

838 i‡(
RF_Rx_Buf„r
[0] == 'S') {

839 
i
 = 0; i<8; i++) {

840 
ãmp_öt
 = (256*
RF_Rx_Buf„r
[1+(2*
i
)]) + RF_Rx_Buffer[2+(2*i)];

841 i‡((
ãmp_öt
>1500Ë&& (ãmp_öt<4500)Ë
Sîvo_Buf„r
[
i
] =Åemp_int/2;

843 
rcD©a
[
ROLL
] = 
Sîvo_Buf„r
[0];

844 
rcD©a
[
PITCH
] = 
Sîvo_Buf„r
[1];

845 
rcD©a
[
THROTTLE
] = 
Sîvo_Buf„r
[2];

846 
rcD©a
[
YAW
] = 
Sîvo_Buf„r
[3];

847 
rcD©a
[
AUX1
] = 
Sîvo_Buf„r
[4];

848 
rcD©a
[
AUX2
] = 
Sîvo_Buf„r
[5];

849 
rcD©a
[
AUX3
] = 
Sîvo_Buf„r
[6];

850 
rcD©a
[
AUX4
] = 
Sîvo_Buf„r
[7];

852 #i‡(
FREQUENCY_HOPPING
==1)

853 
	`H›pög
();

855 
	`dñay
(1);

856 
œ°_h›pög_time
 = 
cuºítTime
;

857 
Red_LED_OFF
;

859 
Red_LED_OFF
;

860 
	}
}

864 #i‡
deföed
(
SPEK_BIND
)

865 
	$•ekBöd
() {

866 
	`pöMode
(
SPEK_BIND_DATA
, 
INPUT
);

867 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
LOW
);

869 
	`pöMode
(
SPEK_BIND_GROUND
, 
INPUT
);

870 
	`digôÆWrôe
(
SPEK_BIND_GROUND
,
LOW
);

871 
	`pöMode
(
SPEK_BIND_GROUND
, 
OUTPUT
);

872 
	`digôÆWrôe
(
SPEK_BIND_GROUND
,
LOW
);

874 
	`pöMode
(
SPEK_BIND_POWER
, 
INPUT
);

875 
	`digôÆWrôe
(
SPEK_BIND_POWER
,
LOW
);

876 
	`pöMode
(
SPEK_BIND_POWER
,
OUTPUT
);

879 
	`blökLED
(4,255,1);

880 
	`digôÆWrôe
(
SPEK_BIND_POWER
,
LOW
);

881 
	`pöMode
(
SPEK_BIND_DATA
, 
OUTPUT
);

882 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
LOW
);

883 
	`dñay
(1000);

884 
	`blökLED
(4,255,1);

886 
	`digôÆWrôe
(
SPEK_BIND_POWER
,
HIGH
);

887 
	`dñay
(10);

888 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
HIGH
);

889 
	`dñay
(60);

891 
	`noI¡îru±s
();

892 
byã
 
i
 = 0; i < 
SPEK_BIND_PULSES
; i++) {

893 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
LOW
);

894 
	`dñayMi¸o£c⁄ds
(118);

895 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
HIGH
);

896 
	`dñayMi¸o£c⁄ds
(122);

898 
	`öãºu±s
();

899 
	`dñay
(60000);

901 
	}
}

	@RX.h

1 #i‚de‡
RX_H_


2 
	#RX_H_


	)

4 
c⁄figuªRe˚ivî
();

5 
compuãRC
();

6 
uöt16_t
 
ªadRawRC
(
uöt8_t
 
ch™
);

7 
ªadSîül_RX
();

8 #i‡
deföed
(
OPENLRSv2MULTI
)

9 
öôO≥nLRS
();

10 
Ród_O≥nLRS_RC
();

12 #i‡
deföed
(
SPEK_BIND
)

13 
•ekBöd
();

	@Sensors.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"Aœrms.h
"

7 
	~"EEPROM.h
"

8 
	~"IMU.h
"

9 
	~"LCD.h
"

10 
	~"Sís‹s.h
"

12 
Devi˚_Mag_gëADC
();

13 
B¨o_öô
();

14 
Mag_öô
();

15 
ACC_öô
();

21 #i‡!
deföed
(
ACC_ORIENTATION
)

22 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

24 #i‡!
deföed
(
GYRO_ORIENTATION
)

25 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = Z;}

	)

27 #i‡!
deföed
(
MAG_ORIENTATION
)

28 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

33 #i‡
deföed
(
GYRO_LPF_256HZ
Ë|| deföed(
GYRO_LPF_188HZ
Ë|| deföed(
GYRO_LPF_98HZ
Ë|| deföed(
GYRO_LPF_42HZ
Ë|| deföed(
GYRO_LPF_20HZ
Ë|| deföed(
GYRO_LPF_10HZ
Ë|| deföed(
GYRO_LPF_5HZ
)

34 #i‡
deföed
(
GYRO_LPF_256HZ
)

35 
	#GYRO_DLPF_CFG
 0

	)

37 #i‡
deföed
(
GYRO_LPF_188HZ
)

38 
	#GYRO_DLPF_CFG
 1

	)

40 #i‡
deföed
(
GYRO_LPF_98HZ
)

41 
	#GYRO_DLPF_CFG
 2

	)

43 #i‡
deföed
(
GYRO_LPF_42HZ
)

44 
	#GYRO_DLPF_CFG
 3

	)

46 #i‡
deföed
(
GYRO_LPF_20HZ
)

47 
	#GYRO_DLPF_CFG
 4

	)

49 #i‡
deföed
(
GYRO_LPF_10HZ
)

50 
	#GYRO_DLPF_CFG
 5

	)

52 #i‡
deföed
(
GYRO_LPF_5HZ
)

53 
	#GYRO_DLPF_CFG
 6

	)

56 
	#GYRO_DLPF_CFG
 0

58 

	)

59 
uöt8_t
 
	gøwADC
[6];

60 #i‡
deföed
(
WMP
)

61 
uöt32_t
 
	g√uåÆizeTime
 = 0;

68 
	$i2c_öô
() {

69 #i‡
	`deföed
(
INTERNAL_I2C_PULLUPS
)

70 
I2C_PULLUPS_ENABLE


72 
I2C_PULLUPS_DISABLE


74 
TWSR
 = 0;

75 
TWBR
 = ((
F_CPU
 / 400000) - 16) / 2;

76 
TWCR
 = 1<<
TWEN
;

77 
i2c_îr‹s_cou¡
 = 0;

78 
	}
}

80 
__©åibuã__
 ((
noölöe
)Ë
	$waôTønsmissi⁄I2C
(
uöt8_t
 
tw¸
) {

81 
TWCR
 = 
tw¸
;

82 
uöt8_t
 
cou¡
 = 255;

83 !(
TWCR
 & (1<<
TWINT
))) {

84 
cou¡
--;

85 i‡(
cou¡
==0) {

86 
TWCR
 = 0;

87 #i‡
	`deföed
(
WMP
)

88 
√uåÆizeTime
 = 
	`mi¸os
();

90 
i2c_îr‹s_cou¡
++;

94 
	}
}

96 
	$i2c_ªp_°¨t
(
uöt8_t
 
addªss
) {

97 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWSTA
Ë| (1<<
TWEN
));

98 
TWDR
 = 
addªss
;

99 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
));

100 
	}
}

102 
	$i2c_°›
() {

103 
TWCR
 = (1 << 
TWINT
Ë| (1 << 
TWEN
Ë| (1 << 
TWSTO
);

105 
	}
}

107 
	$i2c_wrôe
(
uöt8_t
 
d©a
 ) {

108 
TWDR
 = 
d©a
;

109 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
));

110 
	}
}

112 
uöt8_t
 
	$i2c_ªadAck
() {

113 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
Ë| (1<<
TWEA
));

114  
TWDR
;

115 
	}
}

117 
uöt8_t
 
	$i2c_ªadNak
() {

118 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
));

119 
uöt8_t
 
r
 = 
TWDR
;

120 
	`i2c_°›
();

121  
r
;

122 
	}
}

124 
	$i2c_ªad_ªg_to_buf
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à*
buf
, uöt8_à
size
) {

125 
	`i2c_ªp_°¨t
(
add
<<1);

126 
	`i2c_wrôe
(
ªg
);

127 
	`i2c_ªp_°¨t
((
add
<<1) | 1);

128 
uöt8_t
 *
b
 = 
buf
;

129 --
size
Ë*
b
++ = 
	`i2c_ªadAck
();

130 *
b
 = 
	`i2c_ªadNak
();

131 
	}
}

133 
	$i2c_gëSixRawADC
(
uöt8_t
 
add
, uöt8_à
ªg
) {

134 
	`i2c_ªad_ªg_to_buf
(
add
, 
ªg
, 
øwADC
, 6);

135 
	}
}

137 
	$i2c_wrôeReg
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à
vÆ
) {

138 
	`i2c_ªp_°¨t
(
add
<<1);

139 
	`i2c_wrôe
(
ªg
);

140 
	`i2c_wrôe
(
vÆ
);

141 
	`i2c_°›
();

142 
	}
}

144 
uöt8_t
 
	$i2c_ªadReg
(
uöt8_t
 
add
, uöt8_à
ªg
) {

145 
uöt8_t
 
vÆ
;

146 
	`i2c_ªad_ªg_to_buf
(
add
, 
ªg
, &
vÆ
, 1);

147  
vÆ
;

148 
	}
}

153 
	$GYRO_Comm⁄
() {

154 
öt16_t
 
¥eviousGyroADC
[3] = {0,0,0};

155 
öt32_t
 
g
[3];

156 
uöt8_t
 
axis
, 
tût
=0;

158 #i‡
deföed
 
MMGYRO


161 
öt16_t
 
medüMobûeGyroADC
[3][
MMGYROVECTORLENGTH
];

162 
öt32_t
 
medüMobûeGyroADCSum
[3];

163 
uöt8_t
 
medüMobûeGyroIDX
;

167 i‡(
ˇlibøtögG
>0) {

168 
axis
 = 0;áxis < 3;áxis++) {

169 i‡(
ˇlibøtögG
 == 512) {

170 
g
[
axis
]=0;

171 #i‡
	`deföed
(
GYROCALIBRATIONFAILSAFE
)

172 
¥eviousGyroADC
[
axis
] = 
imu
.
gyroADC
[axis];

174 i‡(
ˇlibøtögG
 % 10 == 0) {

175 if(
	`abs
(
imu
.
gyroADC
[
axis
] - 
¥eviousGyroADC
[axis]Ë> 8Ë
tût
=1;

176 
¥eviousGyroADC
[
axis
] = 
imu
.
gyroADC
[axis];

179 
g
[
axis
] +=
imu
.
gyroADC
[axis];

180 
gyroZîo
[
axis
]=
g
[axis]>>9;

181 i‡(
ˇlibøtögG
 == 1) {

182 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

185 #i‡
	`deföed
(
GYROCALIBRATIONFAILSAFE
)

186 if(
tût
) {

187 
ˇlibøtögG
=1000;

188 
LEDPIN_ON
;

190 
ˇlibøtögG
--;

191 
LEDPIN_OFF
;

195 
ˇlibøtögG
--;

199 #ifde‡
MMGYRO


200 
medüMobûeGyroIDX
 = ++medüMobûeGyroIDX % 
c⁄f
.
mmgyro
;

201 
axis
 = 0;áxis < 3;áxis++) {

202 
imu
.
gyroADC
[
axis
] -
gyroZîo
[axis];

203 
medüMobûeGyroADCSum
[
axis
] -
medüMobûeGyroADC
[axis][
medüMobûeGyroIDX
];

205 
medüMobûeGyroADC
[
axis
][
medüMobûeGyroIDX
] = 
	`c⁄°øö
(
imu
.
gyroADC
[axis],
¥eviousGyroADC
[axis]-800,previousGyroADC[axis]+800);

206 
medüMobûeGyroADCSum
[
axis
] +
medüMobûeGyroADC
[axis][
medüMobûeGyroIDX
];

207 
imu
.
gyroADC
[
axis
] = 
medüMobûeGyroADCSum
[axis] / 
c⁄f
.
mmgyro
;

209 
axis
 = 0;áxis < 3;áxis++) {

210 
imu
.
gyroADC
[
axis
] -
gyroZîo
[axis];

212 
imu
.
gyroADC
[
axis
] = 
	`c⁄°øö
(imu.gyroADC[axis],
¥eviousGyroADC
[axis]-800,previousGyroADC[axis]+800);

214 
¥eviousGyroADC
[
axis
] = 
imu
.
gyroADC
[axis];

217 #i‡
	`deföed
(
SENSORS_TILT_45DEG_LEFT
)

218 
öt16_t
 
ãmp
 = ((
imu
.
gyroADC
[
PITCH
] - imu.gyroADC[
ROLL
] )*7)/10;

219 
imu
.
gyroADC
[
ROLL
] = ((imu.gyroADC[ROLL] + imu.gyroADC[
PITCH
])*7)/10;

220 
imu
.
gyroADC
[
PITCH
]
ãmp
;

222 #i‡
	`deföed
(
SENSORS_TILT_45DEG_RIGHT
)

223 
öt16_t
 
ãmp
 = ((
imu
.
gyroADC
[
PITCH
] + imu.gyroADC[
ROLL
] )*7)/10;

224 
imu
.
gyroADC
[
ROLL
] = ((imu.gyroADC[ROLL] - imu.gyroADC[
PITCH
])*7)/10;

225 
imu
.
gyroADC
[
PITCH
]
ãmp
;

227 
	}
}

232 
	$ACC_Comm⁄
() {

233 
öt32_t
 
a
[3];

234 i‡(
ˇlibøtögA
>0) {

235 
ˇlibøtögA
--;

236 
uöt8_t
 
axis
 = 0;áxis < 3;áxis++) {

237 i‡(
ˇlibøtögA
 =511Ë
a
[
axis
]=0;

238 
a
[
axis
] +=
imu
.
accADC
[axis];

239 
globÆ_c⁄f
.
accZîo
[
axis
] = 
a
[axis]>>9;

241 i‡(
ˇlibøtögA
 == 0) {

242 
globÆ_c⁄f
.
accZîo
[
YAW
] -
ACC_1G
;

243 
c⁄f
.
™gÀTrim
[
ROLL
] = 0;

244 
c⁄f
.
™gÀTrim
[
PITCH
] = 0;

245 
	`wrôeGlobÆSë
(1);

248 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

249 
öt32_t
 
b
[3];

250 
öt16_t
 
accZîo_ßved
[3] = {0,0,0};

251 
öt16_t
 
™gÀTrim_ßved
[2] = {0, 0};

253 i‡(
InÊightˇlibøtögA
==50) {

254 
accZîo_ßved
[
ROLL
] = 
globÆ_c⁄f
.
accZîo
[ROLL] ;

255 
accZîo_ßved
[
PITCH
] = 
globÆ_c⁄f
.
accZîo
[PITCH];

256 
accZîo_ßved
[
YAW
] = 
globÆ_c⁄f
.
accZîo
[YAW] ;

257 
™gÀTrim_ßved
[
ROLL
] = 
c⁄f
.
™gÀTrim
[ROLL] ;

258 
™gÀTrim_ßved
[
PITCH
] = 
c⁄f
.
™gÀTrim
[PITCH] ;

260 i‡(
InÊightˇlibøtögA
>0) {

261 
uöt8_t
 
axis
 = 0;áxis < 3;áxis++) {

263 i‡(
InÊightˇlibøtögA
 =50Ë
b
[
axis
]=0;

265 
b
[
axis
] +=
imu
.
accADC
[axis];

267 
imu
.
accADC
[
axis
]=0;

268 
globÆ_c⁄f
.
accZîo
[
axis
]=0;

271 i‡(
InÊightˇlibøtögA
 == 1) {

272 
AccInÊightCÆibøti⁄A˘ive
 = 0;

273 
AccInÊightCÆibøti⁄MósuªmítD⁄e
 = 1;

274 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

276 
globÆ_c⁄f
.
accZîo
[
ROLL
] = 
accZîo_ßved
[ROLL] ;

277 
globÆ_c⁄f
.
accZîo
[
PITCH
] = 
accZîo_ßved
[PITCH];

278 
globÆ_c⁄f
.
accZîo
[
YAW
] = 
accZîo_ßved
[YAW] ;

279 
c⁄f
.
™gÀTrim
[
ROLL
] = 
™gÀTrim_ßved
[ROLL] ;

280 
c⁄f
.
™gÀTrim
[
PITCH
] = 
™gÀTrim_ßved
[PITCH] ;

282 
InÊightˇlibøtögA
--;

285 i‡(
AccInÊightCÆibøti⁄SavëoEEProm
 == 1){

286 
AccInÊightCÆibøti⁄SavëoEEProm
 = 0;

287 
globÆ_c⁄f
.
accZîo
[
ROLL
] = 
b
[ROLL]/50;

288 
globÆ_c⁄f
.
accZîo
[
PITCH
] = 
b
[PITCH]/50;

289 
globÆ_c⁄f
.
accZîo
[
YAW
] = 
b
[YAW]/50-
ACC_1G
;

290 
c⁄f
.
™gÀTrim
[
ROLL
] = 0;

291 
c⁄f
.
™gÀTrim
[
PITCH
] = 0;

292 
	`wrôeGlobÆSë
(1);

295 
imu
.
accADC
[
ROLL
] -
globÆ_c⁄f
.
accZîo
[ROLL] ;

296 
imu
.
accADC
[
PITCH
] -
globÆ_c⁄f
.
accZîo
[PITCH];

297 
imu
.
accADC
[
YAW
] -
globÆ_c⁄f
.
accZîo
[YAW] ;

299 #i‡
	`deföed
(
SENSORS_TILT_45DEG_LEFT
)

300 
öt16_t
 
ãmp
 = ((
imu
.
accADC
[
PITCH
] - imu.accADC[
ROLL
] )*7)/10;

301 
imu
.
accADC
[
ROLL
] = ((imu.accADC[ROLL] + imu.accADC[
PITCH
])*7)/10;

302 
imu
.
accADC
[
PITCH
] = 
ãmp
;

304 #i‡
	`deföed
(
SENSORS_TILT_45DEG_RIGHT
)

305 
öt16_t
 
ãmp
 = ((
imu
.
accADC
[
PITCH
] + imu.accADC[
ROLL
] )*7)/10;

306 
imu
.
accADC
[
ROLL
] = ((imu.accADC[ROLL] - imu.accADC[
PITCH
])*7)/10;

307 
imu
.
accADC
[
PITCH
] = 
ãmp
;

309 
	}
}

314 #i‡
BARO


315 
	$B¨o_Comm⁄
() {

316 
öt32_t
 
b¨oHi°Tab
[
BARO_TAB_SIZE
];

317 
uöt8_t
 
b¨oHi°Idx
;

319 
uöt8_t
 
ödex∂us1
 = (
b¨oHi°Idx
 + 1);

320 i‡(
ödex∂us1
 =
BARO_TAB_SIZE
) indexplus1 = 0;

321 
b¨oHi°Tab
[
b¨oHi°Idx
] = 
b¨oPªssuª
;

322 
b¨oPªssuªSum
 +
b¨oHi°Tab
[
b¨oHi°Idx
];

323 
b¨oPªssuªSum
 -
b¨oHi°Tab
[
ödex∂us1
];

324 
b¨oHi°Idx
 = 
ödex∂us1
;

325 
	}
}

340 #i‡
deföed
(
BMP085
)

341 
	#BMP085_ADDRESS
 0x77

	)

345 
öt16_t
 
	mac1
, 
	mac2
, 
	mac3
;

346 
uöt16_t
 
	mac4
, 
	mac5
, 
	mac6
;

347 
öt16_t
 
	mb1
, 
	mb2
, 
	mmb
, 
	mmc
, 
	mmd
;

348 uni⁄ {
uöt16_t
 
	mvÆ
; 
uöt8_t
 
	møw
[2]; } 
	mut
;

349 uni⁄ {
uöt32_t
 
	mvÆ
; 
uöt8_t
 
	møw
[4]; } 
	mup
;

350 
uöt8_t
 
	m°©e
;

351 
uöt32_t
 
	mdódlöe
;

352 } 
	gbmp085_˘x
;

353 
	#OSS
 3

	)

357 
	$sw≠_ídü¬ess
(*
buf
, 
size_t
 
size
) {

361 
uöt8_t
 
åay
;

362 
uöt8_t
 *
‰om
;

363 
uöt8_t
 *
to
;

365 
‰om
 = (
uöt8_t
*)
buf
, 
to
 = &‰om[
size
-1]; from <Åo; from++,Åo--) {

366 
åay
 = *
‰om
;

367 *
‰om
 = *
to
;

368 *
to
 = 
åay
;

370 
	}
}

372 
	$i2c_BMP085_ªadCÆibøti⁄
(){

373 
	`dñay
(10);

375 
size_t
 
s_byãs
 = (
uöt8_t
*)&
bmp085_˘x
.
md
 - (uöt8_t*)&bmp085_˘x.
ac1
 + (bmp085_ctx.ac1);

376 
	`i2c_ªad_ªg_to_buf
(
BMP085_ADDRESS
, 0xAA, (
uöt8_t
*)&
bmp085_˘x
.
ac1
, 
s_byãs
);

378 
öt16_t
 *
p
;

379 
p
 = &
bmp085_˘x
.
ac1
;Ö <&bmp085_˘x.
md
;Ö++) {

380 
	`sw≠_ídü¬ess
(
p
, (*p));

382 
	}
}

385 
	$i2c_BMP085_UT_Sèπ
() {

386 
	`i2c_wrôeReg
(
BMP085_ADDRESS
,0xf4,0x2e);

387 
	`i2c_ªp_°¨t
(
BMP085_ADDRESS
<<1);

388 
	`i2c_wrôe
(0xF6);

389 
	`i2c_°›
();

390 
	}
}

393 
	$i2c_BMP085_UP_Sèπ
 () {

394 
	`i2c_wrôeReg
(
BMP085_ADDRESS
,0xf4,0x34+(
OSS
<<6));

395 
	`i2c_ªp_°¨t
(
BMP085_ADDRESS
<<1);

396 
	`i2c_wrôe
(0xF6);

397 
	`i2c_°›
();

398 
	}
}

402 
	$i2c_BMP085_UP_Ród
 () {

403 
	`i2c_ªp_°¨t
((
BMP085_ADDRESS
<<1) | 1);

404 
bmp085_˘x
.
up
.
øw
[2] = 
	`i2c_ªadAck
();

405 
bmp085_˘x
.
up
.
øw
[1] = 
	`i2c_ªadAck
();

406 
bmp085_˘x
.
up
.
øw
[0] = 
	`i2c_ªadNak
();

407 
	}
}

411 
	$i2c_BMP085_UT_Ród
() {

412 
	`i2c_ªp_°¨t
((
BMP085_ADDRESS
<<1) | 1);

413 
bmp085_˘x
.
ut
.
øw
[1] = 
	`i2c_ªadAck
();

414 
bmp085_˘x
.
ut
.
øw
[0] = 
	`i2c_ªadNak
();

415 
	}
}

417 
	$i2c_BMP085_CÆcuœã
() {

418 
öt32_t
 
x1
, 
x2
, 
x3
, 
b3
, 
b5
, 
b6
, 
p
, 
tmp
;

419 
uöt32_t
 
b4
, 
b7
;

421 
x1
 = ((
öt32_t
)
bmp085_˘x
.
ut
.
vÆ
 - bmp085_˘x.
ac6
Ë* bmp085_˘x.
ac5
 >> 15;

422 
x2
 = ((
öt32_t
)
bmp085_˘x
.
mc
 << 11Ë/ (
x1
 + bmp085_˘x.
md
);

423 
b5
 = 
x1
 + 
x2
;

424 
b¨oTem≥øtuª
 = (
b5
 * 10 + 8) >> 4;

426 
b6
 = 
b5
 - 4000;

427 
x1
 = (
bmp085_˘x
.
b2
 * (
b6
 * b6 >> 12)) >> 11;

428 
x2
 = 
bmp085_˘x
.
ac2
 * 
b6
 >> 11;

429 
x3
 = 
x1
 + 
x2
;

430 
tmp
 = 
bmp085_˘x
.
ac1
;

431 
tmp
 = (tmp*4 + 
x3
Ë<< 
OSS
;

432 
b3
 = (
tmp
+2)/4;

433 
x1
 = 
bmp085_˘x
.
ac3
 * 
b6
 >> 13;

434 
x2
 = (
bmp085_˘x
.
b1
 * (
b6
 * b6 >> 12)) >> 16;

435 
x3
 = ((
x1
 + 
x2
) + 2) >> 2;

436 
b4
 = (
bmp085_˘x
.
ac4
 * (
uöt32_t
)(
x3
 + 32768)) >> 15;

437 
b7
 = ((
uöt32_t
Ë(
bmp085_˘x
.
up
.
vÆ
 >> (8-
OSS
)Ë- 
b3
) * (50000 >> OSS);

438 
p
 = 
b7
 < 0x80000000 ? (b7 * 2Ë/ 
b4
 : (b7 / b4) * 2;

439 
x1
 = (
p
 >> 8) * (p >> 8);

440 
x1
 = (x1 * 3038) >> 16;

441 
x2
 = (-7357 * 
p
) >> 16;

442 
b¨oPªssuª
 = 
p
 + ((
x1
 + 
x2
 + 3791) >> 4);

443 
	}
}

445 
	$B¨o_öô
() {

446 
	`dñay
(10);

447 
	`i2c_BMP085_ªadCÆibøti⁄
();

448 
	`dñay
(5);

449 
	`i2c_BMP085_UT_Sèπ
();

450 
bmp085_˘x
.
dódlöe
 = 
cuºítTime
+5000;

451 
	}
}

454 
uöt8_t
 
	$B¨o_upd©e
() {

455 i‡(
cuºítTime
 < 
bmp085_˘x
.
dódlöe
)  0;

456 
bmp085_˘x
.
dódlöe
 = 
cuºítTime
+6000;

457 i‡(
bmp085_˘x
.
°©e
 == 0) {

458 
	`i2c_BMP085_UT_Ród
();

459 
	`i2c_BMP085_UP_Sèπ
();

460 
bmp085_˘x
.
°©e
 = 1;

461 
	`B¨o_Comm⁄
();

462 
bmp085_˘x
.
dódlöe
 += 21000;

465 
	`i2c_BMP085_UP_Ród
();

466 
	`i2c_BMP085_UT_Sèπ
();

467 
	`i2c_BMP085_CÆcuœã
();

468 
bmp085_˘x
.
°©e
 = 0;

471 
	}
}

474 #i‡
deföed
(
BMP280
)

475 
	#BMP280_I2C_ADDR
 (0x76)

	)

476 
	#BMP280_DEFAULT_CHIP_ID
 (0x58)

	)

478 
	#BMP280_CHIP_ID_REG
 (0xD0Ë

	)

479 
	#BMP280_RST_REG
 (0xE0Ë

	)

480 
	#BMP280_STAT_REG
 (0xF3Ë

	)

481 
	#BMP280_CTRL_MEAS_REG
 (0xF4Ë

	)

482 
	#BMP280_CONFIG_REG
 (0xF5Ë

	)

483 
	#BMP280_PRESSURE_MSB_REG
 (0xF7Ë

	)

484 
	#BMP280_PRESSURE_LSB_REG
 (0xF8Ë

	)

485 
	#BMP280_PRESSURE_XLSB_REG
 (0xF9Ë

	)

486 
	#BMP280_TEMPERATURE_MSB_REG
 (0xFAË

	)

487 
	#BMP280_TEMPERATURE_LSB_REG
 (0xFBË

	)

488 
	#BMP280_TEMPERATURE_XLSB_REG
 (0xFCË

	)

489 
	#BMP280_FORCED_MODE
 (0x01)

	)

491 
	#BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG
 (0x88)

	)

492 
	#BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH
 (24)

	)

493 
	#BMP280_DATA_FRAME_SIZE
 (6)

	)

495 
	#BMP280_OVERSAMP_SKIPPED
 (0x00)

	)

496 
	#BMP280_OVERSAMP_1X
 (0x01)

	)

497 
	#BMP280_OVERSAMP_2X
 (0x02)

	)

498 
	#BMP280_OVERSAMP_4X
 (0x03)

	)

499 
	#BMP280_OVERSAMP_8X
 (0x04)

	)

500 
	#BMP280_OVERSAMP_16X
 (0x05)

	)

503 
	#BMP280_PRESSURE_OSR
 (
BMP280_OVERSAMP_8X
)

	)

504 
	#BMP280_TEMPERATURE_OSR
 (
BMP280_OVERSAMP_1X
)

	)

505 
	#BMP280_MODE
 (
BMP280_PRESSURE_OSR
 << 2 | 
BMP280_TEMPERATURE_OSR
 << 5 | 
BMP280_FORCED_MODE
)

	)

507 
	#T_INIT_MAX
 (20)

	)

509 
	#T_MEASURE_PER_OSRS_MAX
 (37)

	)

511 
	#T_SETUP_PRESSURE_MAX
 (10)

	)

515 
uöt8_t
 
	m°©e
;

516 
uöt16_t
 
	mut_dñay
;

517 
uöt16_t
 
	mup_dñay
;

518 
uöt32_t
 
	mdódlöe
;

519 } 
	gbmp280_˘x
;

522 
	sbmp280_ˇlib_∑øm_t
 {

523 
uöt16_t
 
	mdig_T1
;

524 
öt16_t
 
	mdig_T2
;

525 
öt16_t
 
	mdig_T3
;

526 
uöt16_t
 
	mdig_P1
;

527 
öt16_t
 
	mdig_P2
;

528 
öt16_t
 
	mdig_P3
;

529 
öt16_t
 
	mdig_P4
;

530 
öt16_t
 
	mdig_P5
;

531 
öt16_t
 
	mdig_P6
;

532 
öt16_t
 
	mdig_P7
;

533 
öt16_t
 
	mdig_P8
;

534 
öt16_t
 
	mdig_P9
;

535 
öt32_t
 
	mt_föe
;

536 } 
	tbmp280_ˇlib_∑øm_t
;

538 
uöt8_t
 
	gbmp280_chù_id
 = 0;

539 
boﬁ
 
	gbmp280InôD⁄e
 = 
Ál£
;

540 
bmp280_ˇlib_∑øm_t
 
	gbmp280_ˇl
;

542 
öt32_t
 
	gbmp280_up
 = 0;

543 
öt32_t
 
	gbmp280_ut
 = 0;

545 
bmp280_°¨t_ut
();

546 
bmp280_gë_ut
();

547 
bmp280_°¨t_up
();

548 
bmp280_gë_up
();

549 
bmp280_ˇlcuœã
(
öt32_t
 *
¥essuª
, i¡32_à*
ãm≥øtuª
);

551 
boﬁ
 
	$bmp280Dëe˘
()

553 i‡(
bmp280InôD⁄e
)

554  
åue
;

556 
	`dñay
(20);

558 
	`i2c_ªad_ªg_to_buf
(
BMP280_I2C_ADDR
, 
BMP280_CHIP_ID_REG
, &
bmp280_chù_id
,1);

559 i‡(
bmp280_chù_id
 !
BMP280_DEFAULT_CHIP_ID
)

560  
Ál£
;

563 
	`i2c_ªad_ªg_to_buf
(
BMP280_I2C_ADDR
, 
BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG
, (
uöt8_t
 *)&
bmp280_ˇl
, 24);

565 
	`i2c_wrôeReg
(
BMP280_I2C_ADDR
, 
BMP280_CTRL_MEAS_REG
, 
BMP280_MODE
);

567 
bmp280InôD⁄e
 = 
åue
;

570 
bmp280_˘x
.
ut_dñay
 = 0;

573 
bmp280_˘x
.
up_dñay
 = 10000;

576  
åue
;

577 
	}
}

579 
	$bmp280_°¨t_ut
()

582 
	}
}

584 
	$bmp280_gë_ut
()

587 
	}
}

589 
	$bmp280_°¨t_up
()

593 
	`i2c_wrôeReg
(
BMP280_I2C_ADDR
, 
BMP280_CTRL_MEAS_REG
, 
BMP280_MODE
);

594 
	}
}

596 
	$bmp280_gë_up
()

598 
uöt8_t
 
d©a
[
BMP280_DATA_FRAME_SIZE
];

601 
	`i2c_ªad_ªg_to_buf
(
BMP280_I2C_ADDR
, 
BMP280_PRESSURE_MSB_REG
, 
BMP280_DATA_FRAME_SIZE
, 
d©a
);

602 
bmp280_up
 = (
öt32_t
)((((
uöt32_t
)(
d©a
[0])) << 12) | (((uint32_t)(data[1])) << 4) | ((uint32_t)data[2] >> 4));

603 
bmp280_ut
 = (
öt32_t
)((((
uöt32_t
)(
d©a
[3])) << 12) | (((uint32_t)(data[4])) << 4) | ((uint32_t)data[5] >> 4));

604 
	}
}

608 
	$bmp280_com≥nßã_T
(
öt32_t
 
adc_T
)

610 
v¨1
, 
v¨2
, 
T
;

612 
v¨1
 = ((()
adc_T
Ë/ 16384.0‡- (()
bmp280_ˇl
.
dig_T1
Ë/ 1024.0fË* (()bmp280_ˇl.
dig_T2
);

613 
v¨2
 = (((()
adc_T
Ë/ 131072.0‡- (()
bmp280_ˇl
.
dig_T1
Ë/ 8192.0fË* (((Ôdc_TË/ 131072.0‡- (()bmp280_ˇl.dig_T1Ë/ 8192.0f)Ë* (()bmp280_ˇl.
dig_T3
);

614 
bmp280_ˇl
.
t_föe
 = (
öt32_t
)(
v¨1
 + 
v¨2
);

615 
T
 = (
v¨1
 + 
v¨2
) / 5120.0f;

617  
T
;

618 
	}
}

621 
	$bmp280_com≥nßã_P
(
öt32_t
 
adc_P
)

623 
v¨1
, 
v¨2
, 
p
;

624 
v¨1
 = (()
bmp280_ˇl
.
t_föe
 / 2.0f) - 64000.0f;

625 
v¨2
 = 
v¨1
 * v¨1 * (()
bmp280_ˇl
.
dig_P6
) / 32768.0f;

626 
v¨2
 = v¨2 + 
v¨1
 * (()
bmp280_ˇl
.
dig_P5
) * 2.0f;

627 
v¨2
 = (v¨2 / 4.0fË+ ((()
bmp280_ˇl
.
dig_P4
) * 65536.0f);

628 
v¨1
 = ((()
bmp280_ˇl
.
dig_P3
Ë* v¨1 * v¨1 / 524288.0‡+ (()bmp280_ˇl.
dig_P2
) * var1) / 524288.0f;

629 
v¨1
 = (1.0‡+ v¨1 / 32768.0fË* (()
bmp280_ˇl
.
dig_P1
);

630 i‡(
v¨1
 == 0.0f)

633 
p
 = 1048576.0‡- ()
adc_P
;

634 
p
 = (∞- (
v¨2
 / 4096.0f)Ë* 6250.0‡/ 
v¨1
;

635 
v¨1
 = (()
bmp280_ˇl
.
dig_P9
Ë* 
p
 *Ö / 2147483648.0f;

636 
v¨2
 = 
p
 * (()
bmp280_ˇl
.
dig_P8
) / 32768.0f;

637 
p
 =Ö + (
v¨1
 + 
v¨2
 + (()
bmp280_ˇl
.
dig_P7
)) / 16.0f;

639  
p
;

640 
	}
}

642 
	$bmp280_ˇlcuœã
(
öt32_t
 *
¥essuª
, 
öt16_t
 *
ãm≥øtuª
)

646 
t
, 
p
;

647 
t
 = 
	`bmp280_com≥nßã_T
(
bmp280_ut
);

648 
p
 = 
	`bmp280_com≥nßã_P
(
bmp280_up
);

650 i‡(
¥essuª
)

651 *
¥essuª
 = (
öt32_t
)
p
;

652 i‡(
ãm≥øtuª
)

653 *
ãm≥øtuª
 = (
öt16_t
)
t
 * 100;

654 
	}
}

656 
	$B¨o_öô
() {

657 
	`dñay
(10);

658 
	`bmp280Dëe˘
();

659 
	`dñay
(5);

660 
	`bmp280_°¨t_ut
();

661 
bmp280_˘x
.
dódlöe
 = 
cuºítTime
;

663 
	}
}

666 
uöt8_t
 
	$B¨o_upd©e
() {

667 i‡(
cuºítTime
 < 
bmp280_˘x
.
dódlöe
)  0;

669 
bmp280_˘x
.
dódlöe
 = 
cuºítTime
;

671 i‡(
bmp280_˘x
.
°©e
 == 0) {

672 
	`bmp280_gë_ut
();

673 
	`bmp280_°¨t_up
();

674 
	`B¨o_Comm⁄
();

675 
bmp280_˘x
.
°©e
 = 1;

677 
bmp280_˘x
.
dódlöe
 +bmp280_˘x.
up_dñay
;

680 
	`bmp280_gë_up
();

681 
	`bmp280_°¨t_ut
();

682 
	`bmp280_ˇlcuœã
(&
b¨oPªssuª
,&
b¨oTem≥øtuª
);

683 
bmp280_˘x
.
°©e
 = 0;

686 
	}
}

700 #i‡
deföed
(
MS561101BA
)

701 #i‡!
deföed
(
MS561101BA_ADDRESS
)

702 
	#MS561101BA_ADDRESS
 0x77

705 

	)

707 
	#MS561101BA_PRESSURE
 0x40

	)

708 
	#MS561101BA_TEMPERATURE
 0x50

	)

709 
	#MS561101BA_RESET
 0x1E

	)

712 
	#MS561101BA_OSR_256
 0x00

	)

713 
	#MS561101BA_OSR_512
 0x02

	)

714 
	#MS561101BA_OSR_1024
 0x04

	)

715 
	#MS561101BA_OSR_2048
 0x06

	)

716 
	#MS561101BA_OSR_4096
 0x08

	)

718 
	#OSR
 
MS561101BA_OSR_4096


	)

722 
uöt16_t
 
	mc
[7];

723 
uöt32_t
 
	mut
;

724 
uöt32_t
 
	mup
;

725 
uöt8_t
 
	m°©e
;

726 
uöt16_t
 
	mdódlöe
;

727 } 
	gms561101ba_˘x
;

729 
	$B¨o_öô
() {

731 
	`i2c_wrôeReg
(
MS561101BA_ADDRESS
, 
MS561101BA_RESET
, 0);

732 
	`dñay
(100);

735 uni⁄ {
uöt16_t
 
vÆ
; 
uöt8_t
 
øw
[2]; } 
d©a
;

736 
uöt8_t
 
i
=0;i<6;i++) {

737 
	`i2c_ªp_°¨t
(
MS561101BA_ADDRESS
<<1);

738 
	`i2c_wrôe
(0xA2+2*
i
);

739 
	`i2c_ªp_°¨t
((
MS561101BA_ADDRESS
<<1) | 1);

740 
d©a
.
øw
[1] = 
	`i2c_ªadAck
();

741 
d©a
.
øw
[0] = 
	`i2c_ªadNak
();

742 
ms561101ba_˘x
.
c
[
i
+1] = 
d©a
.
vÆ
;

744 
	}
}

747 
	$i2c_MS561101BA_UT_‹_UP_Sèπ
(
uöt8_t
 
ªg
) {

748 
	`i2c_ªp_°¨t
(
MS561101BA_ADDRESS
<<1);

749 
	`i2c_wrôe
(
ªg
);

750 
	`i2c_°›
();

751 
	}
}

753 
	$i2c_MS561101BA_UT_‹_UP_Ród
(
uöt32_t
* 
vÆ
) {

754 uni⁄ {
uöt32_t
 
vÆ
; 
uöt8_t
 
øw
[4]; } 
d©a
;

755 
	`i2c_ªp_°¨t
(
MS561101BA_ADDRESS
<<1);

756 
	`i2c_wrôe
(0);

757 
	`i2c_ªp_°¨t
((
MS561101BA_ADDRESS
<<1) | 1);

758 
d©a
.
øw
[2] = 
	`i2c_ªadAck
();

759 
d©a
.
øw
[1] = 
	`i2c_ªadAck
();

760 
d©a
.
øw
[0] = 
	`i2c_ªadNak
();

761 *
vÆ
 = 
d©a
.val;

762 
	}
}

766 
	$i2c_MS561101BA_CÆcuœã
() {

767 
öt32_t
 
dñt
;

769 
dT
 = (
öt32_t
)
ms561101ba_˘x
.
ut
 - (öt32_t)((
uöt32_t
)ms561101ba_˘x.
c
[5] << 8);

770 
off
 = ((
uöt32_t
)
ms561101ba_˘x
.
c
[2] <<16Ë+ ((
dT
 * ms561101ba_ctx.c[4]) /((uint32_t)1<<7));

771 
£ns
 = ((
uöt32_t
)
ms561101ba_˘x
.
c
[1] <<15Ë+ ((
dT
 * ms561101ba_ctx.c[3]) /((uint32_t)1<<8));

772 
dñt
 = (
dT
 * 
ms561101ba_˘x
.
c
[6])/((
uöt32_t
)1<<23);

773 
b¨oTem≥øtuª
 = 
dñt
 + 2000;

774 i‡(
dñt
 < 0) {

775 
dñt
 *= 5 * delt;

776 
off
 -
dñt
>>1;

777 
£ns
 -
dñt
>>2;

779 
b¨oPªssuª
 = (–(
ms561101ba_˘x
.
up
 * 
£ns
 ) /((
uöt32_t
)1<<21)Ë- 
off
)/((uint32_t)1<<15);

780 
	}
}

783 
uöt8_t
 
	$B¨o_upd©e
() {

784 
uöt32_t
* 
øwVÆPoöãr
;

785 
uöt8_t
 
comm™dRegi°î
;

787 i‡(
ms561101ba_˘x
.
°©e
 == 2) {

788 
ms561101ba_˘x
.
°©e
 = 0;

789 
	`i2c_MS561101BA_CÆcuœã
();

792 i‡((
öt16_t
)(
cuºítTime
 - 
ms561101ba_˘x
.
dódlöe
)<0)  0;

793 
ms561101ba_˘x
.
dódlöe
 = 
cuºítTime
+10000;

794 i‡(
ms561101ba_˘x
.
°©e
 == 0) {

795 
	`B¨o_Comm⁄
();

796 
øwVÆPoöãr
 = &
ms561101ba_˘x
.
ut
;

797 
comm™dRegi°î
 = 
MS561101BA_PRESSURE
 + 
OSR
;

799 
øwVÆPoöãr
 = &
ms561101ba_˘x
.
up
;

800 
comm™dRegi°î
 = 
MS561101BA_TEMPERATURE
 + 
OSR
;

802 
ms561101ba_˘x
.
°©e
++;

803 
	`i2c_MS561101BA_UT_‹_UP_Ród
(
øwVÆPoöãr
);

804 
	`i2c_MS561101BA_UT_‹_UP_Sèπ
(
comm™dRegi°î
);

806 
	}
}

812 #i‡
deföed
(
MMA7455
)

813 #i‡!
deföed
(
MMA7455_ADDRESS
)

814 
	#MMA7455_ADDRESS
 0x1D

	)

817 
	$ACC_öô
 () {

818 
	`dñay
(10);

819 
	`i2c_wrôeReg
(
MMA7455_ADDRESS
,0x16,0x21);

820 
	}
}

822 
	$ACC_gëADC
 () {

823 
	`i2c_gëSixRawADC
(
MMA7455_ADDRESS
,0x00);

825 
	`ACC_ORIENTATION
–((
	`öt8_t
(
øwADC
[1])<<8) | int8_t(rawADC[0])) ,

826 ((
	`öt8_t
(
øwADC
[3])<<8) | int8_t(rawADC[2])) ,

827 ((
	`öt8_t
(
øwADC
[5])<<8) | int8_t(rawADC[4])) );

828 
	`ACC_Comm⁄
();

829 
	}
}

835 #i‡
deföed
(
MMA8451Q
)

837 #i‡!
deföed
(
MMA8451Q_ADDRESS
)

838 
	#MMA8451Q_ADDRESS
 0x1C

	)

842 
	$ACC_öô
 () {

843 
	`dñay
(10);

844 
	`i2c_wrôeReg
(
MMA8451Q_ADDRESS
,0x2A,0x05);

845 
	`dñay
(10);

846 
	`i2c_wrôeReg
(
MMA8451Q_ADDRESS
,0x0E,0x02);

847 
	}
}

849 
	$ACC_gëADC
 () {

850 
	`i2c_gëSixRawADC
(
MMA8451Q_ADDRESS
,0x00);

852 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])/32 ,

853 ((
øwADC
[3]<<8) |ÑawADC[2])/32 ,

854 ((
øwADC
[5]<<8) |ÑawADC[4])/32);

855 
	`ACC_Comm⁄
();

856 
	}
}

870 #i‡
deföed
(
ADXL345
)

871 #i‡!
deföed
(
ADXL345_ADDRESS
)

872 
	#ADXL345_ADDRESS
 0x1D

	)

876 
	$ACC_öô
 () {

877 
	`dñay
(10);

878 
	`i2c_wrôeReg
(
ADXL345_ADDRESS
,0x2D,1<<3);

879 
	`i2c_wrôeReg
(
ADXL345_ADDRESS
,0x31,0x0B);

880 
	`i2c_wrôeReg
(
ADXL345_ADDRESS
,0x2C,0x09);

881 
	}
}

883 
	$ACC_gëADC
 () {

884 
	`i2c_gëSixRawADC
(
ADXL345_ADDRESS
,0x32);

886 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0]) ,

887 ((
øwADC
[3]<<8) |ÑawADC[2]) ,

888 ((
øwADC
[5]<<8) |ÑawADC[4]) );

889 
	`ACC_Comm⁄
();

890 
	}
}

909 #i‡
deföed
(
BMA180
)

910 #i‡!
deföed
(
BMA180_ADDRESS
)

911 
	#BMA180_ADDRESS
 0x40

	)

915 
	$ACC_öô
 () {

916 
	`dñay
(10);

918 
	`i2c_wrôeReg
(
BMA180_ADDRESS
,0x0D,1<<4);

919 
	`dñay
(5);

920 
uöt8_t
 
c⁄åﬁ
 = 
	`i2c_ªadReg
(
BMA180_ADDRESS
, 0x20);

921 
c⁄åﬁ
 = control & 0x0F;

923 
c⁄åﬁ
 = control | (0x00 << 4);

924 
	`i2c_wrôeReg
(
BMA180_ADDRESS
, 0x20, 
c⁄åﬁ
);

925 
	`dñay
(5);

926 
c⁄åﬁ
 = 
	`i2c_ªadReg
(
BMA180_ADDRESS
, 0x30);

927 
c⁄åﬁ
 = control & 0xFC;

928 
c⁄åﬁ
 = control | 0x00;

929 
	`i2c_wrôeReg
(
BMA180_ADDRESS
, 0x30, 
c⁄åﬁ
);

930 
	`dñay
(5);

931 
c⁄åﬁ
 = 
	`i2c_ªadReg
(
BMA180_ADDRESS
, 0x35);

932 
c⁄åﬁ
 = control & 0xF1;

933 
c⁄åﬁ
 = control | (0x05 << 1);

934 
	`i2c_wrôeReg
(
BMA180_ADDRESS
, 0x35, 
c⁄åﬁ
);

935 
	`dñay
(5);

936 
	}
}

938 
	$ACC_gëADC
 () {

939 
	`i2c_gëSixRawADC
(
BMA180_ADDRESS
,0x02);

941 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>4 ,

942 ((
øwADC
[3]<<8) |ÑawADC[2])>>4 ,

943 ((
øwADC
[5]<<8) |ÑawADC[4])>>4 );

944 
	`ACC_Comm⁄
();

945 
	}
}

951 #i‡
deföed
(
BMA280
)

952 #i‡!
deföed
(
BMA280_ADDRESS
)

953 
	#BMA280_ADDRESS
 0x18

956 

	)

957 
	$ACC_öô
 () {

958 
	`dñay
(10);

959 
	`i2c_wrôeReg
(
BMA280_ADDRESS
, 0x10, 0x09);

960 
	`dñay
(5);

961 
	`i2c_wrôeReg
(
BMA280_ADDRESS
, 0x0F, 0x08);

962 
	}
}

964 
	$ACC_gëADC
 () {

965 
	`i2c_gëSixRawADC
(
BMA280_ADDRESS
,0x02);

967 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>4 ,

968 ((
øwADC
[3]<<8) |ÑawADC[2])>>4 ,

969 ((
øwADC
[5]<<8) |ÑawADC[4])>>4 );

970 
	`ACC_Comm⁄
();

971 
	}
}

990 #i‡
deföed
(
BMA020
)

991 
	$ACC_öô
(){

992 
	`i2c_wrôeReg
(0x38,0x15,0x80);

993 
uöt8_t
 
c⁄åﬁ
 = 
	`i2c_ªadReg
(0x70, 0x14);

994 
c⁄åﬁ
 = control & 0xE0;

995 
c⁄åﬁ
 = control | (0x02 << 3);

996 
c⁄åﬁ
 = control | 0x00;

997 
	`i2c_wrôeReg
(0x38,0x14,
c⁄åﬁ
);

998 
	}
}

1000 
	$ACC_gëADC
(){

1001 
	`i2c_gëSixRawADC
(0x38,0x02);

1002 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>6 ,

1003 ((
øwADC
[3]<<8) |ÑawADC[2])>>6 ,

1004 ((
øwADC
[5]<<8) |ÑawADC[4])>>6 );

1005 
	`ACC_Comm⁄
();

1006 
	}
}

1012 #i‡
deföed
(
LIS3LV02
)

1013 
	#LIS3A
 0x1D

	)

1015 
	$ACC_öô
(){

1016 
	`i2c_wrôeReg
(
LIS3A
 ,0x20 ,0xD7 );

1017 
	`i2c_wrôeReg
(
LIS3A
 ,0x21 ,0x50 );

1018 
	}
}

1020 
	$ACC_gëADC
(){

1021 
	`i2c_gëSixRawADC
(
LIS3A
,0x28+0x80);

1022 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>2 ,

1023 ((
øwADC
[3]<<8) |ÑawADC[2])>>2 ,

1024 ((
øwADC
[5]<<8) |ÑawADC[4])>>2);

1025 
	`ACC_Comm⁄
();

1026 
	}
}

1032 #i‡
deföed
(
LSM303DLx_ACC
)

1033 
	$ACC_öô
 () {

1034 
	`dñay
(10);

1035 
	`i2c_wrôeReg
(0x18,0x20,0x27);

1036 
	`i2c_wrôeReg
(0x18,0x23,0x30);

1037 
	`i2c_wrôeReg
(0x18,0x21,0x00);

1038 
	}
}

1040 
	$ACC_gëADC
 () {

1041 
	`i2c_gëSixRawADC
(0x18,0xA8);

1043 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>4 ,

1044 ((
øwADC
[3]<<8) |ÑawADC[2])>>4 ,

1045 ((
øwADC
[5]<<8) |ÑawADC[4])>>4 );

1046 
	`ACC_Comm⁄
();

1047 
	}
}

1053 #i‡
deföed
(
ADCACC
)

1054 
	$ACC_öô
(){

1055 
	`pöMode
(
A1
,
INPUT
);

1056 
	`pöMode
(
A2
,
INPUT
);

1057 
	`pöMode
(
A3
,
INPUT
);

1058 
	}
}

1060 
	$ACC_gëADC
() {

1061 
	`ACC_ORIENTATION
–
	`™ÆogRód
(
A1
) ,

1062 
	`™ÆogRód
(
A2
) ,

1063 
	`™ÆogRód
(
A3
) );

1064 
	`ACC_Comm⁄
();

1065 
	}
}

1071 #i‡
deföed
(
L3G4200D
)

1072 
	#L3G4200D_ADDRESS
 0x69

	)

1073 
	$Gyro_öô
() {

1074 
	`dñay
(100);

1075 
	`i2c_wrôeReg
(
L3G4200D_ADDRESS
 ,0x20 ,0x8F );

1076 
	`dñay
(5);

1077 
	`i2c_wrôeReg
(
L3G4200D_ADDRESS
 ,0x24 ,0x02 );

1078 
	`dñay
(5);

1079 
	`i2c_wrôeReg
(
L3G4200D_ADDRESS
 ,0x23 ,0x30);

1080 
	}
}

1082 
	$Gyro_gëADC
 () {

1083 
	`i2c_gëSixRawADC
(
L3G4200D_ADDRESS
,0x80|0x28);

1085 
	`GYRO_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>2 ,

1086 ((
øwADC
[3]<<8) |ÑawADC[2])>>2 ,

1087 ((
øwADC
[5]<<8) |ÑawADC[4])>>2 );

1088 
	`GYRO_Comm⁄
();

1089 
	}
}

1103 #i‡
deföed
(
ITG3200
Ë|| deföed(
ITG3050
Ë|| deföed(
MPU3050
)

1104 #i‡!
deföed
(
GYRO_ADDRESS
)

1105 
	#GYRO_ADDRESS
 0X68

	)

1109 
	$Gyro_öô
() {

1110 
	`i2c_wrôeReg
(
GYRO_ADDRESS
, 0x3E, 0x80);

1111 
	`dñay
(5);

1112 
	`i2c_wrôeReg
(
GYRO_ADDRESS
, 0x16, 0x18 + 
GYRO_DLPF_CFG
);

1113 
	`dñay
(5);

1114 
	`i2c_wrôeReg
(
GYRO_ADDRESS
, 0x3E, 0x03);

1115 
	`dñay
(100);

1116 
	}
}

1118 
	$Gyro_gëADC
 () {

1119 
	`i2c_gëSixRawADC
(
GYRO_ADDRESS
,0X1D);

1120 
	`GYRO_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])>>2 ,

1121 ((
øwADC
[2]<<8) |ÑawADC[3])>>2 ,

1122 ((
øwADC
[4]<<8) |ÑawADC[5])>>2 );

1123 
	`GYRO_Comm⁄
();

1124 
	}
}

1131 #i‡
MAG


1132 
	gmagGaö
[3] = {1.0,1.0,1.0};

1134 
uöt8_t
 
	$Mag_gëADC
() {

1135 
uöt32_t
 
t
,
tCÆ
 = 0;

1136 
öt16_t
 
magZîoTempMö
[3],
magZîoTempMax
[3];

1137 
uöt8_t
 
axis
;

1139 i‡–
cuºítTime
 < 
t
 )  0;

1140 
t
 = 
cuºítTime
 + 100000;

1141 
	`Devi˚_Mag_gëADC
();

1143 
axis
=0;axis<3;axis++) {

1144 
imu
.
magADC
[
axis
] = imu.magADC[axis] * 
magGaö
[axis];

1145 i‡(!
f
.
CALIBRATE_MAG
Ë
imu
.
magADC
[
axis
] -
globÆ_c⁄f
.
magZîo
[axis];

1148 i‡(
f
.
CALIBRATE_MAG
) {

1149 i‡(
tCÆ
 == 0)

1150 
tCÆ
 = 
t
;

1151 i‡((
t
 - 
tCÆ
) < 30000000) {

1152 
LEDPIN_TOGGLE
;

1153 
axis
=0;axis<3;axis++) {

1154 if(
tCÆ
 =
t
) {

1155 
magZîoTempMö
[
axis
] = 
imu
.
magADC
[axis];

1156 
magZîoTempMax
[
axis
] = 
imu
.
magADC
[axis];

1158 i‡(
imu
.
magADC
[
axis
] < 
magZîoTempMö
[axis]Ë{magZîoTempMö[axis] = imu.magADC[axis]; 
	`SET_ALARM
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);}

1159 i‡(
imu
.
magADC
[
axis
] > 
magZîoTempMax
[axis]Ë{magZîoTempMax[axis] = imu.magADC[axis]; 
	`SET_ALARM
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);}

1160 
globÆ_c⁄f
.
magZîo
[
axis
] = (
magZîoTempMö
[axis] + 
magZîoTempMax
[axis])>>1;

1163 
f
.
CALIBRATE_MAG
 = 0;

1164 
tCÆ
 = 0;

1165 
	`wrôeGlobÆSë
(1);

1169 #i‡
	`deföed
(
SENSORS_TILT_45DEG_LEFT
)

1170 
öt16_t
 
ãmp
 = ((
imu
.
magADC
[
PITCH
] - imu.magADC[
ROLL
] )*7)/10;

1171 
imu
.
magADC
[
ROLL
] = ((imu.magADC[ROLL] + imu.magADC[
PITCH
])*7)/10;

1172 
imu
.
magADC
[
PITCH
] = 
ãmp
;

1174 #i‡
	`deföed
(
SENSORS_TILT_45DEG_RIGHT
)

1175 
öt16_t
 
ãmp
 = ((
imu
.
magADC
[
PITCH
] + imu.magADC[
ROLL
] )*7)/10;

1176 
imu
.
magADC
[
ROLL
] = ((imu.magADC[ROLL] - imu.magADC[
PITCH
])*7)/10;

1177 
imu
.
magADC
[
PITCH
] = 
ãmp
;

1181 
	}
}

1189 #i‡
deföed
(
MAG3110
)

1190 
	#MAG_ADDRESS
 0x0E

	)

1191 
	#MAG_DATA_REGISTER
 0x01

	)

1192 
	#MAG_CTRL_REG1
 0x10

	)

1193 
	#MAG_CTRL_REG2
 0x11

	)

1195 
	$Mag_öô
() {

1196 
	`dñay
(100);

1197 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
MAG_CTRL_REG2
,0x80);

1198 
	`dñay
(100);

1199 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
MAG_CTRL_REG1
,0x11);

1200 
	`dñay
(100);

1201 
	}
}

1203 #i‡!
deföed
(
MPU6050_I2C_AUX_MASTER
)

1204 
	$Devi˚_Mag_gëADC
() {

1205 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1206 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1207 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1208 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1209 
	}
}

1220 #i‡
deföed
(
HMC5883
)

1222 
	#HMC58X3_R_CONFA
 0

	)

1223 
	#HMC58X3_R_CONFB
 1

	)

1224 
	#HMC58X3_R_MODE
 2

	)

1225 
	#HMC58X3_X_SELF_TEST_GAUSS
 (+1.16)

1226 
	#HMC58X3_Y_SELF_TEST_GAUSS
 (+1.16)

1227 
	#HMC58X3_Z_SELF_TEST_GAUSS
 (+1.08)

1228 
	#SELF_TEST_LOW_LIMIT
 (243.0/390.0)

1229 
	#SELF_TEST_HIGH_LIMIT
 (575.0/390.0)

1230 
	#HMC_POS_BIAS
 1

	)

1231 
	#HMC_NEG_BIAS
 2

	)

1233 
	#MAG_ADDRESS
 0x1E

	)

1234 
	#MAG_DATA_REGISTER
 0x03

	)

1236 
öt32_t
 
	gxyz_tŸÆ
[3]={0,0,0};

1238 
	$gëADC
() {

1239 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1240 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1241 ((
øwADC
[4]<<8) |ÑawADC[5]) ,

1242 ((
øwADC
[2]<<8) |ÑawADC[3]) );

1243 
	}
}

1245 
uöt8_t
 
	$büs_cﬁÀ˘
(
uöt8_t
 
büs
) {

1246 
öt16_t
 
abs_magADC
;

1248 
	`i2c_wrôeReg
(
MAG_ADDRESS
, 
HMC58X3_R_CONFA
, 
büs
);

1249 
uöt8_t
 
i
=0; i<10; i++) {

1250 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
HMC58X3_R_MODE
, 1);

1251 
	`dñay
(100);

1252 
	`gëADC
();

1253 
uöt8_t
 
axis
=0;áxis<3;áxis++) {

1254 
abs_magADC
 = 
	`abs
(
imu
.
magADC
[
axis
]);

1255 
xyz_tŸÆ
[
axis
]+
abs_magADC
;

1256 i‡((
öt16_t
)(1<<12Ë< 
abs_magADC
Ë 
Ál£
;

1259  
åue
;

1260 
	}
}

1262 
	$Mag_öô
() {

1263 
boﬁ
 
bªt
=
åue
;

1267 
	`i2c_wrôeReg
(
MAG_ADDRESS
, 
HMC58X3_R_CONFB
, 2 << 5);

1268 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
HMC58X3_R_MODE
, 1);

1269 
	`dñay
(100);

1270 
	`gëADC
();

1272 i‡(!
	`büs_cﬁÀ˘
(0x010 + 
HMC_POS_BIAS
)Ë
bªt
 = 
Ál£
;

1273 i‡(!
	`büs_cﬁÀ˘
(0x010 + 
HMC_NEG_BIAS
)Ë
bªt
 = 
Ál£
;

1275 i‡(
bªt
)

1276 
uöt8_t
 
axis
=0;áxis<3;áxis++)

1277 
magGaö
[
axis
]=820.0*
HMC58X3_X_SELF_TEST_GAUSS
*2.0*10.0/
xyz_tŸÆ
[axis];

1280 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,
HMC58X3_R_CONFA
 ,0x70 );

1281 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,
HMC58X3_R_CONFB
 ,0x20 );

1282 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,
HMC58X3_R_MODE
 ,0x00 );

1283 
	`dñay
(100);

1284 
	}
}

1286 #i‡!
deföed
(
MPU6050_I2C_AUX_MASTER
)

1287 
	$Devi˚_Mag_gëADC
() {

1288 
	`gëADC
();

1289 
	}
}

1298 #i‡
deföed
(
HMC5843
)

1299 
	#MAG_ADDRESS
 0x1E

	)

1300 
	#MAG_DATA_REGISTER
 0x03

	)

1302 
	$gëADC
() {

1303 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1304 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1305 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1306 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1307 
	}
}

1309 
	$Mag_öô
() {

1310 
	`dñay
(100);

1312 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x00 ,0x71 );

1313 
	`dñay
(50);

1315 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x01 ,0x60 );

1316 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x02 ,0x01 );

1321 
	`dñay
(100);

1322 
	`gëADC
();

1323 
	`dñay
(10);

1324 
magGaö
[
ROLL
] = 1000.0 / 
	`abs
(
imu
.
magADC
[ROLL]);

1325 
magGaö
[
PITCH
] = 1000.0 / 
	`abs
(
imu
.
magADC
[PITCH]);

1326 
magGaö
[
YAW
] = 1000.0 / 
	`abs
(
imu
.
magADC
[YAW]);

1329 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x00 ,0x70 );

1330 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x01 ,0x20 );

1331 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x02 ,0x00 );

1332 
	}
}

1334 #i‡!
deföed
(
MPU6050_I2C_AUX_MASTER
)

1335 
	$Devi˚_Mag_gëADC
() {

1336 
	`gëADC
();

1337 
	}
}

1347 #i‡
deföed
(
AK8975
)

1348 
	#MAG_ADDRESS
 0x0C

	)

1349 
	#MAG_DATA_REGISTER
 0x03

	)

1351 
	$Mag_öô
() {

1352 
	`dñay
(100);

1353 
	`i2c_wrôeReg
(
MAG_ADDRESS
,0x0a,0x01);

1354 
	`dñay
(100);

1355 
	}
}

1357 
	$Devi˚_Mag_gëADC
() {

1358 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1359 
	`MAG_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0]) ,

1360 ((
øwADC
[3]<<8) |ÑawADC[2]) ,

1361 ((
øwADC
[5]<<8) |ÑawADC[4]) );

1363 
	`i2c_wrôeReg
(
MAG_ADDRESS
,0x0a,0x01);

1364 
	}
}

1370 #i‡
deföed
(
MPU6050
)

1371 #i‡!
deföed
(
MPU6050_ADDRESS
)

1372 
	#MPU6050_ADDRESS
 0x68

1375 

	)

1376 
	$Gyro_öô
() {

1377 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x6B, 0x80);

1378 
	`dñay
(50);

1379 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x6B, 0x03);

1380 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x1A, 
GYRO_DLPF_CFG
);

1381 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x1B, 0x18);

1383 #i‡
	`deföed
(
MAG
)

1384 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x37, 0x02);

1386 
	}
}

1388 
	$Gyro_gëADC
 () {

1389 
	`i2c_gëSixRawADC
(
MPU6050_ADDRESS
, 0x43);

1390 
	`GYRO_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])>>2 ,

1391 ((
øwADC
[2]<<8) |ÑawADC[3])>>2 ,

1392 ((
øwADC
[4]<<8) |ÑawADC[5])>>2 );

1393 
	`GYRO_Comm⁄
();

1394 
	}
}

1396 
	$ACC_öô
 () {

1397 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x1C, 0x10);

1401 #i‡
	`deföed
(
MPU6050_I2C_AUX_MASTER
)

1404 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x6A, 0b00100000);

1405 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x37, 0x00);

1406 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x24, 0x0D);

1407 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x25, 0x80|
MAG_ADDRESS
);

1408 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x26, 
MAG_DATA_REGISTER
);

1409 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x27, 0x86);

1411 
	}
}

1413 
	$ACC_gëADC
 () {

1414 
	`i2c_gëSixRawADC
(
MPU6050_ADDRESS
, 0x3B);

1415 
	`ACC_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])>>3 ,

1416 ((
øwADC
[2]<<8) |ÑawADC[3])>>3 ,

1417 ((
øwADC
[4]<<8) |ÑawADC[5])>>3 );

1418 
	`ACC_Comm⁄
();

1419 
	}
}

1422 #i‡
deföed
(
MPU6050_I2C_AUX_MASTER
)

1423 
	$Devi˚_Mag_gëADC
() {

1424 
	`i2c_gëSixRawADC
(
MPU6050_ADDRESS
, 0x49);

1425 #i‡
	`deföed
(
HMC5843
)

1426 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1427 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1428 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1430 #i‡
	`deföed
 (
HMC5883
)

1431 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1432 ((
øwADC
[4]<<8) |ÑawADC[5]) ,

1433 ((
øwADC
[2]<<8) |ÑawADC[3]) );

1435 #i‡
	`deföed
 (
MAG3110
)

1436 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1437 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1438 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1440 
	}
}

1447 #i‡
deföed
(
LSM330
)

1448 #i‡!
deföed
(
LSM330_ACC_ADDRESS
)

1449 
	#LSM330_ACC_ADDRESS
 0x18

1452 #i‡!
	`deföed
(
LSM330_GYRO_ADDRESS
)

	)

1453 
	#LSM330_GYRO_ADDRESS
 0x6A

1456 

	)

1460 
	$ACC_öô
 () {

1462 
	`dñay
(10);

1465 
	`i2c_wrôeReg
(
LSM330_ACC_ADDRESS
 ,0x20 ,0x37 );

1469 
	`dñay
(5);

1472 
	`i2c_wrôeReg
(
LSM330_ACC_ADDRESS
 ,0x23 ,0x28 );

1475 
	`dñay
(5);

1476 
	`i2c_wrôeReg
(
LSM330_ACC_ADDRESS
,0x21,0x00);

1477 
	}
}

1480 
	#ACC_DELIMITER
 4

1483 

	)

1484 
	$ACC_gëADC
 () {

1485 
	`i2c_gëSixRawADC
(
LSM330_ACC_ADDRESS
,0x80|0x28);

1487 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8Ë|ÑawADC[0])>>
ACC_DELIMITER
 ,

1488 ((
øwADC
[3]<<8Ë|ÑawADC[2])>>
ACC_DELIMITER
 ,

1489 ((
øwADC
[5]<<8Ë|ÑawADC[4])>>
ACC_DELIMITER
 );

1490 
	`ACC_Comm⁄
();

1491 
	}
}

1499 
	$Gyro_öô
() {

1500 
	`dñay
(100);

1501 
	`i2c_wrôeReg
(
LSM330_GYRO_ADDRESS
 ,0x20 ,0x8F );

1502 
	`dñay
(5);

1503 
	`i2c_wrôeReg
(
LSM330_GYRO_ADDRESS
 ,0x24 ,0x02 );

1504 
	`dñay
(5);

1505 
	`i2c_wrôeReg
(
LSM330_GYRO_ADDRESS
 ,0x23 ,0x30);

1506 
	}
}

1508 
	$Gyro_gëADC
 () {

1509 
	`i2c_gëSixRawADC
(
LSM330_GYRO_ADDRESS
,0x80|0x28);

1511 
	`GYRO_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>2 ,

1512 ((
øwADC
[3]<<8) |ÑawADC[2])>>2 ,

1513 ((
øwADC
[5]<<8) |ÑawADC[4])>>2 );

1514 
	`GYRO_Comm⁄
();

1515 
	}
}

1527 #i‡
deföed
(
WMP
)

1534 
	#WMP_ADDRESS_1
 0x53

	)

1535 
	#WMP_ADDRESS_2
 0x52

	)

1537 
	$Gyro_öô
() {

1538 
	`dñay
(250);

1539 
	`i2c_wrôeReg
(
WMP_ADDRESS_1
, 0xF0, 0x55);

1540 
	`dñay
(250);

1541 
	`i2c_wrôeReg
(
WMP_ADDRESS_1
, 0xFE, 0x05);

1542 
	`dñay
(250);

1543 
	}
}

1545 
	$Gyro_gëADC
() {

1546 
uöt8_t
 
axis
;

1547 
TWBR
 = ((
F_CPU
 / 
I2C_SPEED
) - 16) / 2;

1548 
	`i2c_gëSixRawADC
(
WMP_ADDRESS_2
,0x00);

1549 
TWBR
 = ((
F_CPU
 / 400000) - 16) / 2;

1551 i‡(
	`mi¸os
(Ë< (
√uåÆizeTime
 + 
NEUTRALIZE_DELAY
)) {

1552 
axis
 = 0;áxi†< 3;áxis++Ë{
imu
.
gyroADC
[axis]=0;imu.
accADC
[axis]=0;}

1553 
imu
.
accADC
[
YAW
] = 
ACC_1G
;

1557 i‡–(
øwADC
[5]&0x03) == 0x02 ) {

1559 
imu
.
gyroADC
[
ROLL
] = - ( ((
øwADC
[5]>>2)<<8) |ÑawADC[2] );

1560 
imu
.
gyroADC
[
PITCH
] = - ( ((
øwADC
[4]>>2)<<8) |ÑawADC[1] );

1561 
imu
.
gyroADC
[
YAW
] = - ( ((
øwADC
[3]>>2)<<8) |ÑawADC[0] );

1562 
	`GYRO_Comm⁄
();

1564 
imu
.
gyroADC
[
ROLL
] = (
øwADC
[3]&0x01) ? imu.gyroADC[ROLL]/5 : imu.gyroADC[ROLL];

1565 
imu
.
gyroADC
[
PITCH
] = (
øwADC
[4]&0x02)>>1 ? imu.gyroADC[PITCH]/5 : imu.gyroADC[PITCH];

1566 
imu
.
gyroADC
[
YAW
] = (
øwADC
[3]&0x02)>>1 ? imu.gyroADC[YAW]/5 : imu.gyroADC[YAW];

1568 
	}
}

1577 #i‡
deföed
(
SRF02
Ë|| deföed(
SRF08
Ë|| deföed(
SRF10
Ë|| deföed(
SRC235
)

1583 #i‡!
deföed
(
SRF08_DEFAULT_ADDRESS
)

1584 
	#SRF08_DEFAULT_ADDRESS
 (0xE0>>1)

	)

1587 #i‡!
deföed
(
SRF08_RANGE_WAIT
)

1588 
	#SRF08_RANGE_WAIT
 70000

1590 

	)

1591 #i‡!
deföed
(
SRF08_RANGE_SLEEP
)

1592 
	#SRF08_RANGE_SLEEP
 5000

1594 

	)

1595 #i‡!
deföed
(
SRF08_SENSOR_FIRST
)

1596 
	#SRF08_SENSOR_FIRST
 (0xF0>>1)

1598 

	)

1599 #i‡!
deföed
(
SRF08_MAX_SENSORS
)

1600 
	#SRF08_MAX_SENSORS
 4

1602 

	)

1606 
	#SRF08_REV_COMMAND
 0

	)

1607 
	#SRF08_LIGHT_GAIN
 1

	)

1608 
	#SRF08_ECHO_RANGE
 2

	)

1613 
öt32_t
 
	mønge
[
SRF08_MAX_SENSORS
];

1614 
öt8_t
 
	m£ns‹s
;

1615 
öt8_t
 
	mcuºít
;

1616 
uöt8_t
 
	m°©e
;

1617 
uöt32_t
 
	mdódlöe
;

1618 } 
	g§f08_˘x
;

1622 
	$S⁄¨_öô
() {

1623 
	`mem£t
(&
§f08_˘x
, 0, (srf08_ctx));

1624 
§f08_˘x
.
dódlöe
 = 4000000;

1625 
	}
}

1630 
uöt16_t
 
	$i2c_åy_ªadReg
(
uöt8_t
 
add
, uöt8_à
ªg
) {

1631 
uöt16_t
 
cou¡
 = 255;

1632 
	`i2c_ªp_°¨t
(
add
<<1);

1633 
	`i2c_wrôe
(
ªg
);

1634 
	`i2c_ªp_°¨t
((
add
<<1)|1);

1635 
TWCR
 = (1<<
TWINT
Ë| (1<<
TWEN
);

1636 !(
TWCR
 & (1<<
TWINT
))) {

1637 
cou¡
--;

1638 i‡(
cou¡
==0) {

1639 
TWCR
 = 0;

1643 
uöt8_t
 
r
 = 
TWDR
;

1644 
	`i2c_°›
();

1645  
r
;

1646 
	}
}

1649 
uöt16_t
 
	$i2c_ªadReg16
(
öt8_t
 
addr
, i¡8_à
ªg
) {

1650 
uöt8_t
 
b
[2];

1651 
	`i2c_ªad_ªg_to_buf
(
addr
, 
ªg
, (
uöt8_t
*)&
b
, (b));

1652  (
b
[0]<<8) | b[1];

1653 
	}
}

1655 
	$i2c_§f08_ch™ge_addr
(
öt8_t
 
cuºít
, i¡8_à
movëo
) {

1658 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 0xA0); 
	`dñay
(30);

1659 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 0xAA); 
	`dñay
(30);

1660 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 0xA5); 
	`dñay
(30);

1661 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 
movëo
); 
	`dñay
(30);

1662 
	}
}

1665 
	$i2c_§f08_discovî
() {

1666 
uöt8_t
 
addr
;

1667 
uöt16_t
 
x
;

1669 
§f08_˘x
.
£ns‹s
=0;

1670 
addr
 = 
SRF08_SENSOR_FIRST
;

1671 
uöt8_t
 
i
=0; i<
SRF08_MAX_SENSORS
 && 
x
!=0xff; i++) {

1672 
x
 = 
	`i2c_åy_ªadReg
(
addr
, 
SRF08_REV_COMMAND
);

1673 if(
x
!=0xffff) {

1674 
	`i2c_wrôeReg
(
addr
, 
SRF08_LIGHT_GAIN
, 0x15);

1675 
	`i2c_wrôeReg
(
addr
, 
SRF08_ECHO_RANGE
, 46);

1676 
§f08_˘x
.
£ns‹s
++;

1677 
addr
 += 1;

1680 if(
§f08_˘x
.
£ns‹s
 < 
SRF08_MAX_SENSORS
) {

1682 
x
 = 
	`i2c_åy_ªadReg
(
SRF08_DEFAULT_ADDRESS
, 
SRF08_REV_COMMAND
);

1683 if(
x
!=0xffff) {

1684 
	`i2c_§f08_ch™ge_addr
(
SRF08_DEFAULT_ADDRESS
, 
addr
<<1);

1685 
§f08_˘x
.
£ns‹s
++;

1688 
	}
}

1690 
	$S⁄¨_upd©e
() {

1691 i‡((
öt32_t
)(
cuºítTime
 - 
§f08_˘x
.
dódlöe
)<0) ;

1692 
§f08_˘x
.
dódlöe
 = 
cuºítTime
;

1693 
§f08_˘x
.
°©e
) {

1695 
	`i2c_§f08_discovî
();

1696 if(
§f08_˘x
.
£ns‹s
>0Ë§f08_˘x.
°©e
++;

1697 
§f08_˘x
.
dódlöe
 += 5000000;

1700 
§f08_˘x
.
cuºít
=0;

1701 
§f08_˘x
.
°©e
++;

1702 
§f08_˘x
.
dódlöe
 +
SRF08_RANGE_SLEEP
;

1704 #i‡
	`deföed
(
SONAR_MULTICAST_PING
)

1707 
	`i2c_wrôeReg
(0, 
SRF08_REV_COMMAND
, 0x51);

1708 
§f08_˘x
.
°©e
++;

1709 
§f08_˘x
.
dódlöe
 +
SRF08_RANGE_WAIT
;

1712 
§f08_˘x
.
ønge
[§f08_˘x.
cuºít
] = 
	`i2c_ªadReg16
–
SRF08_SENSOR_FIRST
+§f08_˘x.cuºít, 
SRF08_ECHO_RANGE
);

1713 
§f08_˘x
.
cuºít
++;

1714 if(
§f08_˘x
.
cuºít
 >§f08_˘x.
£ns‹s
Ë§f08_˘x.
°©e
=1;

1719 
	`i2c_wrôeReg
(
SRF08_SENSOR_FIRST
+
§f08_˘x
.
cuºít
, 
SRF08_REV_COMMAND
, 0x51);

1720 
§f08_˘x
.
°©e
++;

1721 
§f08_˘x
.
dódlöe
 +
SRF08_RANGE_WAIT
;

1724 
§f08_˘x
.
ønge
[§f08_˘x.
cuºít
] = 
	`i2c_ªadReg16
(
SRF08_SENSOR_FIRST
+§f08_˘x.cuºít, 
SRF08_ECHO_RANGE
);

1725 
§f08_˘x
.
cuºít
++;

1726 if(
§f08_˘x
.
cuºít
 >§f08_˘x.
£ns‹s
Ë§f08_˘x.
°©e
=1;

1727 
§f08_˘x
.
°©e
=2;

1731 
s⁄¨A…
 = 
§f08_˘x
.
ønge
[0];

1732 
	}
}

1734 
ölöe
 
	$S⁄¨_öô
(Ë{
	}
}

1735 
	$S⁄¨_upd©e
(Ë{
	}
}

1739 
	$öôS
() {

1740 
	`i2c_öô
();

1741 i‡(
GYRO
Ë
	`Gyro_öô
();

1742 i‡(
BARO
Ë
	`B¨o_öô
();

1743 i‡(
MAG
Ë
	`Mag_öô
();

1744 i‡(
ACC
Ë
	`ACC_öô
();

1745 i‡(
SONAR
Ë
	`S⁄¨_öô
();

1746 
	}
}

1748 
	$öôSís‹s
() {

1749 
uöt8_t
 
c
 = 5;

1750 #i‡!
	`deföed
(
DISABLE_POWER_PIN
)

1751 
POWERPIN_ON
;

1752 
	`dñay
(200);

1754 
c
) {

1755 
c
--;

1756 
	`öôS
();

1757 i‡(
i2c_îr‹s_cou¡
 == 0) ;

1759 
	}
}

	@Sensors.h

1 #i‚de‡
SENSORS_H_


2 
	#SENSORS_H_


	)

4 
ACC_gëADC
 ();

5 
Gyro_gëADC
 ();

6 
uöt8_t
 
Mag_gëADC
();

7 
uöt8_t
 
B¨o_upd©e
();

8 
S⁄¨_upd©e
();

10 
öôSís‹s
();

11 
i2c_ªp_°¨t
(
uöt8_t
 
addªss
);

12 
i2c_wrôe
(
uöt8_t
 
d©a
 );

13 
i2c_°›
();

14 
i2c_wrôe
(
uöt8_t
 
d©a
 );

15 
i2c_wrôeReg
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à
vÆ
);

16 
uöt8_t
 
i2c_ªadReg
(uöt8_à
add
, uöt8_à
ªg
);

17 
uöt8_t
 
i2c_ªadAck
();

18 
uöt8_t
 
i2c_ªadNak
();

20 
i2c_ªad_ªg_to_buf
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à*
buf
, uöt8_à
size
);

22 #i‡
deföed
(
MMA7455
)

23 
	#ACC_1G
 64

	)

25 #i‡
deföed
(
MMA8451Q
)

26 
	#ACC_1G
 512

	)

28 #i‡
deföed
(
ADXL345
)

29 
	#ACC_1G
 265

	)

31 #i‡
deföed
(
BMA180
Ë|| deföed(
BMA280
Ë|| deföed(
LIS3LV02
Ë|| deföed(
LSM303DLx_ACC
Ë|| deföed(
LSM330
)

32 
	#ACC_1G
 255

	)

34 #i‡
deföed
(
BMA020
)

35 
	#ACC_1G
 63

	)

37 #i‡
deföed
(
ADCACC
)

38 
	#ACC_1G
 75

	)

40 #i‡
deföed
(
MPU6050
)

41 #i‡
deföed
(
FREEIMUv04
)

42 
	#ACC_1G
 255

	)

44 
	#ACC_1G
 512

	)

47 #i‡!
deföed
(
ACC_1G
)

48 
	#ACC_1G
 256

	)

50 
	#ACCZ_25deg
 (
öt16_t
)(
ACC_1G
 * 0.90631)

51 
	#ACC_VñSˇÀ
 (9.80665‡/ 10000.0‡/ 
ACC_1G
)

	)

54 #i‡
deföed
(
ITG3050
)

55 
	#GYRO_SCALE
 (4 / 16.0 * 
PI
 / 180.0 / 1000000.0)

57 #i‡
	`deföed
(
MPU6050
Ë|| deföed(
MPU3050
)

	)

58 
	#GYRO_SCALE
 (4 / 16.4 * 
PI
 / 180.0 / 1000000.0)

60 #i‡
	`deföed
(
ITG3200
)

	)

61 
	#GYRO_SCALE
 (4 / 14.375 * 
PI
 / 180.0 / 1000000.0)

63 #i‡
	`deföed
(
L3G4200D
Ë|| deföed(
LSM330
)

	)

64 
	#GYRO_SCALE
 ((4.0‡* 
PI
 * 70.0f)/(1000.0f * 180.0f * 1000000.0f))

66 #i‡
	`deföed
(
WMP
)

	)

67 
	#GYRO_SCALE
 (1.0f/200e6f)

	)

	@Serial.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"Sîül.h
"

5 
	~"Mu…iWii.h
"

7 vﬁ©ûê
uöt8_t
 
	g£rülHódRX
[
UART_NUMBER
],
	g£rülTaûRX
[UART_NUMBER];

8 
uöt8_t
 
	g£rülBuf„rRX
[
RX_BUFFER_SIZE
][
UART_NUMBER
];

9 vﬁ©ûê
uöt8_t
 
	g£rülHódTX
[
UART_NUMBER
],
	g£rülTaûTX
[UART_NUMBER];

10 
uöt8_t
 
	g£rülBuf„rTX
[
TX_BUFFER_SIZE
][
UART_NUMBER
];

17 #i‡
deföed
(
TEENSY20
)

18 
	$T_USB_AvaûabÀ
(){

19 
n
 = 
Sîül
.
	`avaûabÀ
();

20 i‡(
n
 > 255)Ç = 255;

21  
n
;

22 
	}
}

30 #i‡
deföed
(
PROMINI
Ë|| deföed(
MEGA
)

31 #i‡
deföed
(
PROMINI
)

32 
	$ISR
(
USART_UDRE_ve˘
) {

34 #i‡
	`deföed
(
MEGA
)

35 
	$ISR
(
USART0_UDRE_ve˘
) {

37 
uöt8_t
 
t
 = 
£rülTaûTX
[0];

38 i‡(
£rülHódTX
[0] !
t
) {

39 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

40 
UDR0
 = 
£rülBuf„rTX
[
t
][0];

41 
£rülTaûTX
[0] = 
t
;

43 i‡(
t
 =
£rülHódTX
[0]Ë
UCSR0B
 &~(1<<
UDRIE0
);

44 
	}
}

46 #i‡
deföed
(
MEGA
Ë|| deföed(
PROMICRO
)

47 
	$ISR
(
USART1_UDRE_ve˘
) {

48 
uöt8_t
 
t
 = 
£rülTaûTX
[1];

49 i‡(
£rülHódTX
[1] !
t
) {

50 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

51 
UDR1
 = 
£rülBuf„rTX
[
t
][1];

52 
£rülTaûTX
[1] = 
t
;

54 i‡(
t
 =
£rülHódTX
[1]Ë
UCSR1B
 &~(1<<
UDRIE1
);

55 
	}
}

57 #i‡
deföed
(
MEGA
)

58 
	$ISR
(
USART2_UDRE_ve˘
) {

59 
uöt8_t
 
t
 = 
£rülTaûTX
[2];

60 i‡(
£rülHódTX
[2] !
t
) {

61 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

62 
UDR2
 = 
£rülBuf„rTX
[
t
][2];

63 
£rülTaûTX
[2] = 
t
;

65 i‡(
t
 =
£rülHódTX
[2]Ë
UCSR2B
 &~(1<<
UDRIE2
);

66 
	}
}

67 
	$ISR
(
USART3_UDRE_ve˘
) {

68 
uöt8_t
 
t
 = 
£rülTaûTX
[3];

69 i‡(
£rülHódTX
[3] !
t
) {

70 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

71 
UDR3
 = 
£rülBuf„rTX
[
t
][3];

72 
£rülTaûTX
[3] = 
t
;

74 i‡(
t
 =
£rülHódTX
[3]Ë
UCSR3B
 &~(1<<
UDRIE3
);

75 
	}
}

78 
	$U¨tSídD©a
(
uöt8_t
 
p‹t
) {

79 #i‡
	`deföed
(
PROMINI
)

80 
UCSR0B
 |(1<<
UDRIE0
);

82 #i‡
	`deföed
(
PROMICRO
)

83 
p‹t
) {

85 
£rülHódTX
[0] !
£rülTaûTX
[0]) {

86 i‡(++
£rülTaûTX
[0] >
TX_BUFFER_SIZE
) serialTailTX[0] = 0;

87 #i‡!
	`deföed
(
TEENSY20
)

88 
	`USB_Síd
(
USB_CDC_TX
,
£rülBuf„rTX
[
£rülTaûTX
[0]],1);

90 
Sîül
.
	`wrôe
(
£rülBuf„rTX
[
£rülTaûTX
[0]],1);

94 1: 
UCSR1B
 |(1<<
UDRIE1
); ;

97 #i‡
	`deföed
(
MEGA
)

98 
p‹t
) {

99 0: 
UCSR0B
 |(1<<
UDRIE0
); ;

100 1: 
UCSR1B
 |(1<<
UDRIE1
); ;

101 2: 
UCSR2B
 |(1<<
UDRIE2
); ;

102 3: 
UCSR3B
 |(1<<
UDRIE3
); ;

105 
	}
}

107 #i‡
deföed
(
GPS_SERIAL
)

108 
boﬁ
 
	$SîülTX‰ì
(
uöt8_t
 
p‹t
) {

109  (
£rülHódTX
[
p‹t
] =
£rülTaûTX
[port]);

110 
	}
}

113 
	$SîülO≥n
(
uöt8_t
 
p‹t
, 
uöt32_t
 
baud
) {

114 
uöt8_t
 
h
 = ((
F_CPU
 / 4 / 
baud
 -1) / 2) >> 8;

115 
uöt8_t
 
l
 = ((
F_CPU
 / 4 / 
baud
 -1) / 2);

116 
p‹t
) {

117 #i‡
	`deföed
(
PROMINI
)

118 0: 
UCSR0A
 = (1<<
U2X0
); 
UBRR0H
 = 
h
; 
UBRR0L
 = 
l
; 
UCSR0B
 |(1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
); ;

120 #i‡
	`deföed
(
PROMICRO
)

121 #i‡(
ARDUINO
 >100Ë&& !
	`deföed
(
TEENSY20
)

122 0: 
UDIEN
 &~(1<<
SOFE
); ;

124 1: 
UCSR1A
 = (1<<
U2X1
); 
UBRR1H
 = 
h
; 
UBRR1L
 = 
l
; 
UCSR1B
 |(1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
); ;

126 #i‡
	`deföed
(
MEGA
)

127 0: 
UCSR0A
 = (1<<
U2X0
); 
UBRR0H
 = 
h
; 
UBRR0L
 = 
l
; 
UCSR0B
 |(1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
); ;

128 1: 
UCSR1A
 = (1<<
U2X1
); 
UBRR1H
 = 
h
; 
UBRR1L
 = 
l
; 
UCSR1B
 |(1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
); ;

129 2: 
UCSR2A
 = (1<<
U2X2
); 
UBRR2H
 = 
h
; 
UBRR2L
 = 
l
; 
UCSR2B
 |(1<<
RXEN2
)|(1<<
TXEN2
)|(1<<
RXCIE2
); ;

130 3: 
UCSR3A
 = (1<<
U2X3
); 
UBRR3H
 = 
h
; 
UBRR3L
 = 
l
; 
UCSR3B
 |(1<<
RXEN3
)|(1<<
TXEN3
)|(1<<
RXCIE3
); ;

133 
	}
}

135 
	$SîülEnd
(
uöt8_t
 
p‹t
) {

136 
p‹t
) {

137 #i‡
	`deföed
(
PROMINI
)

138 0: 
UCSR0B
 &~((1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
)|(1<<
UDRIE0
)); ;

140 #i‡
	`deföed
(
PROMICRO
)

141 1: 
UCSR1B
 &~((1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
)|(1<<
UDRIE1
)); ;

143 #i‡
	`deföed
(
MEGA
)

144 0: 
UCSR0B
 &~((1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
)|(1<<
UDRIE0
)); ;

145 1: 
UCSR1B
 &~((1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
)|(1<<
UDRIE1
)); ;

146 2: 
UCSR2B
 &~((1<<
RXEN2
)|(1<<
TXEN2
)|(1<<
RXCIE2
)|(1<<
UDRIE2
)); ;

147 3: 
UCSR3B
 &~((1<<
RXEN3
)|(1<<
TXEN3
)|(1<<
RXCIE3
)|(1<<
UDRIE3
)); ;

150 
	}
}

153 
	$°‹e_u¨t_ö_buf
(
uöt8_t
 
d©a
, uöt8_à
p‹äum
) {

154 #i‡
	`deföed
(
SERIAL_RX
)

155 i‡(
p‹äum
 =
RX_SERIAL_PORT
) {

156 i‡(!
•ekFømeFœgs
) {

157 
	`£i
();

158 
uöt32_t
 
•ekTimeNow
 = (
timî0_ovîÊow_cou¡
 << 8Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

159 
uöt32_t
 
•ekI¡îvÆ
 = 
•ekTimeNow
 - 
•ekTimeLa°
;

160 
•ekTimeLa°
 = 
•ekTimeNow
;

161 i‡(
•ekI¡îvÆ
 > 2500) {

162 
£rülTaûRX
[
p‹äum
] = 0;

163 
£rülHódRX
[
p‹äum
] = 0;

164 
•ekFømeFœgs
 = 0x01;

166 
	`˛i
();

171 
uöt8_t
 
h
 = 
£rülHódRX
[
p‹äum
];

172 
£rülBuf„rRX
[
h
++][
p‹äum
] = 
d©a
;

173 i‡(
h
 >
RX_BUFFER_SIZE
) h = 0;

174 
£rülHódRX
[
p‹äum
] = 
h
;

175 
	}
}

177 #i‡
deföed
(
PROMINI
)

178 
	$ISR
(
USART_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR0
, 0); 
	}
}

180 #i‡
deföed
(
PROMICRO
)

181 
	$ISR
(
USART1_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR1
, 1); 
	}
}

183 #i‡
deföed
(
MEGA
)

184 
	$ISR
(
USART0_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR0
, 0); 
	}
}

185 
	$ISR
(
USART1_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR1
, 1); 
	}
}

186 
	$ISR
(
USART2_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR2
, 2); 
	}
}

187 
	$ISR
(
USART3_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR3
, 3); 
	}
}

190 
uöt8_t
 
	$SîülRód
(
uöt8_t
 
p‹t
) {

191 #i‡
	`deföed
(
PROMICRO
)

192 #i‡
	`deföed
(
TEENSY20
)

193 if(
p‹t
 =0Ë 
Sîül
.
	`ªad
();

195 #i‡(
ARDUINO
 >= 100)

196 if(
p‹t
 =0Ë
	`USB_Flush
(
USB_CDC_TX
);

198 if(
p‹t
 =0Ë 
	`USB_Recv
(
USB_CDC_RX
);

201 
uöt8_t
 
t
 = 
£rülTaûRX
[
p‹t
];

202 
uöt8_t
 
c
 = 
£rülBuf„rRX
[
t
][
p‹t
];

203 i‡(
£rülHódRX
[
p‹t
] !
t
) {

204 i‡(++
t
 >
RX_BUFFER_SIZE
)Å = 0;

205 
£rülTaûRX
[
p‹t
] = 
t
;

207  
c
;

208 
	}
}

210 #i‡
deföed
(
SERIAL_RX
)

211 
uöt8_t
 
	$SîülPìk
(
uöt8_t
 
p‹t
) {

212 
uöt8_t
 
c
 = 
£rülBuf„rRX
[
£rülTaûRX
[
p‹t
]][port];

213 i‡((
£rülHódRX
[
p‹t
] !
£rülTaûRX
[p‹t])Ë 
c
;  0;

214 
	}
}

217 
uöt8_t
 
	$SîülAvaûabÀ
(
uöt8_t
 
p‹t
) {

218 #i‡
	`deföed
(
PROMICRO
)

219 #i‡!
	`deföed
(
TEENSY20
)

220 if(
p‹t
 =0Ë 
	`USB_AvaûabÀ
(
USB_CDC_RX
);

222 if(
p‹t
 =0Ë 
	`T_USB_AvaûabÀ
();

225  ((
uöt8_t
)(
£rülHódRX
[
p‹t
] - 
£rülTaûRX
[p‹t]))%
RX_BUFFER_SIZE
;

226 
	}
}

228 
uöt8_t
 
	$SîülU£dTXBuff
(
uöt8_t
 
p‹t
) {

229  ((
uöt8_t
)(
£rülHódTX
[
p‹t
] - 
£rülTaûTX
[p‹t]))%
TX_BUFFER_SIZE
;

230 
	}
}

232 
	$SîülSîülize
(
uöt8_t
 
p‹t
,uöt8_à
a
) {

233 
uöt8_t
 
t
 = 
£rülHódTX
[
p‹t
];

234 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

235 
£rülBuf„rTX
[
t
][
p‹t
] = 
a
;

236 
£rülHódTX
[
p‹t
] = 
t
;

237 
	}
}

239 
	$SîülWrôe
(
uöt8_t
 
p‹t
,uöt8_à
c
){

240 
	`SîülSîülize
(
p‹t
,
c
);
	`U¨tSídD©a
(port);

241 
	}
}

	@Serial.h

1 #i‚de‡
SERIAL_H_


2 
	#SERIAL_H_


	)

4 #i‡
deföed
(
MEGA
)

5 
	#UART_NUMBER
 4

	)

6 #ñi‡
deföed
(
PROMICRO
)

7 
	#UART_NUMBER
 2

	)

9 
	#UART_NUMBER
 1

	)

11 
	#RX_BUFFER_SIZE
 256

12 
	#TX_BUFFER_SIZE
 128

	)

14 
SîülO≥n
(
uöt8_t
 
p‹t
, 
uöt32_t
 
baud
);

15 
uöt8_t
 
SîülRód
(uöt8_à
p‹t
);

16 
SîülWrôe
(
uöt8_t
 
p‹t
,uöt8_à
c
);

17 
uöt8_t
 
SîülAvaûabÀ
(uöt8_à
p‹t
);

18 
SîülEnd
(
uöt8_t
 
p‹t
);

19 
uöt8_t
 
SîülPìk
(uöt8_à
p‹t
);

20 
boﬁ
 
SîülTX‰ì
(
uöt8_t
 
p‹t
);

21 
uöt8_t
 
SîülU£dTXBuff
(uöt8_à
p‹t
);

22 
SîülSîülize
(
uöt8_t
 
p‹t
,uöt8_à
a
);

23 
U¨tSídD©a
(
uöt8_t
 
p‹t
);

25 
SîülWrôe16
(
uöt8_t
 
p‹t
, 
öt16_t
 
vÆ
);

	@config.h

1 #i‚de‡
CONFIG_H_


2 
	#CONFIG_H_


	)

39 
	#QUADX


	)

63 
	#MINTHROTTLE
 1100

64 

	)

67 
	#MAXTHROTTLE
 2000

	)

72 
	#MINCOMMAND
 1000

	)

76 
	#I2C_SPEED
 400000L

77 

	)

83 
	#LOOP_TIME
 2800

	)

136 
	#GY_521


162 

	)

186 
	#BMP280


	)

227 
	#PID_CONTROLLER
 1

	)

230 
	#YAW_DIRECTION
 1

	)

233 
	#ONLYARMWHENFLAT


234 

	)

238 
	#ALLOW_ARM_DISARM_VIA_TX_YAW


	)

268 
	#CAM_TIME_HIGH
 1000

269 

	)

274 
	#FLAPPERON_EP
 { 1500, 1700 }

275 
	#FLAPPERON_INVERT
 { -1, 1 }

276 

	)

291 
	#YAW_COLL_PRECOMP
 10

292 
	#YAW_COLL_PRECOMP_DEADBAND
 120

293 

	)

298 
	#COLLECTIVE_PITCH
 
THROTTLE


	)

301 
	#COLLECTIVE_RANGE
 { 80, 0, 80 }

302 
	#YAWMOTOR
 0

303 

	)

306 
	#SERVO_NICK
 { +10, -10, 0 }

	)

307 
	#SERVO_LEFT
 { +10, +5, +10 }

	)

308 
	#SERVO_RIGHT
 { +10, +5, -10 }

	)

311 
	#CONTROL_RANGE
 { 100, 100 }

312 

	)

399 
	#SBUS_MID_OFFSET
 988

400 

	)

501 
	#SERIAL0_COM_SPEED
 115200

	)

502 
	#SERIAL1_COM_SPEED
 115200

	)

503 
	#SERIAL2_COM_SPEED
 115200

	)

504 
	#SERIAL3_COM_SPEED
 115200

	)

508 
	#NEUTRALIZE_DELAY
 100000

	)

554 
	#ALTITUDE_RESET_ON_ARM


	)

600 
	#FAILSAFE_DELAY
 10

601 
	#FAILSAFE_OFF_DELAY
 200

602 
	#FAILSAFE_THROTTLE
 (
MINTHROTTLE
 + 200)

603 

	)

604 
	#FAILSAFE_DETECT_TRESHOLD
 985

	)

673 
	#GPS_BAUD
 57600

674 

	)

704 
	#GPS_LED_INDICATOR


	)

715 
	#NAV_CONTROLS_HEADING
 1

717 
	#NAV_TAIL_FIRST
 0

719 
	#NAV_SET_TAKEOFF_HEADING
 1

720 

	)

725 
	#MAG_DECLINATION
 4.02f

726 

	)

728 
	#GPS_LEAD_FILTER


729 

	)

735 
	#GPS_WP_RADIUS
 100

736 

	)

739 
	#SAFE_WP_DISTANCE
 500

740 

	)

742 
	#MAX_NAV_ALTITUDE
 100

743 

	)

745 
	#NAV_SPEED_MIN
 100

747 
	#NAV_SPEED_MAX
 400

749 
	#NAV_SLOW_NAV
 0

751 
	#CROSSTRACK_GAIN
 .4

753 
	#NAV_BANK_MAX
 3000

754 

	)

756 
	#RTH_ALTITUDE
 15

758 
	#WAIT_FOR_RTH_ALT
 1

759 

	)

761 
	#NAV_TAKEOVER_BARO
 1

762 

	)

764 
	#IGNORE_THROTTLE
 1

765 

	)

768 
	#FENCE_DISTANCE
 600

	)

771 
	#LAND_SPEED
 100

	)

796 
	#LCD_SERIAL_PORT
 0

797 

	)

815 
	#LCD_MENU_PREV
 'p'

	)

816 
	#LCD_MENU_NEXT
 'n'

	)

817 
	#LCD_VALUE_UP
 'u'

	)

818 
	#LCD_VALUE_DOWN
 'd'

	)

820 
	#LCD_MENU_SAVE_EXIT
 's'

	)

821 
	#LCD_MENU_ABORT
 'x'

	)

896 
	#VBATSCALE
 131

897 
	#VBATNOMINAL
 126

898 
	#VBATLEVEL_WARN1
 107

899 
	#VBATLEVEL_WARN2
 99

900 
	#VBATLEVEL_CRIT
 93

901 
	#NO_VBAT
 16

902 
	#VBAT_OFFSET
 0

903 

	)

908 
	#VBAT_CELLS_NUM
 0

909 
	#VBAT_CELLS_PINS
 {
A0
, 
A1
, 
A2
, 
A3
, 
A4
, 
A5
 }

910 
	#VBAT_CELLS_OFFSETS
 {0, 50, 83, 121, 149, 177 }

911 
	#VBAT_CELLS_DIVS
 { 75, 122, 98, 18, 30, 37 }

912 

	)

925 
	#PSENSORNULL
 510

	)

927 
	#PINT2mA
 132

	)

938 
	#ALT_HOLD_THROTTLE_NEUTRAL_ZONE
 50

	)

939 
	#ALT_HOLD_THROTTLE_MIDPOINT
 1500

940 

	)

980 
	#BOARD_NAME
 "Mu…iWiò V-.--"

	)

987 
	#NO_FLASH_CHECK


	)

995 
	#VBAT_PRESCALER
 16

996 

	)

1024 
	#MIDRC
 1500

	)

1028 
	#SERVO_RFR_50HZ


	)

1049 
	#MEGA_HW_PWM_SERVOS


	)

1062 
	#SERVO_RFR_RATE
 50

1065 

	)

1145 
	#ESC_CALIB_LOW
 
MINCOMMAND


	)

1146 
	#ESC_CALIB_HIGH
 2000

	)

1154 
	#LCD_TELEMETRY_FREQ
 23

1155 
	#LCD_TELEMETRY_AUTO_FREQ
 967

1156 
	#PSENSOR_SMOOTH
 16

1157 
	#VBAT_SMOOTH
 16

1158 
	#RSSI_SMOOTH
 16

1159 

	)

1196 
	#DISABLE_POWER_PIN


	)

	@def.h

1 #i‚de‡
DEF_H_


2 
	#DEF_H_


	)

7 #i‡
COPTERTEST
 == 1

8 
	#QUADP


	)

9 
	#WMP


	)

10 #ñi‡
COPTERTEST
 == 2

11 
	#FLYING_WING


	)

12 
	#WMP


	)

13 
	#BMA020


	)

14 
	#FAILSAFE


	)

15 
	#LCD_CONF


	)

16 
	#LCD_TEXTSTAR


	)

17 
	#VBAT


	)

18 
	#POWERMETER_SOFT


	)

19 #ñi‡
COPTERTEST
 == 3

20 
	#TRI


	)

21 
	#FREEIMUv035_MS


	)

22 
	#BUZZER


	)

23 
	#VBAT


	)

24 
	#POWERMETER_HARD


	)

25 
	#LCD_CONF


	)

26 
	#LCD_CONF_AUX


	)

27 
	#LCD_VT100


	)

28 
	#LCD_TELEMETRY


	)

29 
	#LCD_TELEMETRY_STEP
 "01245"

	)

30 
	#LOG_VALUES
 1

	)

31 
	#SUPPRESS_BARO_ALTHOLD


	)

32 
	#VARIOMETER
 12

	)

33 #ñi‡
COPTERTEST
 == 4

34 
	#QUADX


	)

35 
	#CRIUS_SE


	)

36 
	#SPEKTRUM
 2048

	)

37 
	#LED_RING


	)

38 
	#GPS_SERIAL
 2

	)

39 
	#NMEA


	)

40 
	#LOG_VALUES
 2

	)

41 
	#LOG_PERMANENT


	)

42 
	#LOG_PERMANENT_SERVICE_LIFETIME
 36000

	)

43 #ñi‡
COPTERTEST
 == 5

44 
	#HELI_120_CCPM


	)

45 
	#CRIUS_LITE


	)

46 #unde‡
DISABLE_POWER_PIN


47 
	#RCAUXPIN8


	)

48 
	#OLED_I2C_128x64


	)

49 
	#LCD_TELEMETRY


	)

50 
	#LOG_VALUES
 3

	)

51 
	#DEBUG


	)

52 #unde‡
SERVO_RFR_50HZ


53 
	#SERVO_RFR_160HZ


	)

54 
	#VBAT


	)

55 
	#POWERMETER_SOFT


	)

56 
	#MMGYRO
 10

	)

57 
	#MMGYROVECTORLENGTH
 15

	)

58 
	#GYRO_SMOOTHING
 {45, 45, 50}

	)

59 
	#INFLIGHT_ACC_CALIBRATION


	)

60 
	#LOG_PERMANENT


	)

61 
	#LOG_PERMANENT_SHOW_AT_STARTUP


	)

62 
	#LOG_PERMANENT_SHOW_AT_L


	)

63 
	#LOG_PERMANENT_SERVICE_LIFETIME
 36000

	)

64 
	#GOVERNOR_P
 0

	)

65 
	#GOVERNOR_D
 10

	)

66 
	#YAW_COLL_PRECOMP
 15

	)

67 
	#YAW_COLL_PRECOMP_DEADBAND
 130

	)

68 
	#VOLTAGEDROP_COMPENSATION


	)

69 #ñi‡
COPTERTEST
 == 6

70 
	#HEX6H


	)

71 
	#DIYFLYING_MAGE_V1


	)

72 
	#BUZZER


	)

73 
	#RCOPTIONSBEEP


74 
	#ARMEDTIMEWARNING
 480

75 
	#VBAT


	)

76 
	#VOLTAGEDROP_COMPENSATION


	)

77 
	#MEGA_HW_PWM_SERVOS


	)

78 
	#SERVO_RFR_RATE
 300

79 
	#LOG_VALUES
 1

	)

80 
	#DEBUG


	)

81 
	#MULTIPLE_CONFIGURATION_PROFILES


	)

82 
	#DISPLAY_FONT_DSIZE


	)

83 
	#OLED_DIGOLE


	)

84 
	#LCD_CONF


	)

85 #ñi‡
COPTERTEST
 == 7

86 
	#HELI_120_CCPM


	)

87 
	#YAW_COLL_PRECOMP
 15

	)

88 
	#YAW_COLL_PRECOMP_DEADBAND
 130

	)

89 
	#NANOWII


	)

90 
	#FORCE_ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

91 
	#FORCE_GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

92 
	#A32U4_4_HW_PWM_SERVOS


	)

93 
	#SERVO_RFR_RATE
 200

94 
	#SERVO_PIN5_RFR_RATE
 165

95 
	#SPEKTRUM
 1024

	)

96 
	#BUZZER


	)

97 
	#RCOPTIONSBEEP


98 
	#VBAT


	)

99 
	#LOG_VALUES
 1

	)

100 
	#DISPLAY_FONT_DSIZE


	)

101 
	#OLED_DIGOLE


	)

102 
	#LCD_CONF


	)

103 
	#LCD_TELEMETRY


	)

104 
	#LCD_TELEMETRY_AUTO
 "1"

	)

105 
	#LCD_TELEMETRY_STEP
 "F14$5R"

	)

106 
	#LOG_PERMANENT


	)

107 
	#LOG_PERMANENT_SHOW_AFTER_CONFIG


	)

108 
	#SUPPRESS_OTHER_SERIAL_COMMANDS


	)

109 
	#SUPPRESS_DEFAULTS_FROM_GUI


	)

110 
	#NO_FLASH_CHECK


	)

111 
	#DEBUG_FREE


	)

112 #ñi‡
COPTERTEST
 == 8

113 
	#BI


	)

114 
	#ITG3200


	)

115 
	#PID_CONTROLLER
 2

	)

116 
	#ESC_CALIB_CANNOT_FLY


	)

117 #ñi‡
COPTERTEST
 == 9

118 
	#AIRPLANE


	)

119 
	#FREEIMUv035


	)

120 
	#POWERMETER_HARD


	)

121 
	#WATTS


	)

122 
	#VBAT


	)

123 
	#VBAT_CELLS


	)

124 
	#VBAT_CELLS_NUM
 3

	)

125 
	#VBAT_CELLS_PINS
 {
A0
, 
A1
, 
A2
 }

	)

126 
	#VBAT_CELLS_OFFSETS
 {0, 50, 83 }

	)

127 
	#VBAT_CELLS_DIVS
 { 75, 122, 98 }

	)

128 #ñi‡
COPTERTEST
 == 10

129 
	#Y6


	)

130 
	#CRIUS_AIO_PRO


	)

131 
	#LCD_LCD03S


	)

132 
	#SERIAL0_COM_SPEED
 9600

	)

133 
	#LCD_CONF


	)

134 #ñi‡
deföed
(
COPTERTEST
)

143 #i‡
deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

144 
	#PROMINI


	)

146 #i‡
deföed
(
__AVR_ATmega32U4__
Ë|| deföed(
TEENSY20
)

147 
	#PROMICRO


	)

149 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega2560__
Ë|| deföed(
__AVR_ATmega2561__
)

150 
	#MEGA


	)

157 
	#SERVO_RATES
 {30,30,100,100,100,100,100,100}

	)

159 #i‡
deföed
 (
AIRPLANE
Ë|| deföed(
FLYING_WING
)

160 
	#FIXEDWING


	)

163 #i‡
deföed
(
HELI_120_CCPM
Ë|| deföed(
HELI_90_DEG
)

164 
	#HELICOPTER


	)

167 #i‡
deföed
(
BI
Ë|| deföed(
TRI
Ë|| deföed(
FIXEDWING
Ë|| deföed(
HELICOPTER
Ë|| deföed(
SINGLECOPTER
)|| deföed(
DUALCOPTER
)

168 
	#COPTER_WITH_SERVO


	)

171 #i‡
deföed
(
COPTER_WITH_SERVO
Ë|| deföed(
SERVO_TILT
Ë|| deföed(
GIMBAL
Ë|| deföed(
CAMTRIG
Ë|| deföed(
SERVO_MIX_TILT
)

172 
	#SERVO


	)

175 #i‡
deföed
(
DYNBALANCE
)

176 
	#DYNBAL
 1

	)

178 
	#DYNBAL
 0

	)

180 #i‡
deföed
(
FLAPS
)

181 
	#FLAP
 1

	)

183 
	#FLAP
 0

	)

186 #i‡
deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
)

187 
	#TRI_SERVO
 4

	)

189 
	#TRI_SERVO
 6

	)

192 #i‡
deföed
(
GIMBAL
)

193 
	#NUMBER_MOTOR
 0

	)

194 
	#PRI_SERVO_FROM
 1

195 
	#PRI_SERVO_TO
 2

	)

196 #ñi‡
deföed
(
FLYING_WING
)

197 
	#PRI_SERVO_FROM
 4

	)

198 #i‡
deföed
 (
USE_THROTTLESERVO
)

199 
	#NUMBER_MOTOR
 0

	)

200 
	#PRI_SERVO_TO
 8

201 #ñ£

	)

202 
	#NUMBER_MOTOR
 1

	)

203 
	#PRI_SERVO_TO
 5

205 #ñi‡
	`deföed
(
SINGLECOPTER
)

	)

206 
	#NUMBER_MOTOR
 1

	)

207 
	#PRI_SERVO_FROM
 4

208 
	#PRI_SERVO_TO
 7

	)

209 #ñi‡
deföed
(
DUALCOPTER
)

210 
	#NUMBER_MOTOR
 2

	)

211 
	#PRI_SERVO_FROM
 5

212 
	#PRI_SERVO_TO
 6

	)

213 #ñi‡
deföed
(
AIRPLANE
)

214 #i‡
deföed
 (
USE_THROTTLESERVO
)

215 
	#NUMBER_MOTOR
 0

	)

216 
	#PRI_SERVO_TO
 8

	)

218 
	#NUMBER_MOTOR
 1

	)

219 
	#PRI_SERVO_TO
 7

	)

221 #i‡
deföed
(
FLAPS
)

222 
	#PRI_SERVO_FROM
 3

223 #unde‡
CAMTRIG


224 #ñ£

	)

225 
	#PRI_SERVO_FROM
 4

227 #ñi‡
	`deföed
(
BI
)

	)

228 
	#NUMBER_MOTOR
 2

	)

229 
	#PRI_SERVO_FROM
 5

230 
	#PRI_SERVO_TO
 6

	)

231 #ñi‡
deföed
(
TRI
)

232 
	#NUMBER_MOTOR
 3

	)

233 
	#PRI_SERVO_FROM
 
TRI_SERVO


234 
	#PRI_SERVO_TO
 
TRI_SERVO


	)

235 #ñi‡
deföed
(
QUADP
Ë|| deföed(
QUADX
Ë|| deföed(
Y4
)|| deföed(
VTAIL4
)

236 
	#NUMBER_MOTOR
 4

	)

237 #ñi‡
deföed
(
Y6
Ë|| deföed(
HEX6
Ë|| deföed(
HEX6X
Ë|| deföed(
HEX6H
)

238 
	#NUMBER_MOTOR
 6

	)

239 #ñi‡
deföed
(
OCTOX8
Ë|| deföed(
OCTOFLATP
Ë|| deföed(
OCTOFLATX
)

240 
	#NUMBER_MOTOR
 8

	)

241 #ñi‡
deföed
(
HELICOPTER
)

242 
	#PRI_SERVO_FROM
 4

	)

243 #ifde‡
HELI_USE_SERVO_FOR_THROTTLE


244 
	#NUMBER_MOTOR
 0

245 
	#PRI_SERVO_TO
 8

246 #ñ£

	)

247 
	#NUMBER_MOTOR
 1

248 
	#PRI_SERVO_TO
 7

251 

	)

252 #i‡(
deföed
(
SERVO_TILT
)|| deföed(
SERVO_MIX_TILT
))&& deföed(
CAMTRIG
)

253 
	#SEC_SERVO_FROM
 1

254 
	#SEC_SERVO_TO
 3

	)

256 #i‡
deföed
(
SERVO_TILT
)|| deföed(
SERVO_MIX_TILT
)

258 #i‡
deföed
(
A0_A1_PIN_HEX
Ë&& (
NUMBER_MOTOR
 =6Ë&& deföed(
PROMINI
)

259 
	#SEC_SERVO_FROM
 3

260 
	#SEC_SERVO_TO
 4

	)

262 
	#SEC_SERVO_FROM
 1

263 
	#SEC_SERVO_TO
 2

	)

266 #i‡
deföed
(
CAMTRIG
)

267 
	#SEC_SERVO_FROM
 3

268 
	#SEC_SERVO_TO
 3

	)

272 #i‡
deföed
(
SIRIUS_AIR
Ë|| deföed(
SIRIUS_AIR_GPS
)

273 
	#RCAUX2PIND17


	)

277 #i‡
deföed
(
PROMINI
)

278 #i‡!
deföed
(
MONGOOSE1_0
)

279 
	#LEDPIN_PINMODE
 
	`pöMode
 (13, 
OUTPUT
);

	)

280 
	#LEDPIN_TOGGLE
 
PINB
 |= 1<<5;

281 
	#LEDPIN_OFF
 
PORTB
 &~(1<<5);

	)

282 
	#LEDPIN_ON
 
PORTB
 |(1<<5);

	)

284 #i‡!
deföed
(
RCAUXPIN8
)

285 #i‡!
deföed
(
MONGOOSE1_0
)

286 
	#BUZZERPIN_PINMODE
 
	`pöMode
 (8, 
OUTPUT
);

	)

287 #i‡
NUMBER_MOTOR
 >4

288 #unde‡
PILOTLAMP


290 #i‡
deföed
 
PILOTLAMP
 && 
NUMBER_MOTOR
 <5

291 
	#PL_PIN_ON
 
PORTB
 |1;

	)

292 
	#PL_PIN_OFF
 
PORTB
 &~1;

	)

294 
	#BUZZERPIN_ON
 
PORTB
 |1;

	)

295 
	#BUZZERPIN_OFF
 
PORTB
 &~1;

	)

299 
	#BUZZERPIN_PINMODE
 ;

	)

300 
	#BUZZERPIN_ON
 ;

	)

301 
	#BUZZERPIN_OFF
 ;

	)

302 
	#RCAUXPIN


	)

304 #i‡!
deföed
(
RCAUXPIN12
Ë&& !deföed(
DISABLE_POWER_PIN
)

305 
	#POWERPIN_PINMODE
 
	`pöMode
 (12, 
OUTPUT
);

	)

306 
	#POWERPIN_ON
 
PORTB
 |1<<4;

	)

307 
	#POWERPIN_OFF
 
PORTB
 &= ~(1<<4);

308 #ñ£

	)

309 
	#POWERPIN_PINMODE
 ;

	)

310 
	#POWERPIN_ON
 ;

	)

311 
	#POWERPIN_OFF
 ;

	)

313 #i‡
deföed
(
RCAUXPIN12
)

314 
	#RCAUXPIN


	)

316 
	#I2C_PULLUPS_ENABLE
 
PORTC
 |= 1<<4; PORTC |= 1<<5;

317 
	#I2C_PULLUPS_DISABLE
 
PORTC
 &~(1<<4); PORTC &~(1<<5);

	)

318 #i‡!
deföed
(
MONGOOSE1_0
)

319 
	#PINMODE_LCD
 
	`pöMode
(0, 
OUTPUT
);

	)

320 
	#LCDPIN_OFF
 
PORTD
 &= ~1;

321 
	#LCDPIN_ON
 
PORTD
 |1;

	)

322 
	#STABLEPIN_PINMODE
 ;

	)

323 
	#STABLEPIN_ON
 ;

	)

324 
	#STABLEPIN_OFF
 ;

	)

326 
	#PPM_PIN_INTERRUPT
 
	`©èchI¡îru±
(0, 
rxI¡
, 
RISING
);

327 
	#RX_SERIAL_PORT
 0

	)

329 
	#THROTTLEPIN
 2

	)

330 
	#ROLLPIN
 4

	)

331 
	#PITCHPIN
 5

	)

332 
	#YAWPIN
 6

	)

333 
	#AUX1PIN
 7

	)

334 
	#AUX2PIN
 0

335 
	#AUX3PIN
 1

336 
	#AUX4PIN
 3

337 

	)

338 
	#PCINT_PIN_COUNT
 5

	)

339 
	#PCINT_RX_BITS
 (1<<2),(1<<4),(1<<5),(1<<6),(1<<7)

	)

340 
	#PCINT_RX_PORT
 
PORTD


	)

341 
	#PCINT_RX_MASK
 
PCMSK2


	)

342 
	#PCIR_PORT_BIT
 (1<<2)

	)

343 
	#RX_PC_INTERRUPT
 
PCINT2_ve˘


	)

344 
	#RX_PCINT_PIN_PORT
 
PIND


	)

345 
	#V_BATPIN
 
A3


346 
	#PSENSORPIN
 
A2


347 

	)

348 #i‡
deföed
(
A0_A1_PIN_HEX
Ë|| (
NUMBER_MOTOR
 > 6)

349 
	#SOFT_PWM_1_PIN_HIGH
 
PORTC
 |1<<0;

	)

350 
	#SOFT_PWM_1_PIN_LOW
 
PORTC
 &~(1<<0);

	)

351 
	#SOFT_PWM_2_PIN_HIGH
 
PORTC
 |1<<1;

	)

352 
	#SOFT_PWM_2_PIN_LOW
 
PORTC
 &~(1<<1);

	)

354 
	#SOFT_PWM_1_PIN_HIGH
 
PORTD
 |1<<5;

	)

355 
	#SOFT_PWM_1_PIN_LOW
 
PORTD
 &~(1<<5);

	)

356 
	#SOFT_PWM_2_PIN_HIGH
 
PORTD
 |1<<6;

	)

357 
	#SOFT_PWM_2_PIN_LOW
 
PORTD
 &~(1<<6);

	)

359 
	#SOFT_PWM_3_PIN_HIGH
 
PORTC
 |1<<2;

	)

360 
	#SOFT_PWM_3_PIN_LOW
 
PORTC
 &~(1<<2);

	)

361 
	#SOFT_PWM_4_PIN_HIGH
 
PORTB
 |1<<4;

	)

362 
	#SOFT_PWM_4_PIN_LOW
 
PORTB
 &~(1<<4);

	)

364 
	#SERVO_1_PINMODE
 
	`pöMode
(
A0
,
OUTPUT
);

365 
	#SERVO_1_PIN_HIGH
 
PORTC
 |1<<0;

	)

366 
	#SERVO_1_PIN_LOW
 
PORTC
 &~(1<<0);

	)

367 
	#SERVO_2_PINMODE
 
	`pöMode
(
A1
,
OUTPUT
);

368 
	#SERVO_2_PIN_HIGH
 
PORTC
 |1<<1;

	)

369 
	#SERVO_2_PIN_LOW
 
PORTC
 &~(1<<1);

	)

370 
	#SERVO_3_PINMODE
 
	`pöMode
(
A2
,
OUTPUT
);

371 
	#SERVO_3_PIN_HIGH
 
PORTC
 |1<<2;

	)

372 
	#SERVO_3_PIN_LOW
 
PORTC
 &~(1<<2);

	)

373 #i‡!
deföed
(
MONGOOSE1_0
)

374 
	#SERVO_4_PINMODE
 
	`pöMode
(12,
OUTPUT
);

375 
	#SERVO_4_PIN_HIGH
 
PORTB
 |1<<4;

	)

376 
	#SERVO_4_PIN_LOW
 
PORTB
 &~(1<<4);

	)

378 
	#SERVO_5_PINMODE
 
	`pöMode
(11,
OUTPUT
);

379 
	#SERVO_5_PIN_HIGH
 
PORTB
 |1<<3;

	)

380 
	#SERVO_5_PIN_LOW
 
PORTB
 &~(1<<3);

	)

381 
	#SERVO_6_PINMODE
 
	`pöMode
(3,
OUTPUT
);

382 
	#SERVO_6_PIN_HIGH
 
PORTD
|1<<3;

	)

383 
	#SERVO_6_PIN_LOW
 
PORTD
 &~(1<<3);

	)

384 
	#SERVO_7_PINMODE
 
	`pöMode
(10,
OUTPUT
);

385 
	#SERVO_7_PIN_HIGH
 
PORTB
 |1<<2;

	)

386 
	#SERVO_7_PIN_LOW
 
PORTB
 &~(1<<2);

	)

387 
	#SERVO_8_PINMODE
 
	`pöMode
(9,
OUTPUT
);

388 
	#SERVO_8_PIN_HIGH
 
PORTB
 |1<<1;

	)

389 
	#SERVO_8_PIN_LOW
 
PORTB
 &~(1<<1);

	)

393 #i‡
deföed
(
PROMICRO
)

394 #i‡
deföed
(
MICROWII
)

395 
	#A32U4ALLPINS


	)

397 #i‡!
deföed
(
TEENSY20
)

398 
	#LEDPIN_PINMODE


399 
	#LEDPIN_TOGGLE
 
PIND
 |= 1<<5;

400 #i‡!
	`deföed
(
PROMICRO10
)

	)

401 
	#LEDPIN_OFF
 
PORTD
 |(1<<5);

	)

402 
	#LEDPIN_ON
 
PORTD
 &~(1<<5);

	)

404 
	#LEDPIN_OFF
 
PORTD
 &~(1<<5);

	)

405 
	#LEDPIN_ON
 
PORTD
 |(1<<5);

	)

408 
	#LEDPIN_PINMODE
 
DDRD
 |(1<<6);

	)

409 
	#LEDPIN_OFF
 
PORTD
 &~(1<<6);

	)

410 
	#LEDPIN_ON
 
PORTD
 |(1<<6);

	)

411 
	#LEDPIN_TOGGLE
 
PIND
 |= 1<<6;

413 #i‡
	`deföed
(
D8BUZZER
)

	)

414 
	#BUZZERPIN_PINMODE
 
DDRB
 |(1<<4);

	)

415 #i‡
deföed
 
PILOTLAMP


416 
	#PL_PIN_ON
 
PORTB
 |1<<4;

	)

417 
	#PL_PIN_OFF
 
PORTB
 &~(1<<4);

	)

419 
	#BUZZERPIN_ON
 
PORTB
 |1<<4;

	)

420 
	#BUZZERPIN_OFF
 
PORTB
 &~(1<<4);

	)

423 #ñi‡
deföed
(
A32U4ALLPINS
)

424 
	#BUZZERPIN_PINMODE
 
DDRD
 |(1<<4);

	)

425 #i‡
deföed
 
PILOTLAMP


426 
	#PL_PIN_ON
 
PORTD
 |1<<4;

	)

427 
	#PL_PIN_OFF
 
PORTD
 &~(1<<4);

	)

429 
	#BUZZERPIN_ON
 
PORTD
 |1<<4;

	)

430 
	#BUZZERPIN_OFF
 
PORTD
 &~(1<<4);

	)

433 
	#BUZZERPIN_PINMODE
 
DDRD
 |(1<<3);

	)

434 #i‡
deföed
 
PILOTLAMP


435 
	#PL_PIN_ON
 
PORTD
 |1<<3;

	)

436 
	#PL_PIN_OFF
 
PORTD
 &~(1<<3);

	)

438 
	#BUZZERPIN_ON
 
PORTD
 |1<<3;

	)

439 
	#BUZZERPIN_OFF
 
PORTD
 &~(1<<3);

	)

442 
	#POWERPIN_PINMODE


443 
	#POWERPIN_ON


444 
	#POWERPIN_OFF


445 
	#I2C_PULLUPS_ENABLE
 
PORTD
 |= 1<<0; PORTD |= 1<<1;

446 
	#I2C_PULLUPS_DISABLE
 
PORTD
 &~(1<<0); PORTD &~(1<<1);

	)

447 
	#PINMODE_LCD
 
DDRD
 |(1<<2);

	)

448 
	#LCDPIN_OFF
 
PORTD
 &~1;

	)

449 
	#LCDPIN_ON
 
PORTD
 |1;

	)

450 
	#STABLEPIN_PINMODE
 ;

	)

451 
	#STABLEPIN_ON
 ;

	)

452 
	#STABLEPIN_OFF
 ;

	)

453 
	#PPM_PIN_INTERRUPT
 
DDRE
 &~(1 << 6);
PORTE
 |(1 << 6); 
EICRB
 |(1 << 
ISC61
)|(1 << 
ISC60
); 
EIMSK
 |(1 << 
INT6
);

	)

454 #i‡!
deföed
(
RX_SERIAL_PORT
)

455 
	#RX_SERIAL_PORT
 1

	)

457 
	#USB_CDC_TX
 3

	)

458 
	#USB_CDC_RX
 2

	)

461 
	#SOFT_PWM_1_PIN_HIGH
 
PORTD
 |1<<4;

	)

462 
	#SOFT_PWM_1_PIN_LOW
 
PORTD
 &~(1<<4);

	)

463 
	#SOFT_PWM_2_PIN_HIGH
 
PORTF
 |1<<5;

	)

464 
	#SOFT_PWM_2_PIN_LOW
 
PORTF
 &~(1<<5);

	)

465 #i‡!
deföed
(
A32U4ALLPINS
)

466 
	#SOFT_PWM_3_PIN_HIGH
 
PORTF
 |1<<7;

	)

467 
	#SOFT_PWM_3_PIN_LOW
 
PORTF
 &~(1<<7);

	)

468 
	#SOFT_PWM_4_PIN_HIGH
 
PORTF
 |1<<6;

	)

469 
	#SOFT_PWM_4_PIN_LOW
 
PORTF
 &~(1<<6);

	)

470 
	#SW_PWM_P3
 
A1


	)

471 
	#SW_PWM_P4
 
A0


	)

473 
	#SOFT_PWM_3_PIN_HIGH
 
PORTF
 |1<<4;

	)

474 
	#SOFT_PWM_3_PIN_LOW
 
PORTF
 &~(1<<4);

	)

475 
	#SOFT_PWM_4_PIN_HIGH
 
PORTF
 |1<<5;

	)

476 
	#SOFT_PWM_4_PIN_LOW
 
PORTF
 &~(1<<5);

	)

477 
	#SW_PWM_P3
 
A2


	)

478 
	#SW_PWM_P4
 
A3


	)

482 
	#SERVO_1_PINMODE
 
DDRF
 |= (1<<7);

483 
	#SERVO_1_PIN_HIGH
 
PORTF
|1<<7;

	)

484 
	#SERVO_1_PIN_LOW
 
PORTF
 &~(1<<7);

	)

485 
	#SERVO_2_PINMODE
 
DDRF
 |= (1<<6);

486 
	#SERVO_2_PIN_HIGH
 
PORTF
 |1<<6;

	)

487 
	#SERVO_2_PIN_LOW
 
PORTF
 &~(1<<6);

	)

488 
	#SERVO_3_PINMODE
 
DDRF
 |= (1<<5);

489 
	#SERVO_3_PIN_HIGH
 
PORTF
 |1<<5;

	)

490 
	#SERVO_3_PIN_LOW
 
PORTF
 &~(1<<5);

	)

491 #i‡!
deföed
(
A32U4ALLPINS
)

492 
	#SERVO_4_PINMODE
 
DDRD
 |= (1<<4);

493 
	#SERVO_4_PIN_HIGH
 
PORTD
 |1<<4;

	)

494 
	#SERVO_4_PIN_LOW
 
PORTD
 &~(1<<4);

	)

496 
	#SERVO_4_PINMODE
 
DDRF
 |= (1<<4);

497 
	#SERVO_4_PIN_HIGH
 
PORTF
 |1<<4;

	)

498 
	#SERVO_4_PIN_LOW
 
PORTF
 &~(1<<4);

	)

500 
	#SERVO_5_PINMODE
 
DDRC
 |= (1<<6);

501 
	#SERVO_5_PIN_HIGH
 
PORTC
|1<<6;

	)

502 
	#SERVO_5_PIN_LOW
 
PORTC
 &~(1<<6);

	)

503 
	#SERVO_6_PINMODE
 
DDRD
 |= (1<<7);

504 
	#SERVO_6_PIN_HIGH
 
PORTD
 |1<<7;

	)

505 
	#SERVO_6_PIN_LOW
 
PORTD
 &~(1<<7);

	)

506 
	#SERVO_7_PINMODE
 
DDRB
 |= (1<<6);

507 
	#SERVO_7_PIN_HIGH
 
PORTB
 |1<<6;

	)

508 
	#SERVO_7_PIN_LOW
 
PORTB
 &~(1<<6);

	)

509 
	#SERVO_8_PINMODE
 
DDRB
 |= (1<<5);

510 
	#SERVO_8_PIN_HIGH
 
PORTB
 |1<<5;

	)

511 
	#SERVO_8_PIN_LOW
 
PORTB
 &~(1<<5);

	)

514 
	#THROTTLEPIN
 3

	)

515 #i‡
deföed
(
A32U4ALLPINS
)

516 
	#ROLLPIN
 6

	)

517 
	#PITCHPIN
 2

	)

518 
	#YAWPIN
 4

	)

519 
	#AUX1PIN
 5

	)

521 
	#ROLLPIN
 4

	)

522 
	#PITCHPIN
 5

	)

523 
	#YAWPIN
 2

	)

524 
	#AUX1PIN
 6

	)

526 
	#AUX2PIN
 7

	)

527 
	#AUX3PIN
 1

528 
	#AUX4PIN
 0

529 #i‡!
	`deföed
(
RCAUX2PIND17
)

	)

530 
	#PCINT_PIN_COUNT
 4

	)

531 
	#PCINT_RX_BITS
 (1<<1),(1<<2),(1<<3),(1<<4)

	)

533 
	#PCINT_PIN_COUNT
 5

534 
	#PCINT_RX_BITS
 (1<<1),(1<<2),(1<<3),(1<<4),(1<<0)

	)

536 
	#PCINT_RX_PORT
 
PORTB


	)

537 
	#PCINT_RX_MASK
 
PCMSK0


	)

538 
	#PCIR_PORT_BIT
 (1<<0)

	)

539 
	#RX_PC_INTERRUPT
 
PCINT0_ve˘


	)

540 
	#RX_PCINT_PIN_PORT
 
PINB


	)

542 #i‡!
deföed
(
A32U4ALLPINS
Ë&& !deföed(
TEENSY20
)

543 
	#V_BATPIN
 
A3


544 #ñi‡
	`deföed
(
A32U4ALLPINS
)

	)

545 
	#V_BATPIN
 
A4


546 #ñ£

	)

547 
	#V_BATPIN
 
A2


549 #i‡!
	`deföed
(
TEENSY20
)

	)

550 
	#PSENSORPIN
 
A2


551 #ñ£

	)

552 
	#PSENSORPIN
 
A2


555 

	)

557 #i‡
deföed
(
MEGA
)

558 
	#LEDPIN_PINMODE
 
	`pöMode
 (13, 
OUTPUT
);pöModê(30, OUTPUT);

	)

559 
	#LEDPIN_TOGGLE
 
PINB
 |(1<<7); 
PINC
 |(1<<7);

	)

560 
	#LEDPIN_ON
 
PORTB
 |(1<<7); 
PORTC
 |(1<<7);

	)

561 
	#LEDPIN_OFF
 
PORTB
 &~(1<<7);
PORTC
 &~(1<<7);

	)

562 
	#BUZZERPIN_PINMODE
 
	`pöMode
 (32, 
OUTPUT
);

	)

563 #i‡
deföed
 
PILOTLAMP


564 
	#PL_PIN_ON
 
PORTC
 |1<<5;

	)

565 
	#PL_PIN_OFF
 
PORTC
 &~(1<<5);

	)

567 
	#BUZZERPIN_ON
 
PORTC
 |1<<5;

	)

568 
	#BUZZERPIN_OFF
 
PORTC
 &~(1<<5);

	)

571 #i‡!
deföed
(
DISABLE_POWER_PIN
)

572 
	#POWERPIN_PINMODE
 
	`pöMode
 (37, 
OUTPUT
);

	)

573 
	#POWERPIN_ON
 
PORTC
 |1<<0;

	)

574 
	#POWERPIN_OFF
 
PORTC
 &~(1<<0);

	)

576 
	#POWERPIN_PINMODE
 ;

	)

577 
	#POWERPIN_ON
 ;

	)

578 
	#POWERPIN_OFF
 ;

	)

580 
	#I2C_PULLUPS_ENABLE
 
PORTD
 |= 1<<0; PORTD |= 1<<1;

581 
	#I2C_PULLUPS_DISABLE
 
PORTD
 &~(1<<0); PORTD &~(1<<1);

	)

582 
	#PINMODE_LCD
 
	`pöMode
(0, 
OUTPUT
);

	)

583 
	#LCDPIN_OFF
 
PORTE
 &= ~1;

584 
	#LCDPIN_ON
 
PORTE
 |1;

	)

585 
	#STABLEPIN_PINMODE
 
	`pöMode
 (31, 
OUTPUT
);

	)

586 
	#STABLEPIN_ON
 
PORTC
 |1<<6;

	)

587 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<6);

	)

588 #i‡
deföed
(
PPM_ON_THROTTLE
)

590 
	#PPM_PIN_INTERRUPT
 
DDRK
 &~(1<<0); 
PORTK
 |(1<<0); 
PCICR
 |(1<<2); 
PCMSK2
 |(1<<0);

	)

592 
	#PPM_PIN_INTERRUPT
 
	`©èchI¡îru±
(4, 
rxI¡
, 
RISING
);

594 #i‡!
	`deföed
(
RX_SERIAL_PORT
)

	)

595 
	#RX_SERIAL_PORT
 1

	)

598 
	#THROTTLEPIN
 0

599 
	#ROLLPIN
 1

600 
	#PITCHPIN
 2

601 
	#YAWPIN
 3

602 
	#AUX1PIN
 4

603 
	#AUX2PIN
 5

604 
	#AUX3PIN
 6

605 
	#AUX4PIN
 7

606 
	#V_BATPIN
 
A0


607 
	#PSENSORPIN
 
A2


608 
	#PCINT_PIN_COUNT
 8

	)

609 
	#PCINT_RX_BITS
 (1<<2),(1<<4),(1<<5),(1<<6),(1<<7),(1<<0),(1<<1),(1<<3)

	)

610 
	#PCINT_RX_PORT
 
PORTK


	)

611 
	#PCINT_RX_MASK
 
PCMSK2


	)

612 
	#PCIR_PORT_BIT
 (1<<2)

	)

613 
	#RX_PC_INTERRUPT
 
PCINT2_ve˘


	)

614 
	#RX_PCINT_PIN_PORT
 
PINK


	)

616 
	#SERVO_1_PINMODE
 
	`pöMode
(34,
OUTPUT
);pinMode(44,OUTPUT);

617 
	#SERVO_1_PIN_HIGH
 
PORTC
 |1<<3;
PORTL
 |1<<5;

	)

618 
	#SERVO_1_PIN_LOW
 
PORTC
 &~(1<<3);
PORTL
 &~(1<<5);

	)

619 
	#SERVO_2_PINMODE
 
	`pöMode
(35,
OUTPUT
);pinMode(45,OUTPUT);

620 
	#SERVO_2_PIN_HIGH
 
PORTC
 |1<<2;
PORTL
 |1<<4;

	)

621 
	#SERVO_2_PIN_LOW
 
PORTC
 &~(1<<2);
PORTL
 &~(1<<4);

	)

622 
	#SERVO_3_PINMODE
 
	`pöMode
(33,
OUTPUT
);ÖinMode(46,OUTPUT);

623 
	#SERVO_3_PIN_HIGH
 
PORTC
 |1<<4;
PORTL
 |1<<3;

	)

624 
	#SERVO_3_PIN_LOW
 
PORTC
 &~(1<<4);
PORTL
 &~(1<<3);

	)

625 
	#SERVO_4_PINMODE
 
	`pöMode
 (37, 
OUTPUT
);pinMode(7,OUTPUT);

626 
	#SERVO_4_PIN_HIGH
 
PORTC
 |1<<0; 
PORTH
 |1<<4;

	)

627 
	#SERVO_4_PIN_LOW
 
PORTC
 &~(1<<0);
PORTH
 &~(1<<4);

	)

629 
	#SERVO_5_PINMODE
 
	`pöMode
(6,
OUTPUT
);

630 
	#SERVO_5_PIN_HIGH
 
PORTH
 |1<<3;

	)

631 
	#SERVO_5_PIN_LOW
 
PORTH
 &~(1<<3);

	)

632 
	#SERVO_6_PINMODE
 
	`pöMode
(2,
OUTPUT
);

633 
	#SERVO_6_PIN_HIGH
 
PORTE
 |1<<4;

	)

634 
	#SERVO_6_PIN_LOW
 
PORTE
 &~(1<<4);

	)

635 
	#SERVO_7_PINMODE
 
	`pöMode
(5,
OUTPUT
);

636 
	#SERVO_7_PIN_HIGH
 
PORTE
 |1<<3;

	)

637 
	#SERVO_7_PIN_LOW
 
PORTE
 &~(1<<3);

	)

638 
	#SERVO_8_PINMODE
 
	`pöMode
(3,
OUTPUT
);

639 
	#SERVO_8_PIN_HIGH
 
PORTE
 |1<<5;

	)

640 
	#SERVO_8_PIN_LOW
 
PORTE
 &~(1<<5);

	)

647 #i‡
deföed
(
MONGOOSE1_0
)

650 
	#LEDPIN_PINMODE
 
	`pöMode
 (4, 
OUTPUT
);

	)

651 
	#LEDPIN_TOGGLE
 
PIND
 |= 1<<4;

652 
	#LEDPIN_OFF
 
PORTD
 &~(1<<4);

	)

653 
	#LEDPIN_ON
 
PORTD
 |(1<<4);

	)

654 
	#SPEK_BAUD_SET
 
UCSR0A
 = (1<<
U2X0
); 
UBRR0H
 = ((
F_CPU
 / 4 / 115200 -1Ë/ 2Ë>> 8; 
UBRR0L
 = ((F_CPU / 4 / 115200 -1Ë/ 2);

	)

655 
	#RX_SERIAL_PORT
 0

	)

658 
	#BUZZERPIN_PINMODE
 ;

659 
	#BUZZERPIN_ON
 ;

	)

660 
	#BUZZERPIN_OFF
 ;

	)

661 
	#POWERPIN_PINMODE
 ;

662 
	#POWERPIN_ON
 ;

	)

663 
	#POWERPIN_OFF
 ;

	)

664 
	#STABLEPIN_PINMODE
 ;

665 
	#STABLEPIN_ON
 ;

	)

666 
	#STABLEPIN_OFF
 ;

	)

667 
	#PINMODE_LCD
 ;

668 
	#LCDPIN_OFF
 ;

	)

669 
	#LCDPIN_ON
 ;

	)

672 
	#SERVO_4_PINMODE
 ;

673 
	#SERVO_4_PIN_HIGH
 ;

	)

674 
	#SERVO_4_PIN_LOW
 ;

	)

681 #i‡(
PRI_SERVO_FROM
 =1Ë|| (
SEC_SERVO_FROM
 == 1)

682 
	#LAST_LOW
 
SERVO_1_PIN_LOW


	)

683 
	#SERVO_1_HIGH
 
SERVO_1_PIN_HIGH


	)

684 
	#SERVO_1_LOW
 
SERVO_1_PIN_LOW


	)

685 
	#SERVO_1_ARR_POS
 0

	)

687 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

688 #unde‡
LAST_LOW


689 
	#LAST_LOW
 
SERVO_2_PIN_LOW


	)

690 #i‡!
deföed
(
SERVO_1_HIGH
)

691 
	#SERVO_1_HIGH
 
SERVO_2_PIN_HIGH


	)

692 
	#SERVO_1_LOW
 
SERVO_2_PIN_LOW


	)

693 
	#SERVO_1_ARR_POS
 1

	)

695 
	#SERVO_2_HIGH
 
SERVO_2_PIN_HIGH


	)

696 
	#SERVO_2_LOW
 
SERVO_2_PIN_LOW


	)

697 
	#SERVO_2_ARR_POS
 1

	)

700 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

701 #unde‡
LAST_LOW


702 
	#LAST_LOW
 
SERVO_3_PIN_LOW


	)

703 #i‡!
deföed
(
SERVO_1_HIGH
)

704 
	#SERVO_1_HIGH
 
SERVO_3_PIN_HIGH


	)

705 
	#SERVO_1_LOW
 
SERVO_3_PIN_LOW


	)

706 
	#SERVO_1_ARR_POS
 2

	)

707 #ñi‡!
deföed
(
SERVO_2_HIGH
)

708 
	#SERVO_2_HIGH
 
SERVO_3_PIN_HIGH


	)

709 
	#SERVO_2_LOW
 
SERVO_3_PIN_LOW


	)

710 
	#SERVO_2_ARR_POS
 2

	)

712 
	#SERVO_3_HIGH
 
SERVO_3_PIN_HIGH


	)

713 
	#SERVO_3_LOW
 
SERVO_3_PIN_LOW


	)

714 
	#SERVO_3_ARR_POS
 2

	)

717 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

718 #unde‡
LAST_LOW


719 
	#LAST_LOW
 
SERVO_4_PIN_LOW


	)

720 #i‡!
deföed
(
SERVO_1_HIGH
)

721 
	#SERVO_1_HIGH
 
SERVO_4_PIN_HIGH


	)

722 
	#SERVO_1_LOW
 
SERVO_4_PIN_LOW


	)

723 
	#SERVO_1_ARR_POS
 3

	)

724 #ñi‡!
deföed
(
SERVO_2_HIGH
)

725 
	#SERVO_2_HIGH
 
SERVO_4_PIN_HIGH


	)

726 
	#SERVO_2_LOW
 
SERVO_4_PIN_LOW


	)

727 
	#SERVO_2_ARR_POS
 3

	)

728 #ñi‡!
deföed
(
SERVO_3_HIGH
)

729 
	#SERVO_3_HIGH
 
SERVO_4_PIN_HIGH


	)

730 
	#SERVO_3_LOW
 
SERVO_4_PIN_LOW


	)

731 
	#SERVO_3_ARR_POS
 3

	)

733 
	#SERVO_4_HIGH
 
SERVO_4_PIN_HIGH


	)

734 
	#SERVO_4_LOW
 
SERVO_4_PIN_LOW


	)

735 
	#SERVO_4_ARR_POS
 3

	)

738 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

739 #unde‡
LAST_LOW


740 
	#LAST_LOW
 
SERVO_5_PIN_LOW


	)

741 #i‡!
deföed
(
SERVO_1_HIGH
)

742 
	#SERVO_1_HIGH
 
SERVO_5_PIN_HIGH


	)

743 
	#SERVO_1_LOW
 
SERVO_5_PIN_LOW


	)

744 
	#SERVO_1_ARR_POS
 4

	)

745 #ñi‡!
deföed
(
SERVO_2_HIGH
)

746 
	#SERVO_2_HIGH
 
SERVO_5_PIN_HIGH


	)

747 
	#SERVO_2_LOW
 
SERVO_5_PIN_LOW


	)

748 
	#SERVO_2_ARR_POS
 4

	)

749 #ñi‡!
deföed
(
SERVO_3_HIGH
)

750 
	#SERVO_3_HIGH
 
SERVO_5_PIN_HIGH


	)

751 
	#SERVO_3_LOW
 
SERVO_5_PIN_LOW


	)

752 
	#SERVO_3_ARR_POS
 4

	)

753 #ñi‡!
deföed
(
SERVO_4_HIGH
)

754 
	#SERVO_4_HIGH
 
SERVO_5_PIN_HIGH


	)

755 
	#SERVO_4_LOW
 
SERVO_5_PIN_LOW


	)

756 
	#SERVO_4_ARR_POS
 4

	)

758 
	#SERVO_5_HIGH
 
SERVO_5_PIN_HIGH


	)

759 
	#SERVO_5_LOW
 
SERVO_5_PIN_LOW


	)

760 
	#SERVO_5_ARR_POS
 4

	)

763 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

764 #unde‡
LAST_LOW


765 
	#LAST_LOW
 
SERVO_6_PIN_LOW


	)

766 #i‡!
deföed
(
SERVO_1_HIGH
)

767 
	#SERVO_1_HIGH
 
SERVO_6_PIN_HIGH


	)

768 
	#SERVO_1_LOW
 
SERVO_6_PIN_LOW


	)

769 
	#SERVO_1_ARR_POS
 5

	)

770 #ñi‡!
deföed
(
SERVO_2_HIGH
)

771 
	#SERVO_2_HIGH
 
SERVO_6_PIN_HIGH


	)

772 
	#SERVO_2_LOW
 
SERVO_6_PIN_LOW


	)

773 
	#SERVO_2_ARR_POS
 5

	)

774 #ñi‡!
deföed
(
SERVO_3_HIGH
)

775 
	#SERVO_3_HIGH
 
SERVO_6_PIN_HIGH


	)

776 
	#SERVO_3_LOW
 
SERVO_6_PIN_LOW


	)

777 
	#SERVO_3_ARR_POS
 5

	)

778 #ñi‡!
deföed
(
SERVO_4_HIGH
)

779 
	#SERVO_4_HIGH
 
SERVO_6_PIN_HIGH


	)

780 
	#SERVO_4_LOW
 
SERVO_6_PIN_LOW


	)

781 
	#SERVO_4_ARR_POS
 5

	)

782 #ñi‡!
deföed
(
SERVO_5_HIGH
)

783 
	#SERVO_5_HIGH
 
SERVO_6_PIN_HIGH


	)

784 
	#SERVO_5_LOW
 
SERVO_6_PIN_LOW


	)

785 
	#SERVO_5_ARR_POS
 5

	)

787 
	#SERVO_6_HIGH
 
SERVO_6_PIN_HIGH


	)

788 
	#SERVO_6_LOW
 
SERVO_6_PIN_LOW


	)

789 
	#SERVO_6_ARR_POS
 5

	)

792 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

793 #unde‡
LAST_LOW


794 
	#LAST_LOW
 
SERVO_7_PIN_LOW


	)

795 #i‡!
deföed
(
SERVO_1_HIGH
)

796 
	#SERVO_1_HIGH
 
SERVO_7_PIN_HIGH


	)

797 
	#SERVO_1_LOW
 
SERVO_7_PIN_LOW


	)

798 
	#SERVO_1_ARR_POS
 6

	)

799 #ñi‡!
deföed
(
SERVO_2_HIGH
)

800 
	#SERVO_2_HIGH
 
SERVO_7_PIN_HIGH


	)

801 
	#SERVO_2_LOW
 
SERVO_7_PIN_LOW


	)

802 
	#SERVO_2_ARR_POS
 6

	)

803 #ñi‡!
deföed
(
SERVO_3_HIGH
)

804 
	#SERVO_3_HIGH
 
SERVO_7_PIN_HIGH


	)

805 
	#SERVO_3_LOW
 
SERVO_7_PIN_LOW


	)

806 
	#SERVO_3_ARR_POS
 6

	)

807 #ñi‡!
deföed
(
SERVO_4_HIGH
)

808 
	#SERVO_4_HIGH
 
SERVO_7_PIN_HIGH


	)

809 
	#SERVO_4_LOW
 
SERVO_7_PIN_LOW


	)

810 
	#SERVO_4_ARR_POS
 6

	)

811 #ñi‡!
deföed
(
SERVO_5_HIGH
)

812 
	#SERVO_5_HIGH
 
SERVO_7_PIN_HIGH


	)

813 
	#SERVO_5_LOW
 
SERVO_7_PIN_LOW


	)

814 
	#SERVO_5_ARR_POS
 6

	)

815 #ñi‡!
deföed
(
SERVO_6_HIGH
)

816 
	#SERVO_6_HIGH
 
SERVO_7_PIN_HIGH


	)

817 
	#SERVO_6_LOW
 
SERVO_7_PIN_LOW


	)

818 
	#SERVO_6_ARR_POS
 6

	)

820 
	#SERVO_7_HIGH
 
SERVO_7_PIN_HIGH


	)

821 
	#SERVO_7_LOW
 
SERVO_7_PIN_LOW


	)

822 
	#SERVO_7_ARR_POS
 6

	)

825 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

826 #unde‡
LAST_LOW


827 
	#LAST_LOW
 
SERVO_8_PIN_LOW


	)

828 #i‡!
deföed
(
SERVO_1_HIGH
)

829 
	#SERVO_1_HIGH
 
SERVO_8_PIN_HIGH


	)

830 
	#SERVO_1_LOW
 
SERVO_8_PIN_LOW


	)

831 
	#SERVO_1_ARR_POS
 7

	)

832 #ñi‡!
deföed
(
SERVO_2_HIGH
)

833 
	#SERVO_2_HIGH
 
SERVO_8_PIN_HIGH


	)

834 
	#SERVO_2_LOW
 
SERVO_8_PIN_LOW


	)

835 
	#SERVO_2_ARR_POS
 7

	)

836 #ñi‡!
deföed
(
SERVO_3_HIGH
)

837 
	#SERVO_3_HIGH
 
SERVO_8_PIN_HIGH


	)

838 
	#SERVO_3_LOW
 
SERVO_8_PIN_LOW


	)

839 
	#SERVO_3_ARR_POS
 7

	)

840 #ñi‡!
deföed
(
SERVO_4_HIGH
)

841 
	#SERVO_4_HIGH
 
SERVO_8_PIN_HIGH


	)

842 
	#SERVO_4_LOW
 
SERVO_8_PIN_LOW


	)

843 
	#SERVO_4_ARR_POS
 7

	)

844 #ñi‡!
deföed
(
SERVO_5_HIGH
)

845 
	#SERVO_5_HIGH
 
SERVO_8_PIN_HIGH


	)

846 
	#SERVO_5_LOW
 
SERVO_8_PIN_LOW


	)

847 
	#SERVO_5_ARR_POS
 7

	)

848 #ñi‡!
deföed
(
SERVO_6_HIGH
)

849 
	#SERVO_6_HIGH
 
SERVO_8_PIN_HIGH


	)

850 
	#SERVO_6_LOW
 
SERVO_8_PIN_LOW


	)

851 
	#SERVO_6_ARR_POS
 7

	)

852 #ñi‡!
deföed
(
SERVO_7_HIGH
)

853 
	#SERVO_7_HIGH
 
SERVO_8_PIN_HIGH


	)

854 
	#SERVO_7_LOW
 
SERVO_8_PIN_LOW


	)

855 
	#SERVO_7_ARR_POS
 7

	)

857 
	#SERVO_8_HIGH
 
SERVO_8_PIN_HIGH


	)

858 
	#SERVO_8_LOW
 
SERVO_8_PIN_LOW


	)

859 
	#SERVO_8_ARR_POS
 7

	)

863 #i‡–
deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
ËË|| (deföed(
PROMICRO
Ë&& deföed(
A32U4_4_HW_PWM_SERVOS
))

864 #unde‡
SERVO_1_HIGH


865 
	#HW_PWM_SERVOS


	)

875 #i‡
deföed
(
FFIMUv1
)

876 
	#ITG3200


	)

877 
	#BMA180


	)

878 
	#BMP085


	)

879 
	#HMC5843


	)

880 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

881 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

882 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

885 #i‡
deföed
(
FFIMUv2
)

886 
	#ITG3200


	)

887 
	#BMA180


	)

888 
	#BMP085


	)

889 
	#HMC5883


	)

890 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

891 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

892 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

895 #i‡
deföed
(
FREEIMUv1
)

896 
	#ITG3200


	)

897 
	#ADXL345


	)

898 
	#HMC5843


	)

899 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

900 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

901 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

902 
	#ADXL345_ADDRESS
 0x53

	)

903 #unde‡
INTERNAL_I2C_PULLUPS


906 #i‡
deföed
(
FREEIMUv03
)

907 
	#ITG3200


	)

908 
	#ADXL345


909 
	#HMC5883


	)

910 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

911 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

912 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

913 
	#ADXL345_ADDRESS
 0x53

	)

914 #unde‡
INTERNAL_I2C_PULLUPS


917 #i‡
deföed
(
FREEIMUv035
Ë|| deföed(
FREEIMUv035_MS
Ë|| deföed(
FREEIMUv035_BMP
)

918 
	#ITG3200


	)

919 
	#BMA180


	)

920 
	#HMC5883


	)

921 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

922 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

923 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

924 #unde‡
INTERNAL_I2C_PULLUPS


925 #i‡
deföed
(
FREEIMUv035_MS
)

926 
	#MS561101BA


	)

927 #ñi‡
deföed
(
FREEIMUv035_BMP
)

928 
	#BMP085


	)

932 #i‡
deföed
(
FREEIMUv04
)

933 
	#FREEIMUv043


	)

936 #i‡
deföed
(
Mu…iWiiMega
)

937 
	#FREEIMUv043


	)

940 #i‡
deföed
(
FREEIMUv043
Ë|| deföed(
MICROWII
)

941 
	#MPU6050


	)

942 
	#HMC5883


	)

943 
	#MS561101BA


	)

944 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

945 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

946 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

947 
	#MPU6050_I2C_AUX_MASTER


948 #unde‡
INTERNAL_I2C_PULLUPS


	)

951 #i‡
deföed
(
NANOWII
)

952 
	#MPU6050


	)

953 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

954 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

955 #unde‡
INTERNAL_I2C_PULLUPS


957 #unde‡
SOFT_PWM_3_PIN_HIGH


958 #unde‡
SOFT_PWM_3_PIN_LOW


959 #unde‡
SOFT_PWM_4_PIN_HIGH


960 #unde‡
SOFT_PWM_4_PIN_LOW


961 #unde‡
SW_PWM_P3


962 #unde‡
SW_PWM_P4


963 
	#SOFT_PWM_3_PIN_HIGH
 
PORTD
 |1<<4;

	)

964 
	#SOFT_PWM_3_PIN_LOW
 
PORTD
 &~(1<<4);

	)

965 
	#SOFT_PWM_4_PIN_HIGH
 
PORTF
 |1<<5;

	)

966 
	#SOFT_PWM_4_PIN_LOW
 
PORTF
 &~(1<<5);

	)

967 
	#SW_PWM_P3
 4

	)

968 
	#SW_PWM_P4
 
A2


	)

969 
	#HWPWM6


	)

971 #unde‡
SERVO_3_PINMODE


972 #unde‡
SERVO_3_PIN_HIGH


973 #unde‡
SERVO_3_PIN_LOW


974 #unde‡
SERVO_4_PINMODE


975 #unde‡
SERVO_4_PIN_HIGH


976 #unde‡
SERVO_4_PIN_LOW


977 
	#SERVO_3_PINMODE
 
DDRC
 |= (1<<7);

978 
	#SERVO_3_PIN_HIGH
 
PORTC
 |1<<7;

	)

979 
	#SERVO_3_PIN_LOW
 
PORTC
 &~(1<<7);

	)

980 
	#SERVO_4_PINMODE
 
DDRB
 |= (1<<7);

981 
	#SERVO_4_PIN_HIGH
 
PORTB
 |1<<7;

	)

982 
	#SERVO_4_PIN_LOW
 
PORTB
 &~(1<<7);

	)

984 #i‡!
deföed
(
OCTOX8
Ë&& !deföed(
OCTOFLATP
Ë&& !deföed(
OCTOFLATX
)

985 #unde‡
LEDPIN_PINMODE


986 #unde‡
LEDPIN_TOGGLE


987 #unde‡
LEDPIN_OFF


988 #unde‡
LEDPIN_ON


989 
	#LEDPIN_PINMODE
 
DDRD
 |= (1<<4);

990 
	#LEDPIN_TOGGLE
 
PIND
 |= (1<<5)|(1<<4);

991 
	#LEDPIN_OFF
 
PORTD
 |(1<<5); PORTD &~(1<<4);

	)

992 
	#LEDPIN_ON
 
PORTD
 &~(1<<5); PORTD |(1<<4);

	)

996 #i‡
deföed
(
PIPO
)

997 
	#L3G4200D


	)

998 
	#ADXL345


	)

999 
	#HMC5883


	)

1000 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1001 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1002 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = Z;}

	)

1003 
	#ADXL345_ADDRESS
 0x53

	)

1006 #i‡
deföed
(
QUADRINO
)

1007 
	#ITG3200


	)

1008 
	#BMA180


	)

1009 
	#BMP085


	)

1010 
	#HMC5883


	)

1011 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1012 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1013 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1016 #i‡
deföed
(
QUADRINO_ZOOM
)

1017 
	#ITG3200


	)

1018 
	#BMA180


	)

1019 
	#BMP085


	)

1020 
	#HMC5883


	)

1021 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1022 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1023 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1024 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1025 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1026 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1029 #i‡
deföed
(
QUADRINO_ZOOM_MS
)

1030 
	#ITG3200


	)

1031 
	#BMA180


	)

1032 
	#MS561101BA


	)

1033 
	#HMC5883


	)

1034 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1035 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1036 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1037 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1038 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1039 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1042 #i‡
deföed
(
ALLINONE
)

1043 
	#ITG3200


	)

1044 
	#BMA180


	)

1045 
	#BMP085


	)

1046 
	#HMC5883


	)

1047 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1048 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1049 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1050 
	#BMA180_ADDRESS
 0x41

	)

1053 #i‡
deföed
(
AEROQUADSHIELDv2
)

1054 
	#ITG3200


	)

1055 
	#BMA180


	)

1056 
	#BMP085


	)

1057 
	#HMC5843


	)

1058 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1059 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1060 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1061 
	#GYRO_ADDRESS
 0X69

	)

1064 #i‡
deföed
(
ATAVRSBIN1
)

1065 
	#ITG3200


	)

1066 
	#BMA020


1067 
	#AK8975


	)

1068 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1069 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1070 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = Z;}

	)

1073 #i‡
deföed
(
SIRIUS
)

1074 
	#ITG3200


	)

1075 
	#BMA180


	)

1076 
	#BMP085


	)

1077 
	#HMC5883


	)

1078 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1079 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1080 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1083 #i‡
deföed
(
SIRIUSGPS
)

1084 
	#ITG3200


	)

1085 
	#BMA180


	)

1086 
	#BMP085


	)

1087 
	#HMC5883


	)

1088 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1089 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1090 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1093 #i‡
deföed
(
SIRIUS600
)

1094 
	#WMP


	)

1095 
	#BMA180


	)

1096 
	#BMP085


	)

1097 
	#HMC5883


	)

1098 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1099 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1102 #i‡
deföed
(
SIRIUS_AIR
)

1103 
	#MPU6050


	)

1104 
	#BMP085


	)

1105 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1106 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1107 #unde‡
INTERNAL_I2C_PULLUPS


1108 
	#HWPWM6


	)

1111 #i‡
deföed
(
SIRIUS_AIR_GPS
)

1112 
	#MPU6050


	)

1113 
	#BMP085


	)

1114 
	#HMC5883


	)

1115 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1116 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1117 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

1118 #unde‡
INTERNAL_I2C_PULLUPS


	)

1119 
	#HWPWM6


	)

1122 #i‡
deföed
(
SIRIUS_MEGAv5_OSD
)

1123 
	#ITG3050


	)

1124 
	#BMA280


	)

1125 
	#MS561101BA


	)

1126 
	#HMC5883


	)

1127 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1128 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1129 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1130 #unde‡
INTERNAL_I2C_PULLUPS


1133 #i‡
deföed
(
MINIWII
)

1134 
	#ITG3200


	)

1135 
	#BMA180


	)

1136 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1137 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1140 #i‡
deföed
(
CITRUSv2_1
)

1141 
	#ITG3200


	)

1142 
	#ADXL345


	)

1143 
	#BMP085


	)

1144 
	#HMC5883


	)

1145 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1146 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1147 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1148 #unde‡
INTERNAL_I2C_PULLUPS


1151 #i‡
deföed
(
CHERRY6DOFv1_0
)

1152 
	#MPU6050


	)

1153 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1154 
	#GYRO_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1155 #unde‡
INTERNAL_I2C_PULLUPS


1158 #i‡
deföed
(
DROTEK_10DOF
Ë|| deföed(
DROTEK_10DOF_MS
)

1159 
	#ITG3200


	)

1160 
	#BMA180


	)

1161 
	#HMC5883


	)

1162 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1163 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1164 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1165 
	#GYRO_ADDRESS
 0X69

	)

1166 #i‡
deföed
(
DROTEK_10DOF_MS
)

1167 
	#MS561101BA


	)

1168 #ñi‡
deföed
(
DROTEK_10DOF
)

1169 
	#BMP085


	)

1173 #i‡
deföed
(
DROTEK_6DOFv2
)

1174 
	#ITG3200


	)

1175 
	#BMA180


	)

1176 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1177 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1178 
	#GYRO_ADDRESS
 0X69

	)

1181 #i‡
deföed
(
DROTEK_6DOF_MPU
)

1182 
	#MPU6050


	)

1183 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1184 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1185 
	#MPU6050_ADDRESS
 0x69

	)

1186 #unde‡
INTERNAL_I2C_PULLUPS


1189 #i‡
deföed
(
DROTEK_10DOF_MPU
)

1190 
	#MPU6050


	)

1191 
	#HMC5883


	)

1192 
	#MS561101BA


	)

1193 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1194 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1195 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = X; imu.magADC[
YAW
] = -Z;}

	)

1196 
	#MPU6050_ADDRESS
 0X69

	)

1197 
	#MPU6050_I2C_AUX_MASTER


1198 #unde‡
INTERNAL_I2C_PULLUPS


	)

1201 #i‡
deföed
(
FLYDUINO_MPU
)

1202 
	#MPU6050


	)

1203 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1204 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1207 #i‡
deföed
(
MONGOOSE1_0
)

1208 
	#ITG3200


	)

1209 
	#ADXL345


	)

1210 
	#BMP085


	)

1211 
	#HMC5883


	)

1212 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1213 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1214 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = -Y; imu.magADC[
YAW
] = -Z;}

	)

1215 
	#ADXL345_ADDRESS
 0x53

	)

1216 #unde‡
INTERNAL_I2C_PULLUPS


1219 #i‡
deföed
(
CRIUS_LITE
)

1220 
	#ITG3200


	)

1221 
	#ADXL345


	)

1222 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1223 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1226 #i‡
deföed
(
CRIUS_SE
)

1227 
	#ITG3200


	)

1228 
	#BMA180


	)

1229 
	#HMC5883


	)

1230 
	#BMP085


	)

1231 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1232 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1233 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1236 #i‡
deföed
(
CRIUS_SE_v2_0
)

1237 
	#MPU6050


	)

1238 
	#HMC5883


	)

1239 
	#BMP085


	)

1240 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1241 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1242 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1245 #i‡
deföed
(
BOARD_PROTO_1
)

1246 
	#MPU6050


	)

1247 
	#HMC5883


	)

1248 
	#MS561101BA


	)

1249 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1250 
	#GYRO_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1251 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1252 
	#MS561101BA_ADDRESS
 0x76

	)

1253 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1254 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1255 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1258 #i‡
deföed
(
BOARD_PROTO_2
)

1259 
	#MPU6050


	)

1260 
	#MAG3110


	)

1261 
	#MS561101BA


	)

1262 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1263 
	#GYRO_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1264 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1265 
	#MPU6050_I2C_AUX_MASTER


	)

1266 
	#MS561101BA_ADDRESS
 0x76

	)

1267 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1268 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1269 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1272 #i‡
deföed
(
GY_80
)

1273 
	#L3G4200D


	)

1274 
	#ADXL345


	)

1275 
	#HMC5883


	)

1276 
	#BMP085


	)

1277 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1278 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1279 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1280 #unde‡
INTERNAL_I2C_PULLUPS


1281 
	#ADXL345_ADDRESS
 0x53

	)

1284 #i‡
deföed
(
GY_85
)

1285 
	#ITG3200


	)

1286 
	#ADXL345


	)

1287 
	#HMC5883


	)

1288 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1289 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1290 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1291 #unde‡
INTERNAL_I2C_PULLUPS


1292 
	#ADXL345_ADDRESS
 0x53

	)

1295 #i‡
deföed
(
GY_86
)

1296 
	#MPU6050


	)

1297 
	#HMC5883


	)

1298 
	#MS561101BA


	)

1299 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1300 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1301 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1302 
	#MPU6050_I2C_AUX_MASTER


1303 #unde‡
INTERNAL_I2C_PULLUPS


	)

1306 #i‡
deföed
(
GY_88
)

1307 
	#MPU6050


	)

1308 
	#HMC5883


	)

1309 
	#BMP085


	)

1310 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1311 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1312 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1313 
	#MPU6050_I2C_AUX_MASTER


1314 #unde‡
INTERNAL_I2C_PULLUPS


	)

1317 #i‡
deföed
(
GY_521
)

1318 
	#MPU6050


	)

1319 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1320 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = Z;}

	)

1321 #unde‡
INTERNAL_I2C_PULLUPS


1324 #i‡
deföed
(
INNOVWORKS_10DOF
)

1325 
	#ITG3200


	)

1326 
	#BMA180


	)

1327 
	#BMP085


	)

1328 
	#HMC5883


	)

1329 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1330 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1331 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.imu.[
YAW
] = -Z;}

	)

1332 #unde‡
INTERNAL_I2C_PULLUPS


1335 #i‡
deföed
(
INNOVWORKS_6DOF
)

1336 
	#ITG3200


	)

1337 
	#BMA180


	)

1338 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1339 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1340 #unde‡
INTERNAL_I2C_PULLUPS


1343 #i‡
deföed
(
PROTO_DIY
)

1344 
	#ITG3200


	)

1345 
	#BMA180


	)

1346 
	#HMC5883


	)

1347 
	#MS561101BA


	)

1348 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1349 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1350 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1351 #unde‡
INTERNAL_I2C_PULLUPS


1352 
	#STABLEPIN_ON
 
PORTC
 &~(1<<6);

	)

1353 
	#STABLEPIN_OFF
 
PORTC
 |1<<6;

	)

1356 #i‡
deföed
(
IOI_MINI_MULTIWII
)

1357 
	#ITG3200


	)

1358 
	#BMA180


	)

1359 
	#HMC5883


	)

1360 
	#BMP085


	)

1361 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1362 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1363 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = X; imu.magADC[
YAW
] = -Z;}

	)

1366 #i‡
deföed
(
Bobs_6DOF_V1
)

1367 
	#ITG3200


	)

1368 
	#BMA180


	)

1369 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1370 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1371 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1372 #unde‡
INTERNAL_I2C_PULLUPS


1375 #i‡
deföed
(
Bobs_9DOF_V1
)

1376 
	#ITG3200


	)

1377 
	#BMA180


	)

1378 
	#BMP085


	)

1379 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1380 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1381 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1382 #unde‡
INTERNAL_I2C_PULLUPS


1385 #i‡
deföed
(
Bobs_10DOF_BMP_V1
)

1386 
	#ITG3200


	)

1387 
	#BMA180


	)

1388 
	#BMP085


1389 
	#HMC5883


	)

1390 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1391 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1392 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1393 #unde‡
INTERNAL_IC2_PULLUPS


1396 #i‡
deföed
(
HK_Mu…iWii_SE_V2
 )

1397 
	#MPU6050


	)

1398 
	#HMC5883


	)

1399 
	#BMP085


	)

1400 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1401 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
){
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1402 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1403 
	#MPU6050_EN_I2C_BYPASS


1404 #unde‡
INTERNAL_I2C_PULLUPS


	)

1407 #i‡
deföed
(
HK_Mu…iWii_328P
 )

1408 
	#ITG3200


	)

1409 
	#BMA180


	)

1410 
	#HMC5883


	)

1411 
	#BMP085


	)

1412 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1413 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
){
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1414 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1415 #unde‡
INTERNAL_I2C_PULLUPS


1418 #i‡
deföed
(
CRIUS_AIO_PRO
)

1419 
	#MPU6050


	)

1420 
	#HMC5883


	)

1421 
	#MS561101BA


	)

1422 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1423 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1424 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1425 
	#MPU6050_I2C_AUX_MASTER


1426 #unde‡
INTERNAL_I2C_PULLUPS


	)

1427 
	#I2C_SPEED
 400000L

1430 
	#SERVO_1_PINMODE
 
	`pöMode
(44,
OUTPUT
);

1431 
	#SERVO_1_PIN_HIGH
 
PORTL
 |1<<5;

	)

1432 
	#SERVO_1_PIN_LOW
 
PORTL
 &~(1<<5);

	)

1433 
	#SERVO_2_PINMODE
 
	`pöMode
(45,
OUTPUT
);

1434 
	#SERVO_2_PIN_HIGH
 
PORTL
 |1<<4;

	)

1435 
	#SERVO_2_PIN_LOW
 
PORTL
 &~(1<<4);

	)

1436 
	#SERVO_3_PINMODE
 
	`pöMode
(46,
OUTPUT
);

1437 
	#SERVO_3_PIN_HIGH
 
PORTL
 |1<<3;

	)

1438 
	#SERVO_3_PIN_LOW
 
PORTL
 &~(1<<3);

	)

1441 #i‡
deföed
(
LADYBIRD
)

1442 
	#MPU6050


	)

1443 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1444 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1445 #unde‡
INTERNAL_I2C_PULLUPS


1446 
	#MINTHROTTLE
 1050

	)

1447 
	#MAXTHROTTLE
 2000

	)

1448 
	#EXT_MOTOR_32KHZ


	)

1449 
	#VBAT


	)

1450 
	#VBATSCALE
 54

	)

1451 
	#VBATLEVEL_WARN1
 10

	)

1452 
	#VBATLEVEL_WARN2
 10

	)

1453 
	#VBATLEVEL_CRIT
 10

	)

1454 
	#NO_VBAT
 10

	)

1455 
	#MOTOR_STOP


	)

1458 #i‡
deföed
(
MEGAWAP_V2_STD
)

1459 
	#ITG3200


	)

1460 
	#BMA180


	)

1461 
	#HMC5883


	)

1462 
	#BMP085


	)

1463 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1464 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1465 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1468 #i‡
deföed
(
MEGAWAP_V2_ADV
)

1469 
	#MPU6050


	)

1470 
	#HMC5883


	)

1471 
	#MS561101BA


	)

1472 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1473 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1474 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1475 
	#MPU6050_EN_I2C_BYPASS


1476 #unde‡
INTERNAL_I2C_PULLUPS


	)

1479 #i‡
deföed
(
RCNë_FC_GPS
)

1480 
	#RCNë_FC


	)

1481 
	#HMC5883


	)

1482 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1483 
	#MPU6050_I2C_AUX_MASTER


1484 #unde‡
INTERNAL_I2C_PULLUPS


	)

1485 
	#GPS_SERIAL
 2

	)

1486 
	#GPS_BAUD
 115200

	)

1487 
	#UBLOX


	)

1490 #i‡
deföed
(
RCNë_FC
)

1491 
	#MPU6050


	)

1492 
	#MS561101BA


	)

1493 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1494 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1495 #unde‡
INTERNAL_I2C_PULLUPS


1497 
	#SERVO_1_PINMODE
 
	`pöMode
(40,
OUTPUT
);

1498 
	#SERVO_1_PIN_HIGH
 
PORTL
 |1<<5;

	)

1499 
	#SERVO_1_PIN_LOW
 
PORTL
 &~(1<<5);

	)

1500 
	#SERVO_2_PINMODE
 
	`pöMode
(39,
OUTPUT
);

1501 
	#SERVO_2_PIN_HIGH
 
PORTL
 |1<<4;

	)

1502 
	#SERVO_2_PIN_LOW
 
PORTL
 &~(1<<4);

	)

1503 
	#SERVO_3_PINMODE
 
	`pöMode
(38,
OUTPUT
);

1504 
	#SERVO_3_PIN_HIGH
 
PORTL
 |1<<3;

	)

1505 
	#SERVO_3_PIN_LOW
 
PORTL
 &~(1<<3);

	)

1508 #i‡
deföed
(
FLYDU_ULTRA
)

1509 
	#ITG3200


	)

1510 
	#MMA8451Q


	)

1511 
	#MS561101BA


	)

1512 
	#MAG3110


	)

1514 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1515 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1516 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = X; imu.magADC[
YAW
] = Z;}

	)

1518 
	#GPS_SERIAL
 2

	)

1519 
	#GPS_BAUD
 57600

	)

1520 
	#MTK_BINARY19


	)

1521 
	#INIT_MTK_GPS


	)

1524 #i‡
deföed
(
Mu…iWii_32U4_SE
)

1525 
	#MPU6050


	)

1526 
	#HMC5883


	)

1527 
	#MPU6050_I2C_AUX_MASTER


1528 
	#MS561101BA


	)

1529 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1530 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1531 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1532 #unde‡
INTERNAL_I2C_PULLUPS


1535 #i‡
deföed
(
Mu…iWii_32U4_SE_no_b¨o
)

1536 
	#MPU6050


	)

1537 
	#HMC5883


	)

1538 
	#MPU6050_I2C_AUX_MASTER


1539 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1540 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1541 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1542 #unde‡
INTERNAL_I2C_PULLUPS


1545 #i‡
deföed
(
Flyduöo9DOF
)

1546 
	#MPU6050


	)

1547 
	#HMC5883


	)

1548 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1549 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1550 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1551 
	#MPU6050_EN_I2C_BYPASS


1552 #unde‡
INTERNAL_I2C_PULLUPS


	)

1555 #i‡
deföed
(
N™o_Pœ√
)

1556 
	#LSM330


	)

1557 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1558 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1559 #unde‡
INTERNAL_I2C_PULLUPS


1562 #i‡
deföed
(
OPENLRSv2MULTI
)

1563 
	#ITG3200


	)

1564 
	#ADXL345


	)

1565 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1566 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1567 
	#ADXL345_ADDRESS
 0x53

	)

1569 
	#SDO_pö
 
A0


	)

1570 
	#SDI_pö
 
A1


	)

1571 
	#SCLK_pö
 
A2


	)

1572 
	#IRQ_pö
 2

	)

1573 
	#nSñ_pö
 4

	)

1574 
	#IRQ_öãºu±
 0

	)

1576 
	#nIRQ_1
 (
PIND
 & 0x04)==0x04

1577 
	#nIRQ_0
 (
PIND
 & 0x04)==0x00

1578 

	)

1579 
	#nSEL_⁄
 
PORTD
 |= 0x10

1580 
	#nSEL_off
 
PORTD
 &= 0xEF

1581 

	)

1582 
	#SCK_⁄
 
PORTC
 |= 0x04

1583 
	#SCK_off
 
PORTC
 &= 0xFB

1584 

	)

1585 
	#SDI_⁄
 
PORTC
 |= 0x02

1586 
	#SDI_off
 
PORTC
 &= 0xFD

1587 

	)

1588 
	#SDO_1
 (
PINC
 & 0x01) == 0x01

1589 
	#SDO_0
 (
PINC
 & 0x01) == 0x00

1590 

	)

1592 
	#GREEN_LED_pö
 13

	)

1593 
	#RED_LED_pö
 
A3


	)

1595 
	#Red_LED_ON
 
PORTC
 |
	`_BV
(3);

	)

1596 
	#Red_LED_OFF
 
PORTC
 &~
	`_BV
(3);

	)

1598 
	#Gªí_LED_ON
 
PORTB
 |
	`_BV
(5);

	)

1599 
	#Gªí_LED_OFF
 
PORTB
 &~
	`_BV
(5);

	)

1601 
	#NOP
(Ë
__asm__
 
	`__vﬁ©ûe__
("n›")

	)

1603 
	#RF22B_PWRSTATE_READY
 01

	)

1604 
	#RF22B_PWRSTATE_TX
 0x09

	)

1605 
	#RF22B_PWRSTATE_RX
 05

	)

1606 
	#RF22B_Rx_∑ckë_ª˚ived_öãºu±
 0x02

	)

1607 
	#RF22B_PACKET_SENT_INTERRUPT
 04

	)

1608 
	#RF22B_PWRSTATE_POWERDOWN
 00

	)

1612 #i‡
deföed
(
DESQUARED6DOFV2GO
)

1613 
	#ITG3200


	)

1614 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1615 #unde‡
INTERNAL_I2C_PULLUPS


1618 #i‡
deföed
(
DESQUARED6DOFV4
)

1619 
	#MPU6050


	)

1620 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1621 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1622 #unde‡
INTERNAL_I2C_PULLUPS


1625 #i‡
deföed
(
OSEPPGYRO
)

1626 
	#MPU3050


	)

1627 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1628 #unde‡
INTERNAL_I2C_PULLUPS


1631 #i‡
deföed
(
DIYFLYING_MAGE_V1
)

1632 
	#MPU6050


1633 
	#BMP085


1634 
	#HMC5883


1635 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1636 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1637 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1638 #unde‡
INTERNAL_I2C_PULLUPS


1645 #i‡
deföed
(
ADXL345
Ë|| deföed(
BMA020
Ë|| deföed(
BMA180
Ë|| deföed(
BMA280
Ë|| deföed(
MMA7455
Ë|| deföed(
ADCACC
Ë|| deföed(
LIS3LV02
Ë|| deföed(
LSM303DLx_ACC
Ë|| deföed(
MPU6050
Ë|| deföed(
LSM330
Ë|| deföed(
MMA8451Q
)

1646 
	#ACC
 1

	)

1648 
	#ACC
 0

	)

1651 #i‡
deföed
(
HMC5883
Ë|| deföed(
HMC5843
Ë|| deföed(
AK8975
Ë|| deföed(
MAG3110
)

1652 
	#MAG
 1

	)

1654 
	#MAG
 0

	)

1657 #i‡
deföed
(
ITG3200
Ë|| deföed(
ITG3050
Ë|| deföed(
L3G4200D
Ë|| deföed(
MPU6050
Ë|| deföed(
LSM330
Ë|| deföed(
MPU3050
Ë|| deföed(
WMP
)

1658 
	#GYRO
 1

	)

1660 
	#GYRO
 0

	)

1663 #i‡
deföed
(
BMP085
Ë|| deföed(
MS561101BA
Ë|| deföed(
BMP280
)

1664 
	#BARO
 1

	)

1666 
	#BARO
 0

	)

1669 #i‡
deföed
(
GPS_SERIAL
Ë|| deföed(
I2C_GPS
)

1670 
	#GPS
 1

	)

1672 
	#GPS
 0

	)

1675 #i‡
deföed
(
USE_MSP_WP
)

1676 
	#NAVCAP
 1

	)

1678 
	#NAVCAP
 0

	)

1681 #i‡
deföed
(
SRF02
Ë|| deföed(
SRF08
Ë|| deföed(
SRF10
Ë|| deföed(
SRC235
Ë|| deföed(
I2C_GPS_SONAR
)

1682 
	#SONAR
 1

	)

1684 
	#SONAR
 0

	)

1687 #i‡
deföed
(
EXTENDED_AUX_STATES
)

1688 
	#EXTAUX
 1

	)

1690 
	#EXTAUX
 0

	)

1693 #i‡
deföed
(
RX_RSSI_CHAN
)

1694 
	#RX_RSSI


	)

1700 #i‡
deföed
(
TRI
)

1701 
	#MULTITYPE
 1

	)

1702 #ñi‡
deföed
(
QUADP
)

1703 
	#MULTITYPE
 2

	)

1704 #ñi‡
deföed
(
QUADX
)

1705 
	#MULTITYPE
 3

	)

1706 #ñi‡
deföed
(
BI
)

1707 
	#MULTITYPE
 4

	)

1708 
	#SERVO_RATES
 {30,30,100,100,0,1,100,100}

	)

1709 #ñi‡
deföed
(
GIMBAL
)

1710 
	#MULTITYPE
 5

	)

1711 #ñi‡
deföed
(
Y6
)

1712 
	#MULTITYPE
 6

	)

1713 #ñi‡
deföed
(
HEX6
)

1714 
	#MULTITYPE
 7

	)

1715 #ñi‡
deföed
(
FLYING_WING
)

1716 
	#MULTITYPE
 8

	)

1717 
	#SERVO_RATES
 {30,30,100,0,1,100,100,100}

	)

1718 #ñi‡
deföed
(
Y4
)

1719 
	#MULTITYPE
 9

	)

1720 #ñi‡
deföed
(
HEX6X
)

1721 
	#MULTITYPE
 10

	)

1722 #ñi‡
deföed
(
OCTOX8
)

1723 
	#MULTITYPE
 11

1724 #ñi‡
	`deföed
(
OCTOFLATP
)

	)

1725 
	#MULTITYPE
 12

1726 #ñi‡
	`deföed
(
OCTOFLATX
)

	)

1727 
	#MULTITYPE
 13

1728 #ñi‡
	`deföed
(
AIRPLANE
)

	)

1729 
	#MULTITYPE
 14

	)

1730 
	#SERVO_RATES
 {30,30,100,100,-100,100,100,100}

	)

1731 #ñi‡
deföed
 (
HELI_120_CCPM
)

1732 
	#MULTITYPE
 15

	)

1733 #ñi‡
deföed
 (
HELI_90_DEG
)

1734 
	#MULTITYPE
 16

	)

1735 
	#SERVO_RATES
 {30,30,100,-100,-100,100,100,100}

	)

1736 #ñi‡
deföed
(
VTAIL4
)

1737 
	#MULTITYPE
 17

	)

1738 #ñi‡
deföed
(
HEX6H
)

1739 
	#MULTITYPE
 18

	)

1740 #ñi‡
deföed
(
SINGLECOPTER
)

1741 
	#MULTITYPE
 21

	)

1742 
	#SERVO_RATES
 {30,30,100,0,1,0,1,100}

	)

1743 #ñi‡
deföed
(
DUALCOPTER
)

1744 
	#MULTITYPE
 20

	)

1751 #i‡
deföed
 (
AIRPLANE
Ë|| deföed(
HELICOPTER
)|| deföed(
SINGLECOPTER
)|| deföed(
DUALCOPTER
Ë&& deföed(
PROMINI
)

1752 #i‡
deföed
(
D12_POWER
)

1753 
	#SERVO_4_PINMODE
 ;

1754 
	#SERVO_4_PIN_HIGH
 ;

	)

1755 
	#SERVO_4_PIN_LOW
 ;

	)

1757 #unde‡
POWERPIN_PINMODE


1758 #unde‡
POWERPIN_ON


1759 #unde‡
POWERPIN_OFF


1760 
	#POWERPIN_PINMODE
 ;

	)

1761 
	#POWERPIN_ON
 ;

	)

1762 
	#POWERPIN_OFF
 ;

	)

1766 #i‡
deföed
(
POWERMETER_HARD
Ë|| deföed(
POWERMETER_SOFT
)

1767 
	#POWERMETER


	)

1768 
	#PLEVELSCALE
 50

1769 
	#PLEVELDIVSOFT
 100000

	)

1770 
	#PLEVELDIV
 36000

	)

1773 #i‡
deföed
 
PILOTLAMP


1774 
	#PL_CHANNEL
 
OCR0B


1775 
	#PL_ISR
 
TIMER0_COMPB_ve˘


	)

1776 
	#PL_INIT
 
TCCR0A
=0;
TIMSK0
|=(1<<
OCIE0B
);
PL_CHANNEL
=
PL_IDLE
;
	`PûŸLamp
(
PL_GRN_OFF
);PûŸLamp(
PL_BLU_OFF
);PûŸLamp(
PL_RED_OFF
);PûŸLamp(
PL_BZR_OFF
);

	)

1777 
	#BUZZERPIN_ON
 
	`PûŸLamp
(
PL_BZR_ON
);

	)

1778 
	#BUZZERPIN_OFF
 
	`PûŸLamp
(
PL_BZR_OFF
);

	)

1779 
	#PL_GRN_ON
 25

1780 
	#PL_GRN_OFF
 50

1781 
	#PL_BLU_ON
 75

1782 
	#PL_BLU_OFF
 100

1783 
	#PL_RED_ON
 125

1784 
	#PL_RED_OFF
 150

1785 
	#PL_BZR_ON
 175

1786 
	#PL_BZR_OFF
 200

1787 
	#PL_IDLE
 125

1789 

	)

1790 #i‡
deföed
(
PILOTLAMP
)

1791 
	#BUZZER


	)

1796 #i‡!
deföed
(
SERIAL_SUM_PPM
Ë&& !deföed(
SPEKTRUM
Ë&& !deföed(
SBUS
Ë&& !deföed(
SUMD
)

1797 
	#STANDARD_RX


	)

1800 #i‡
deföed
(
SPEKTRUM
Ë|| deföed(
SBUS
Ë|| deföed(
SUMD
)

1801 
	#SERIAL_RX


	)

1805 
	#BIND_CAPABLE
 0

1806 #i‡
	`deföed
(
SPEKTRUM
)

	)

1807 
	#SPEK_FRAME_SIZE
 16

	)

1808 #i‡(
SPEKTRUM
 == 1024)

1809 
	#SPEK_CHAN_SHIFT
 2

1810 
	#SPEK_CHAN_MASK
 0x03

1811 
	#SPEK_DATA_SHIFT


1812 
	#SPEK_BIND_PULSES
 3

	)

1814 #i‡(
SPEKTRUM
 == 2048)

1815 
	#SPEK_CHAN_SHIFT
 3

1816 
	#SPEK_CHAN_MASK
 0x07

1817 
	#SPEK_DATA_SHIFT
 >> 1

1818 
	#SPEK_BIND_PULSES
 5

	)

1820 #i‡
deföed
(
SPEK_BIND
)

1821 
	#BIND_CAPABLE
 1

	)

1822 #i‡!
deföed
(
SPEK_BIND_GROUND
)

1823 
	#SPEK_BIND_GROUND
 4

	)

1825 #i‡!
deföed
(
SPEK_BIND_POWER
)

1826 
	#SPEK_BIND_POWER
 5

	)

1828 #i‡!
deföed
(
SPEK_BIND_DATA
)

1829 
	#SPEK_BIND_DATA
 6

	)

1834 #i‡
deföed
(
SBUS
)

1835 
	#RC_CHANS
 18

	)

1836 #ñi‡
deföed
(
SPEKTRUM
Ë|| deföed(
SERIAL_SUM_PPM
)

1837 
	#RC_CHANS
 12

	)

1839 
	#RC_CHANS
 8

	)

1842 #i‡!(
deföed
(
DISPLAY_2LINES
)Ë&& !(deföed(
DISPLAY_MULTILINE
))

1843 #i‡(
deföed
(
LCD_VT100
)Ë|| (deföed(
OLED_I2C_128x64
Ë|| deföed(
OLED_DIGOLE
) )

1844 
	#DISPLAY_MULTILINE


	)

1846 
	#DISPLAY_2LINES


	)

1850 #i‡(
deföed
(
LCD_VT100
))

1851 #i‡!(
deföed
(
MULTILINE_PRE
))

1852 
	#MULTILINE_PRE
 6

	)

1854 #i‡!(
deföed
(
MULTILINE_POST
))

1855 
	#MULTILINE_POST
 9

	)

1857 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

1858 
	#DISPLAY_COLUMNS
 40

	)

1860 #ñi‡(
deföed
(
OLED_I2C_128x64
Ë&& deföed(
DISPLAY_FONT_DSIZE
))

1861 #i‡!(
deföed
(
MULTILINE_PRE
))

1862 
	#MULTILINE_PRE
 1

	)

1864 #i‡!(
deföed
(
MULTILINE_POST
))

1865 
	#MULTILINE_POST
 3

	)

1867 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

1868 
	#DISPLAY_COLUMNS
 21

	)

1870 #ñi‡(
deföed
(
OLED_I2C_128x64
))

1871 #i‡!(
deföed
(
MULTILINE_PRE
))

1872 
	#MULTILINE_PRE
 3

	)

1874 #i‡!(
deföed
(
MULTILINE_POST
))

1875 
	#MULTILINE_POST
 5

	)

1877 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

1878 
	#DISPLAY_COLUMNS
 21

	)

1880 #ñi‡(
deföed
(
OLED_DIGOLE
Ë&& deföed(
DISPLAY_FONT_DSIZE
))

1881 #i‡!(
deföed
(
MULTILINE_PRE
))

1882 
	#MULTILINE_PRE
 2

	)

1884 #i‡!(
deföed
(
MULTILINE_POST
))

1885 
	#MULTILINE_POST
 3

	)

1887 #ñi‡(
deföed
(
OLED_DIGOLE
))

1888 #i‡!(
deföed
(
MULTILINE_PRE
))

1889 
	#MULTILINE_PRE
 3

	)

1891 #i‡!(
deföed
(
MULTILINE_POST
))

1892 
	#MULTILINE_POST
 4

	)

1894 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

1895 
	#DISPLAY_COLUMNS
 21

	)

1899 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

1900 
	#DISPLAY_COLUMNS
 16

	)

1909 #ifde‡
OVERRIDE_V_BATPIN


1910 #unde‡
V_BATPIN


1911 
	#V_BATPIN
 
OVERRIDE_V_BATPIN


	)

1913 #ifde‡
OVERRIDE_PSENSORPIN


1914 #unde‡
PSENSORPIN


1915 
	#PSENSORPIN
 
OVERRIDE_PSENSORPIN


	)

1917 #ifde‡
OVERRIDE_LEDPIN_PINMODE


1918 #unde‡
LEDPIN_PINMODE


1919 #unde‡
LEDPIN_TOGGLE


1920 #unde‡
LEDPIN_OFF


1921 #unde‡
LEDPIN_ON


1922 
	#LEDPIN_PINMODE
 
OVERRIDE_LEDPIN_PINMODE


	)

1923 
	#LEDPIN_TOGGLE
 
OVERRIDE_LEDPIN_TOGGLE


	)

1924 
	#LEDPIN_OFF
 
OVERRIDE_LEDPIN_OFF


	)

1925 
	#LEDPIN_ON
 
OVERRIDE_LEDPIN_ON


	)

1927 #ifde‡
OVERRIDE_BUZZERPIN_PINMODE


1928 #unde‡
BUZZERPIN_PINMODE


1929 #unde‡
BUZZERPIN_ON


1930 #unde‡
BUZZERPIN_OFF


1931 
	#BUZZERPIN_PINMODE
 
OVERRIDE_BUZZERPIN_PINMODE


	)

1932 
	#BUZZERPIN_ON
 
OVERRIDE_BUZZERPIN_ON


	)

1933 
	#BUZZERPIN_OFF
 
OVERRIDE_BUZZERPIN_OFF


	)

1937 #ifde‡
FORCE_GYRO_ORIENTATION


1938 #unde‡
GYRO_ORIENTATION


1939 
	#GYRO_ORIENTATION
 
FORCE_GYRO_ORIENTATION


	)

1941 #ifde‡
FORCE_ACC_ORIENTATION


1942 #unde‡
ACC_ORIENTATION


1943 
	#ACC_ORIENTATION
 
FORCE_ACC_ORIENTATION


	)

1945 #ifde‡
FORCE_MAG_ORIENTATION


1946 #unde‡
MAG_ORIENTATION


1947 
	#MAG_ORIENTATION
 
FORCE_MAG_ORIENTATION


	)

1951 #ifde‡
FORCE_SERVO_RATES


1952 #unde‡
SERVO_RATES


1953 
	#SERVO_RATES
 
FORCE_SERVO_RATES


	)

1959 #i‚de‡
NUMBER_MOTOR


1963 #i‡(
deföed
(
LCD_DUMMY
Ë|| deföed(
LCD_SERIAL3W
Ë|| deföed(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
Ë|| deföed(
LCD_TTY
Ë|| deföed(
LCD_ETPP
Ë|| deföed(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
Ë|| deföed(
OLED_I2C_128x64
ËË|| deföed(
OLED_DIGOLE
)

1964 
	#HAS_LCD


	)

1967 #i‡(
deföed
(
LCD_CONF
Ë|| deföed(
LCD_TELEMETRY
)Ë&& !(deföed(
HAS_LCD
) )

1971 #i‡
deföed
(
POWERMETER_SOFT
Ë&& !(deföed(
VBAT
))

1975 #i‡
deföed
(
WATTS
Ë&& !(deföed(
POWERMETER_HARD
)Ë&& !(deföed(
VBAT
))

1979 #i‡
deföed
(
LCD_TELEMETRY_AUTO
Ë&& !(deföed(
LCD_TELEMETRY
))

1983 #i‡
deföed
(
LCD_TELEMETRY_STEP
Ë&& !(deföed(
LCD_TELEMETRY
))

1987 #i‡
deföed
(
A32U4_4_HW_PWM_SERVOS
Ë&& !(deföed(
HELI_120_CCPM
))

1991 #i‡
GPS
 && !
deföed
(
NMEA
Ë&& !deföed(
UBLOX
Ë&& !deföed(
MTK_BINARY16
Ë&& !deföed(
MTK_BINARY19
Ë&& !deföed(
INIT_MTK_GPS
Ë&& !deföed(
I2C_GPS
)

1995 #i‡
deföed
(
NUNCHUK
) || \

1996 
deföed
–
MPU6050_LPF_256HZ
Ë|| deföed(
MPU6050_LPF_188HZ
Ë|| deföed–
MPU6050_LPF_98HZ
Ë|| deföed–
MPU6050_LPF_42HZ
) || \

1997 
deföed
–
MPU6050_LPF_20HZ
Ë|| deföed–
MPU6050_LPF_10HZ
Ë|| deföed–
MPU6050_LPF_5HZ
) || \

1998 
deföed
–
ITG3200_LPF_256HZ
Ë|| deföed–
ITG3200_LPF_188HZ
Ë|| deföed–
ITG3200_LPF_98HZ
Ë|| deföed–
ITG3200_LPF_42HZ
) || \

1999 
deföed
–
ITG3200_LPF_20HZ
Ë|| 
	$deföed
–
ITG3200_LPF_10HZ
)

	@types.h

1 #i‚de‡
TYPES_H_


2 
	#TYPES_H_


	)

4 
	erc
 {

5 
	mROLL
,

6 
	mPITCH
,

7 
	mYAW
,

8 
	mTHROTTLE
,

9 
	mAUX1
,

10 
	mAUX2
,

11 
	mAUX3
,

12 
	mAUX4
,

13 
	mAUX5
,

14 
	mAUX6
,

15 
	mAUX7
,

16 
	mAUX8


19 
	epid
 {

20 
	mPIDROLL
,

21 
	mPIDPITCH
,

22 
	mPIDYAW
,

23 
	mPIDALT
,

24 
	mPIDPOS
,

25 
	mPIDPOSR
,

26 
	mPIDNAVR
,

27 
	mPIDLEVEL
,

28 
	mPIDMAG
,

29 
	mPIDVEL
,

30 
	mPIDITEMS


33 
	ebox
 {

34 
	mBOXARM
,

35 #i‡
ACC


36 
	mBOXANGLE
,

37 
	mBOXHORIZON
,

39 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

40 
	mBOXBARO
,

42 #ifde‡
VARIOMETER


43 
	mBOXVARIO
,

45 
	mBOXMAG
,

46 #i‡
deföed
(
HEADFREE
)

47 
	mBOXHEADFREE
,

48 
	mBOXHEADADJ
,

50 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
Ë|| deföed(
SERVO_MIX_TILT
)

51 
	mBOXCAMSTAB
,

53 #i‡
deföed
(
CAMTRIG
)

54 
	mBOXCAMTRIG
,

56 #i‡
GPS


57 
	mBOXGPSHOME
,

58 
	mBOXGPSHOLD
,

60 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

61 
	mBOXPASSTHRU
,

63 #i‡
deföed
(
BUZZER
)

64 
	mBOXBEEPERON
,

66 #i‡
deföed
(
LED_FLASHER
)

67 
	mBOXLEDMAX
,

68 
	mBOXLEDLOW
,

70 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

71 
	mBOXLLIGHTS
,

73 #ifde‡
INFLIGHT_ACC_CALIBRATION


74 
	mBOXCALIB
,

76 #ifde‡
GOVERNOR_P


77 
	mBOXGOV
,

79 #ifde‡
OSD_SWITCH


80 
	mBOXOSD
,

82 #i‡
GPS


83 
	mBOXGPSNAV
,

84 
	mBOXLAND
,

86 
	mCHECKBOXITEMS


90 
öt16_t
 
	maccSmoŸh
[3];

91 
öt16_t
 
	mgyroD©a
[3];

92 
öt16_t
 
	mmagADC
[3];

93 
öt16_t
 
	mgyroADC
[3];

94 
öt16_t
 
	maccADC
[3];

95 } 
	timu_t
;

98 
uöt8_t
 
	mvb©
;

99 
uöt16_t
 
	mötPowîMëîSum
;

100 
uöt16_t
 
	mrssi
;

101 
uöt16_t
 
	mam≥øge
;

102 
uöt16_t
 
	mw©ts
;

103 
uöt16_t
 
	mvb©˚Œs
[
VBAT_CELLS_NUM
];

104 } 
	t™Æog_t
;

107 
öt32_t
 
	mE°A…
;

108 
öt16_t
 
	mv¨io
;

109 } 
	tÆt_t
;

112 
öt16_t
 
	m™gÀ
[2];

113 
öt16_t
 
	mhódög
;

114 } 
	t©t_t
;

117 
uöt8_t
 
	mOK_TO_ARM
 :1 ;

118 
uöt8_t
 
	mARMED
 :1 ;

119 
uöt8_t
 
	mACC_CALIBRATED
 :1 ;

120 
uöt8_t
 
	mANGLE_MODE
 :1 ;

121 
uöt8_t
 
	mHORIZON_MODE
 :1 ;

122 
uöt8_t
 
	mMAG_MODE
 :1 ;

123 
uöt8_t
 
	mBARO_MODE
 :1 ;

124 #ifde‡
HEADFREE


125 
uöt8_t
 
	mHEADFREE_MODE
 :1 ;

127 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

128 
uöt8_t
 
	mPASSTHRU_MODE
 :1 ;

130 
uöt8_t
 
	mSMALL_ANGLES_25
 :1 ;

131 #i‡
MAG


132 
uöt8_t
 
	mCALIBRATE_MAG
 :1 ;

134 #ifde‡
VARIOMETER


135 
uöt8_t
 
	mVARIO_MODE
 :1;

137 
uöt8_t
 
	mGPS_mode
: 2;

138 #i‡
BARO
 || 
GPS


139 
uöt8_t
 
	mTHROTTLE_IGNORED
 : 1;

141 #i‡
GPS


142 
uöt8_t
 
	mGPS_FIX
 :1 ;

143 
uöt8_t
 
	mGPS_FIX_HOME
 :1 ;

144 
uöt8_t
 
	mGPS_BARO_MODE
 : 1;

145 
uöt8_t
 
	mGPS_hód_£t
: 1;

146 
uöt8_t
 
	mLAND_COMPLETED
: 1;

147 
uöt8_t
 
	mLAND_IN_PROGRESS
: 1;

149 } 
	tÊags_°ru˘_t
;

152 
uöt8_t
 
	mcuºítSë
;

153 
öt16_t
 
	maccZîo
[3];

154 
öt16_t
 
	mmagZîo
[3];

155 
uöt16_t
 
	mÊashsum
;

156 
uöt8_t
 
	mchecksum
;

157 } 
	tglobÆ_c⁄f_t
;

159 
	spid_
 {

160 
uöt8_t
 
	mP8
;

161 
uöt8_t
 
	mI8
;

162 
uöt8_t
 
	mD8
;

165 
	s£rvo_c⁄f_
 {

166 
öt16_t
 
	mmö
;

167 
öt16_t
 
	mmax
;

168 
öt16_t
 
	mmiddÀ
;

169 
öt8_t
 
	møã
;

173 
pid_
 
	mpid
[
PIDITEMS
];

174 
uöt8_t
 
	mrcR©e8
;

175 
uöt8_t
 
	mrcExpo8
;

176 
uöt8_t
 
	mrﬁlPôchR©e
;

177 
uöt8_t
 
	myawR©e
;

178 
uöt8_t
 
	mdynThrPID
;

179 
uöt8_t
 
	mthrMid8
;

180 
uöt8_t
 
	mthrExpo8
;

181 
öt16_t
 
	m™gÀTrim
[2];

182 #i‡
deföed
(
EXTENDED_AUX_STATES
)

183 
uöt32_t
 
	ma˘iv©e
[
CHECKBOXITEMS
];

185 
uöt16_t
 
	ma˘iv©e
[
CHECKBOXITEMS
];

187 
uöt8_t
 
	mpowîTriggî1
;

188 #i‡
MAG


189 
öt16_t
 
	mmag_de˛ö©i⁄
;

191 
£rvo_c⁄f_
 
	m£rvoC⁄f
[8];

192 #i‡
deföed
(
GYRO_SMOOTHING
)

193 
uöt8_t
 
	mSmoŸhög
[3];

195 #i‡
deföed
 (
FAILSAFE
)

196 
öt16_t
 
	mÁûß„_thrŸée
;

198 #ifde‡
VBAT


199 
uöt8_t
 
	mvb©sˇÀ
;

200 
uöt8_t
 
	mvb©Àvñ_w¨n1
;

201 
uöt8_t
 
	mvb©Àvñ_w¨n2
;

202 
uöt8_t
 
	mvb©Àvñ_¸ô
;

204 #ifde‡
POWERMETER


205 
uöt8_t
 
	mpöt2ma
;

207 #ifde‡
POWERMETER_HARD


208 
uöt16_t
 
	mp£ns‹nuŒ
;

210 #ifde‡
MMGYRO


211 
uöt8_t
 
	mmmgyro
;

213 #ifde‡
ARMEDTIMEWARNING


214 
uöt16_t
 
	m¨medtimew¨nög
;

216 
öt16_t
 
	mmöthrŸée
;

217 #ifde‡
GOVERNOR_P


218 
öt16_t
 
	mgovîn‹P
;

219 
öt16_t
 
	mgovîn‹D
;

221 #ifde‡
YAW_COLL_PRECOMP


222 
uöt8_t
 
	myawCﬁlPªcomp
;

223 
uöt16_t
 
	myawCﬁlPªcompDódb™d
;

225 
uöt8_t
 
	mchecksum
;

226 } 
	tc⁄f_t
;

228 #ifde‡
LOG_PERMANENT


230 
uöt16_t
 
	m¨m
;

231 
uöt16_t
 
	mdißrm
;

232 
uöt16_t
 
	m°¨t
;

233 
uöt32_t
 
	m¨med_time
 ;

234 
uöt32_t
 
	mli„time
;

235 
uöt16_t
 
	mÁûß„
;

236 
uöt16_t
 
	mi2c
;

237 
uöt8_t
 
	mru¬ög
;

238 
uöt8_t
 
	mchecksum
;

239 } 
	t∂og_t
;

242 #i‡
GPS


247 
	egpsmode
 {

248 
	mGPS_MODE_NONE
 = 0,

249 
	mGPS_MODE_HOLD
,

250 
	mGPS_MODE_RTH
,

251 
	mGPS_MODE_NAV


254 
	e«v°©e
 {

255 
	mNAV_STATE_NONE
 = 0,

256 
	mNAV_STATE_RTH_START
,

257 
	mNAV_STATE_RTH_ENROUTE
,

258 
	mNAV_STATE_HOLD_INFINIT
,

259 
	mNAV_STATE_HOLD_TIMED
,

260 
	mNAV_STATE_WP_ENROUTE
,

261 
	mNAV_STATE_PROCESS_NEXT
,

262 
	mNAV_STATE_DO_JUMP
,

263 
	mNAV_STATE_LAND_START
,

264 
	mNAV_STATE_LAND_IN_PROGRESS
,

265 
	mNAV_STATE_LANDED
,

266 
	mNAV_STATE_LAND_SETTLE
,

267 
	mNAV_STATE_LAND_START_DESCENT


270 
	e«vîr‹
 {

271 
	mNAV_ERROR_NONE
 = 0,

272 
	mNAV_ERROR_TOOFAR
,

273 
	mNAV_ERROR_SPOILED_GPS
,

274 
	mNAV_ERROR_WP_CRC
,

275 
	mNAV_ERROR_FINISH
,

276 
	mNAV_ERROR_TIMEWAIT
,

277 
	mNAV_ERROR_INVALID_JUMP
,

278 
	mNAV_ERROR_INVALID_DATA
,

279 
	mNAV_ERROR_WAIT_FOR_RTH_ALT
,

280 
	mNAV_ERROR_GPS_FIX_LOST
,

281 
	mNAV_ERROR_DISARMED
,

282 
	mNAV_ERROR_LANDING


286 
uöt8_t
 
	mnumbî
;

287 
öt32_t
 
	mpos
[2];

288 
uöt8_t
 
	ma˘i⁄
;

289 
öt16_t
 
	m∑ømëî1
;

290 
öt16_t
 
	m∑ømëî2
;

291 
öt16_t
 
	m∑ømëî3
;

292 
uöt32_t
 
	mÆtôude
;

293 
uöt8_t
 
	mÊag
;

294 
uöt8_t
 
	mchecksum
;

295 } 
	tmissi⁄_°ï_°ru˘
;

303 
uöt8_t
 
	mfûãrög
 : 1;

304 
uöt8_t
 
	mÀad_fûãr
 : 1;

305 
uöt8_t
 
	md⁄t_ª£t_home_©_¨m
 : 1;

306 
uöt8_t
 
	m«v_c⁄åﬁs_hódög
 : 1;

307 
uöt8_t
 
	m«v_èû_fú°
 : 1;

308 
uöt8_t
 
	m«v_πh_èkeoff_hódög
 : 1;

309 
uöt8_t
 
	m¶ow_«v
 : 1;

310 
uöt8_t
 
	mwaô_f‹_πh_Æt
 : 1;

312 
uöt8_t
 
	mign‹e_thrŸée
: 1;

313 
uöt8_t
 
	mèkeovî_b¨o
: 1;

318 
uöt16_t
 
	mwp_ødius
;

319 
uöt16_t
 
	mß„_wp_di°™˚
;

320 
uöt16_t
 
	m«v_max_Ætôude
;

321 
uöt16_t
 
	m«v_•ìd_max
;

322 
uöt16_t
 
	m«v_•ìd_mö
;

323 
uöt8_t
 
	m¸os°øck_gaö
;

324 
uöt16_t
 
	m«v_b™k_max
;

325 
uöt16_t
 
	mπh_Ætôude
;

326 
uöt8_t
 
	mœnd_•ìd
;

327 
uöt16_t
 
	m„n˚
;

329 
uöt8_t
 
	mmax_wp_numbî
;

331 
uöt8_t
 
	mchecksum
;

332 } 
	tgps_c⁄f_°ru˘
;

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


489 
signgam
;

492 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

493 || 
__HAVE_DISTINCT_FLOAT32
 \

494 || 
__HAVE_DISTINCT_FLOAT64
 \

495 || 
__HAVE_DISTINCT_FLOAT32X
 \

496 || 
__HAVE_DISTINCT_FLOAT64X
 \

497 || 
__HAVE_DISTINCT_FLOAT128X
)

510 #ifde‡
__NO_LONG_DOUBLE_MATH


511 #i‡
__HAVE_DISTINCT_FLOAT128


514 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

515 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

516 #ñi‡
__HAVE_DISTINCT_FLOAT128


517 #i‡
__HAVE_GENERIC_SELECTION


518 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


519 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

521 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

523 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


524 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


525 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

527 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

530 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

532 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

533 
	`_Gíîic
 ((
TG_ARG
), \

534 : 
FUNC
 ## 
f
 
ARGS
, \

535 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

536 : 
FUNC
 
ARGS
, \

537 : 
FUNC
 ## 
l
 
ARGS
, \

538 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

539 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

541 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


544 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

545 
__buûtö_choo£_ex¥
 \

546 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

547 
FUNC
 ## 
f
 
ARGS
, \

548 
__buûtö_choo£_ex¥
 \

549 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

550 
FUNC
 
ARGS
, \

551 
__buûtö_choo£_ex¥
 \

552 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

553 
FUNC
 ## 
l
 
ARGS
, \

554 
FUNC
 ## 
f128
 
ARGS
)))

	)

557 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

558 ( (
TG_ARG
) ==  () \

559 ? 
FUNC
 ## 
f
 
ARGS
 \

560 :  (
TG_ARG
) ==  () \

561 ? 
FUNC
 
ARGS
 \

562 : 
FUNC
 ## 
l
 
ARGS
)

	)

566 #ifde‡
__USE_ISOC99


571 
FP_NAN
 =

572 
	#FP_NAN
 0

	)

573 
FP_NAN
,

574 
FP_INFINITE
 =

575 
	#FP_INFINITE
 1

	)

576 
FP_INFINITE
,

577 
FP_ZERO
 =

578 
	#FP_ZERO
 2

	)

579 
FP_ZERO
,

580 
FP_SUBNORMAL
 =

581 
	#FP_SUBNORMAL
 3

	)

582 
FP_SUBNORMAL
,

583 
FP_NORMAL
 =

584 
	#FP_NORMAL
 4

	)

585 
FP_NORMAL


593 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

594 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

601 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

602 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

604 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

608 #i‡
	`__GNUC_PREREQ
 (6,0)

609 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

610 #ñi‡
deföed
 
__˝lu•lus


618 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

619 #ñi‡
	`__GNUC_PREREQ
 (4,0)

620 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

622 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

626 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


627 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

629 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

633 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


634 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

636 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

641 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


642 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

644 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

648 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

649 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


655 
	#isöf
(
x
) \

656 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

657 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

658 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


659 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

661 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

665 
	#MATH_ERRNO
 1

	)

666 
	#MATH_ERREXCEPT
 2

	)

673 #ifde‡
__FAST_MATH__


674 
	#m©h_îrh™dlög
 0

	)

675 #ñi‡
deföed
 
__NO_MATH_ERRNO__


676 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

678 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

683 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

684 
	~<bôs/isˇn⁄iˇl.h
>

687 #i‚de‡
__˝lu•lus


688 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

697 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

698 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

699 
ölöe
 

700 
	`issig«lög
 (
__vÆ
)

702 #ifde‡
__NO_LONG_DOUBLE_MATH


703  
	`__issig«lög
 (
__vÆ
);

705  
	`__issig«lögl
 (
__vÆ
);

708 #i‡
__HAVE_DISTINCT_FLOAT128


709 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

711 
	}
}

715 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

718 #i‚de‡
__˝lu•lus


719 #ifde‡
__SUPPORT_SNAN__


720 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

722 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

726 #ifde‡
__SUPPORT_SNAN__


727 
ölöe
 

728 
iszîo
 (
__vÆ
)

730  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

732 
ölöe
 

733 
iszîo
 (
__vÆ
)

735  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

737 
ölöe
 

738 
iszîo
 (
__vÆ
)

740 #ifde‡
__NO_LONG_DOUBLE_MATH


741  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

743  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

746 #i‡
__HAVE_DISTINCT_FLOAT128


747 
ölöe
 

748 
iszîo
 (
_Flﬂt128
 
__vÆ
)

750  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

754 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


755 
iszîo
 (
__T
 
__vÆ
)

757  
__vÆ
 == 0;

764 #ifde‡
__USE_XOPEN


766 
	#MAXFLOAT
 3.40282347e+38F

	)

771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


772 
	#M_E
 2.7182818284590452354

	)

773 
	#M_LOG2E
 1.4426950408889634074

	)

774 
	#M_LOG10E
 0.43429448190325182765

	)

775 
	#M_LN2
 0.69314718055994530942

	)

776 
	#M_LN10
 2.30258509299404568402

	)

777 
	#M_PI
 3.14159265358979323846

	)

778 
	#M_PI_2
 1.57079632679489661923

	)

779 
	#M_PI_4
 0.78539816339744830962

	)

780 
	#M_1_PI
 0.31830988618379067154

	)

781 
	#M_2_PI
 0.63661977236758134308

	)

782 
	#M_2_SQRTPI
 1.12837916709551257390

	)

783 
	#M_SQRT2
 1.41421356237309504880

	)

784 
	#M_SQRT1_2
 0.70710678118654752440

	)

790 #ifde‡
__USE_GNU


791 
	#M_El
 2.718281828459045235360287471352662498L

	)

792 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

793 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

794 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

795 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

796 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

797 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

798 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

799 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

800 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

801 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

802 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

803 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

806 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


807 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

808 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

809 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

810 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

811 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

812 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

813 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

814 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

815 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

816 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

817 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

818 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

819 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

822 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


823 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

824 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

825 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

826 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

827 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

828 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

829 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

830 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

831 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

832 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

833 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

834 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

835 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

838 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


839 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

840 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

841 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

842 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

843 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

844 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

845 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

846 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

847 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

848 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

849 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

850 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

851 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

854 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


855 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

856 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

857 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

858 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

859 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

860 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

861 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

862 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

863 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

864 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

865 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

866 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

867 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

870 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


871 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

872 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

873 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

874 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

875 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

876 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

877 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

878 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

879 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

880 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

881 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

882 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

883 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

886 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


887 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

888 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

889 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

890 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

891 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

892 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

893 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

894 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

895 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

896 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

897 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

898 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

899 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

902 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


909 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


910 
	#__NO_MATH_INLINES
 1

	)

913 #ifde‡
__USE_ISOC99


914 #i‡
__GNUC_PREREQ
 (3, 1)

921 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

922 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

923 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

924 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

925 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

926 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

928 
	#isgª©î
(
x
, 
y
) \

929 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

930 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

931 
	#isgª©îequÆ
(
x
, 
y
) \

932 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

933 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

934 
	#i¶ess
(
x
, 
y
) \

935 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

936 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

937 
	#i¶es£quÆ
(
x
, 
y
) \

938 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

939 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

940 
	#i¶essgª©î
(
x
, 
y
) \

941 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

942 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

944 
	#isun‹dîed
(
x
, 
y
) \

945 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

946 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

951 #ifde‡
__USE_EXTERN_INLINES


952 
	~<bôs/m©hölöe.h
>

957 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

960 
	#_MdoubÀ_
 

	)

961 
	#__MATH_DECLARING_DOUBLE
 1

	)

962 
	#__MATH_DECLARING_FLOATN
 0

	)

963 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

964 
fun˘i⁄
 ## 
ªíå™t


	)

965 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

966 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

967 
	~<bôs/m©h-föôe.h
>

968 #unde‡
_MdoubÀ_


969 #unde‡
__MATH_DECLARING_DOUBLE


970 #unde‡
__MATH_DECLARING_FLOATN


971 #unde‡
__REDIRFROM_X


972 #unde‡
__REDIRTO_X


976 #ifde‡
__USE_ISOC99


979 
	#_MdoubÀ_
 

	)

980 
	#__MATH_DECLARING_DOUBLE
 0

	)

981 
	#__MATH_DECLARING_FLOATN
 0

	)

982 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

983 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

984 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

985 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

986 
	~<bôs/m©h-föôe.h
>

987 #unde‡
_MdoubÀ_


988 #unde‡
__MATH_DECLARING_DOUBLE


989 #unde‡
__MATH_DECLARING_FLOATN


990 #unde‡
__REDIRFROM_X


991 #unde‡
__REDIRTO_X


994 #ifde‡
__MATH_DECLARE_LDOUBLE


995 
	#_MdoubÀ_
 

	)

996 
	#__MATH_DECLARING_DOUBLE
 0

	)

997 
	#__MATH_DECLARING_FLOATN
 0

	)

998 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

999 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1000 #ifde‡
__NO_LONG_DOUBLE_MATH


1001 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1002 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1004 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1005 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1007 
	~<bôs/m©h-föôe.h
>

1008 #unde‡
_MdoubÀ_


1009 #unde‡
__MATH_DECLARING_DOUBLE


1010 #unde‡
__MATH_DECLARING_FLOATN


1011 #unde‡
__REDIRFROM_X


1012 #unde‡
__REDIRTO_X


1019 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1020 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1021 
	#_MdoubÀ_
 
_Flﬂt16


	)

1022 
	#__MATH_DECLARING_DOUBLE
 0

	)

1023 
	#__MATH_DECLARING_FLOATN
 1

	)

1024 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1025 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1026 #i‡
__HAVE_DISTINCT_FLOAT16


1027 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1028 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1032 
	~<bôs/m©h-föôe.h
>

1033 #unde‡
_MdoubÀ_


1034 #unde‡
__MATH_DECLARING_DOUBLE


1035 #unde‡
__MATH_DECLARING_FLOATN


1036 #unde‡
__REDIRFROM_X


1037 #unde‡
__REDIRTO_X


1040 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1041 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1042 
	#_MdoubÀ_
 
_Flﬂt32


	)

1043 
	#__MATH_DECLARING_DOUBLE
 0

	)

1044 
	#__MATH_DECLARING_FLOATN
 1

	)

1045 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1046 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1047 #i‡
__HAVE_DISTINCT_FLOAT32


1048 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1049 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1051 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1052 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1054 
	~<bôs/m©h-föôe.h
>

1055 #unde‡
_MdoubÀ_


1056 #unde‡
__MATH_DECLARING_DOUBLE


1057 #unde‡
__MATH_DECLARING_FLOATN


1058 #unde‡
__REDIRFROM_X


1059 #unde‡
__REDIRTO_X


1062 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1063 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1064 
	#_MdoubÀ_
 
_Flﬂt64


	)

1065 
	#__MATH_DECLARING_DOUBLE
 0

	)

1066 
	#__MATH_DECLARING_FLOATN
 1

	)

1067 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1068 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1069 #i‡
__HAVE_DISTINCT_FLOAT64


1070 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1071 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1073 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1074 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1076 
	~<bôs/m©h-föôe.h
>

1077 #unde‡
_MdoubÀ_


1078 #unde‡
__MATH_DECLARING_DOUBLE


1079 #unde‡
__MATH_DECLARING_FLOATN


1080 #unde‡
__REDIRFROM_X


1081 #unde‡
__REDIRTO_X


1084 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1085 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1086 
	#_MdoubÀ_
 
_Flﬂt128


	)

1087 
	#__MATH_DECLARING_DOUBLE
 0

	)

1088 
	#__MATH_DECLARING_FLOATN
 1

	)

1089 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1090 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1091 #i‡
__HAVE_DISTINCT_FLOAT128


1092 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1093 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1095 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1096 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1098 
	~<bôs/m©h-föôe.h
>

1099 #unde‡
_MdoubÀ_


1100 #unde‡
__MATH_DECLARING_DOUBLE


1101 #unde‡
__MATH_DECLARING_FLOATN


1102 #unde‡
__REDIRFROM_X


1103 #unde‡
__REDIRTO_X


1106 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1107 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1108 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1109 
	#__MATH_DECLARING_DOUBLE
 0

	)

1110 
	#__MATH_DECLARING_FLOATN
 1

	)

1111 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1112 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1113 #i‡
__HAVE_DISTINCT_FLOAT32X


1114 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1115 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1117 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1118 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1120 
	~<bôs/m©h-föôe.h
>

1121 #unde‡
_MdoubÀ_


1122 #unde‡
__MATH_DECLARING_DOUBLE


1123 #unde‡
__MATH_DECLARING_FLOATN


1124 #unde‡
__REDIRFROM_X


1125 #unde‡
__REDIRTO_X


1128 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1129 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1130 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1131 
	#__MATH_DECLARING_DOUBLE
 0

	)

1132 
	#__MATH_DECLARING_FLOATN
 1

	)

1133 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1134 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1135 #i‡
__HAVE_DISTINCT_FLOAT64X


1136 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1137 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1138 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1139 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1140 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1142 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1143 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1145 
	~<bôs/m©h-föôe.h
>

1146 #unde‡
_MdoubÀ_


1147 #unde‡
__MATH_DECLARING_DOUBLE


1148 #unde‡
__MATH_DECLARING_FLOATN


1149 #unde‡
__REDIRFROM_X


1150 #unde‡
__REDIRTO_X


1153 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1154 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1155 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1156 
	#__MATH_DECLARING_DOUBLE
 0

	)

1157 
	#__MATH_DECLARING_FLOATN
 1

	)

1158 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1159 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1160 #i‡
__HAVE_DISTINCT_FLOAT128X


1161 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1162 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1166 
	~<bôs/m©h-föôe.h
>

1167 #unde‡
_MdoubÀ_


1168 #unde‡
__MATH_DECLARING_DOUBLE


1169 #unde‡
__MATH_DECLARING_FLOATN


1170 #unde‡
__REDIRFROM_X


1171 #unde‡
__REDIRTO_X


1176 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1179 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1180 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1181 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1182 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1183 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1184 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1186 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1191 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1192 
	#i£qsig
(
x
, 
y
) \

1193 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1206 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1208 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1210 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1212  
	`__i£qsigf
 (
__x
, 
__y
);

1216 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1218 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1220  
	`__i£qsig
 (
__x
, 
__y
);

1224 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1226 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1228 #i‚de‡
__NO_LONG_DOUBLE_MATH


1229  
	`__i£qsigl
 (
__x
, 
__y
);

1231  
	`__i£qsig
 (
__x
, 
__y
);

1236 #i‡
__HAVE_DISTINCT_FLOAT128


1237 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1239 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1241  
	`__i£qsigf128
 (
__x
, 
__y
);

1246 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1247 
ölöe
 

1248 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1250 #i‡
__˝lu•lus
 >= 201103L

1251 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1253 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1255  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1258 
	}
}

1263 
__END_DECLS


	@
1
.
1
/usr/include
26
247
Alarms.cpp
Alarms.h
EEPROM.cpp
EEPROM.h
GPS.cpp
GPS.h
IMU.cpp
IMU.h
LCD.cpp
LCD.h
MultiWii.cpp
MultiWii.h
Output.cpp
Output.h
Protocol.cpp
Protocol.h
RX.cpp
RX.h
Sensors.cpp
Sensors.h
Serial.cpp
Serial.h
config.h
def.h
types.h
/usr/include/math.h
